{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "setTuning",
        "paramId": "setTuning",
        "minimum": 0,
        "maximum": 3,
        "exponent": 1,
        "steps": 4,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_12_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "filterType",
        "paramId": "filterType",
        "minimum": 0,
        "maximum": 2,
        "exponent": 1,
        "steps": 3,
        "initialValue": 2,
        "isEnum": true,
        "enumValues": [
          "lopass",
          "hipass",
          "bypass"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s07",
        "constrainFunc": "param_13_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "filterCutoff",
        "paramId": "filterCutoff",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 130,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s06",
        "constrainFunc": "param_14_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "filterQ",
        "paramId": "filterQ",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s05",
        "constrainFunc": "param_15_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "reverbSize",
        "paramId": "reverbSize",
        "minimum": 0.1,
        "maximum": 300,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_16_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "reverbMix",
        "paramId": "reverbMix",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_17_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "setTuning",
        "paramId": "poly/setTuning",
        "minimum": 0,
        "maximum": 3,
        "exponent": 1,
        "steps": 4,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_06_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "filterType",
        "paramId": "poly/filterType",
        "minimum": 0,
        "maximum": 2,
        "exponent": 1,
        "steps": 3,
        "initialValue": 2,
        "isEnum": true,
        "enumValues": [
          "lopass",
          "hipass",
          "bypass"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s06",
        "constrainFunc": "param_07_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "filterCutoff",
        "paramId": "poly/filterCutoff",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 130,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s05",
        "constrainFunc": "param_08_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "filterQ",
        "paramId": "poly/filterQ",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.2,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_09_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "reverbSize",
        "paramId": "poly/reverbSize",
        "minimum": 0.1,
        "maximum": 300,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_10_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "reverbMix",
        "paramId": "poly/reverbMix",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_11_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "mode",
        "paramId": "poly/oscillator/mode",
        "minimum": 0,
        "maximum": 5,
        "exponent": 1,
        "steps": 6,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "noise",
          "sine",
          "saw",
          "triangle",
          "square",
          "pulse"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_01_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "attack",
        "paramId": "poly/envelope/attack",
        "minimum": 0,
        "maximum": 100000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_02_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "decay",
        "paramId": "poly/envelope/decay",
        "minimum": 0,
        "maximum": 100000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_03_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "sustain",
        "paramId": "poly/envelope/sustain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_04_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "release",
        "paramId": "poly/envelope/release",
        "minimum": 0,
        "maximum": 10000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 500,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_05_value_constrain"
      }
    ],
    "numParameters": 17,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1"
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2"
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 3:\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 2 ? 2 : value));\n            let normalizedValue = (value - 0) / (2 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 3);\n            }\n\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 3 ? 3 : value));\n            let normalizedValue = (value - 0) / (3 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 4);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 0) / (10000 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < 0.1 ? 0.1 : (value > 300 ? 300 : value));\n            let normalizedValue = (value - 0.1) / (300 - 0.1);\n            return normalizedValue;\n        }\n    default:\n        index -= 6;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 3:\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 3);\n            }\n\n            {\n                return 0 + value * (2 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 4);\n            }\n\n            {\n                return 0 + value * (3 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10000 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.1 + value * (300 - 0.1);\n            }\n        }\n    default:\n        index -= 6;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 6 + this.poly[0].getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            {\n                v = (v > 3 ? 3 : (v < 0 ? 0 : v));\n\n                {\n                    const oneStep = 3 / 3;\n                    const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                    const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                    v = numberOfSteps * oneStep;\n                }\n\n                return v;\n            }\n        }\n    case 1:\n        {\n            {\n                v = (v > 2 ? 2 : (v < 0 ? 0 : v));\n\n                {\n                    const oneStep = 2 / 2;\n                    const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                    const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                    v = numberOfSteps * oneStep;\n                }\n\n                return v;\n            }\n        }\n    case 2:\n        {\n            {\n                v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 3:\n        {\n            {\n                v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 4:\n        {\n            {\n                v = (v > 300 ? 300 : (v < 0.1 ? 0.1 : v));\n                return v;\n            }\n        }\n    case 5:\n        {\n            {\n                v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    default:\n        index -= 6;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "subpatches": {
        "poly": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 3:\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 2 ? 2 : value));\n            let normalizedValue = (value - 0) / (2 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 3);\n            }\n\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 3 ? 3 : value));\n            let normalizedValue = (value - 0) / (3 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 4);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 0) / (10000 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < 0.1 ? 0.1 : (value > 300 ? 300 : value));\n            let normalizedValue = (value - 0.1) / (300 - 0.1);\n            return normalizedValue;\n        }\n    default:\n        index -= 6;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 3:\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 3);\n            }\n\n            {\n                return 0 + value * (2 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 4);\n            }\n\n            {\n                return 0 + value * (3 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10000 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.1 + value * (300 - 0.1);\n            }\n        }\n    default:\n        index -= 6;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 6 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            {\n                v = (v > 3 ? 3 : (v < 0 ? 0 : v));\n\n                {\n                    const oneStep = 3 / 3;\n                    const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                    const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                    v = numberOfSteps * oneStep;\n                }\n\n                return v;\n            }\n        }\n    case 1:\n        {\n            {\n                v = (v > 2 ? 2 : (v < 0 ? 0 : v));\n\n                {\n                    const oneStep = 2 / 2;\n                    const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                    const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                    v = numberOfSteps * oneStep;\n                }\n\n                return v;\n            }\n        }\n    case 2:\n        {\n            {\n                v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 3:\n        {\n            {\n                v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 4:\n        {\n            {\n                v = (v > 300 ? 300 : (v < 0.1 ? 0.1 : v));\n                return v;\n            }\n        }\n    case 5:\n        {\n            {\n                v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    default:\n        index -= 6;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_01": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 5 ? 5 : value));\n            let normalizedValue = (value - 0) / (5 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 6);\n            }\n\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 6);\n            }\n\n            {\n                return 0 + value * (5 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            {\n                v = (v > 5 ? 5 : (v < 0 ? 0 : v));\n\n                {\n                    const oneStep = 5 / 5;\n                    const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                    const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                    v = numberOfSteps * oneStep;\n                }\n\n                return v;\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_02": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 0) / (10000 - 0);\n            return normalizedValue;\n        }\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 100000 ? 100000 : value));\n            let normalizedValue = (value - 0) / (100000 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (10000 - 0);\n            }\n        }\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100000 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            {\n                v = (v > 100000 ? 100000 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 1:\n        {\n            {\n                v = (v > 100000 ? 100000 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 2:\n        {\n            {\n                v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    case 3:\n        {\n            {\n                v = (v > 10000 ? 10000 : (v < 0 ? 0 : v));\n                return v;\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_03": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_04": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "rnboVersion": "0.16.0-dev.44",
    "meta": {
      "architecture": "x64",
      "maxversion": "8.3.2",
      "filename": "draft-midisynth.maxpat"
    },
    "options": {
      "classname": "rnbomatic",
      "minifyOutput": true
    }
  },
  "src": "class RNBOSubpatcher_10{constructor(){this.expr_01_in1=0,this.expr_01_in2=1,this.expr_01_out1=0,this.param_01_value=1,this.selector_01_onoff=1,this.cycle_tilde_01_frequency=0,this.cycle_tilde_01_phase_offset=0,this.saw_tilde_01_frequency=0,this.saw_tilde_01_syncPhase=0,this.tri_tilde_01_frequency=0,this.tri_tilde_01_pulsewidth=.5,this.tri_tilde_01_syncPhase=0,this.rect_tilde_01_frequency=440,this.rect_tilde_01_pulsewidth=.5,this.rect_tilde_01_syncPhase=0,this.selector_02_onoff=1,this.rect_tilde_02_frequency=0,this.rect_tilde_02_pulsewidth=.5,this.rect_tilde_02_syncPhase=0,this.ip_01_value=0,this.ip_01_impulse=0,this._currentTime=0,this.audioProcessSampleCount=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(12),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.sr=44100,this.invsr=2267573696e-14,this.param_01_lastValue=0,this.noise_tilde_01_last=0,this.noise_tilde_01_recip=0,this.cycle_tilde_01_buffer=0,this.cycle_tilde_01_wrap=0,this.cycle_tilde_01_phasei=0,this.cycle_tilde_01_f2i=0,this.cycle_tilde_01_ph_currentPhase=0,this.cycle_tilde_01_ph_conv=0,this.cycle_tilde_01_setupDone=!1,this.saw_tilde_01_t=0,this.saw_tilde_01_lastSyncPhase=0,this.saw_tilde_01_lastSyncDiff=0,this.saw_tilde_01_didSync=!1,this.saw_tilde_01_dcblocker_xm1=0,this.saw_tilde_01_dcblocker_ym1=0,this.saw_tilde_01_setupDone=!1,this.tri_tilde_01_t=0,this.tri_tilde_01_lastSyncPhase=0,this.tri_tilde_01_lastSyncDiff=0,this.tri_tilde_01_didSync=!1,this.tri_tilde_01_yn=0,this.tri_tilde_01_yn1=0,this.tri_tilde_01_yn2=0,this.tri_tilde_01_yn3=0,this.tri_tilde_01_flg=0,this.tri_tilde_01_app_correction=0,this.tri_tilde_01_dcblocker_xm1=0,this.tri_tilde_01_dcblocker_ym1=0,this.tri_tilde_01_setupDone=!1,this.rect_tilde_01_xHistory=0,this.rect_tilde_01_yHistory=0,this.rect_tilde_01_t=0,this.rect_tilde_01_lastSyncPhase=0,this.rect_tilde_01_lastSyncDiff=0,this.rect_tilde_01_didSync=!1,this.rect_tilde_02_xHistory=0,this.rect_tilde_02_yHistory=0,this.rect_tilde_02_t=0,this.rect_tilde_02_lastSyncPhase=0,this.rect_tilde_02_lastSyncDiff=0,this.rect_tilde_02_didSync=!1,this.ip_01_lastValue=0,this.ip_01_lastIndex=0,this.ip_01_resetCount=0,this.ip_01_sigbuf=0,this.ip_01_setupDone=!1,this.stackprotect_count=0,this._voiceIndex=0,this._noteNumber=0,this.isMuted=1,this.parameterOffset=0}voice(){return this._voiceIndex}random(e,t){let _=t-e;return rand01()*_+e}samplerate(){return this.sr}param_01_value_set(e){e=this.param_01_value_constrain(e),this.param_01_value=e,this.sendParameter(0),this.param_01_value!=this.param_01_lastValue&&(this.getEngine().presetTouched(),this.param_01_lastValue=this.param_01_value),this.expr_01_in1_set(e)}getParameterIndexForID(e){return stringCompare(e,\"mode\")?INVALID_INDEX:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,_,i){}getNumMidiOutputPorts(){return 0}process(e,t,_,i,s){this.vs=s,this.updateTime(this.getEngine().getCurrentTime());var a=i>=1&&_[0]?_[0]:this.dummyBuffer,r=i>=2&&_[1]?_[1]:this.dummyBuffer,l=t>=1&&e[0]?e[0]:this.zeroBuffer,o=t>=2&&e[1]?e[1]:this.zeroBuffer,n=t>=3&&e[2]?e[2]:this.zeroBuffer;this.noise_tilde_01_perform(this.signals[0],s),this.cycle_tilde_01_perform(l,this.cycle_tilde_01_phase_offset,this.signals[1],this.signals[2],s),this.ip_01_perform(this.signals[3],s),this.rect_tilde_01_perform(l,o,n,this.signals[4],this.signals[5],s),this.tri_tilde_01_perform(l,o,n,this.signals[6],this.signals[7],s),this.rect_tilde_02_perform(l,o,n,this.signals[8],this.signals[9],s),this.saw_tilde_01_perform(l,n,this.signals[10],this.signals[11],s),this.selector_01_perform(this.selector_01_onoff,this.signals[0],this.signals[1],this.signals[10],this.signals[6],this.signals[4],this.signals[8],a,s),this.selector_02_perform(this.selector_02_onoff,this.signals[3],this.signals[2],this.signals[11],this.signals[7],this.signals[5],this.signals[9],r,s),this.stackprotect_perform(s),this.audioProcessSampleCount+=this.vs}prepareToProcess(e,t,_){if(this.maxvs<t||!this.didAllocateSignals){var i;for(i=0;i<12;i++)this.signals[i]=resizeSignal(this.signals[i],this.maxvs,t);this.ip_01_sigbuf=resizeSignal(this.ip_01_sigbuf,this.maxvs,t),this.zeroBuffer=resizeSignal(this.zeroBuffer,this.maxvs,t),this.dummyBuffer=resizeSignal(this.dummyBuffer,this.maxvs,t),this.didAllocateSignals=!0}var s=e!=this.sr,a=t!=this.maxvs,r=s||a||_;(s||a)&&(this.vs=t,this.maxvs=t,this.sr=e,this.invsr=1/e),this.cycle_tilde_01_dspsetup(r),this.ip_01_dspsetup(r),this.tri_tilde_01_dspsetup(r),this.saw_tilde_01_dspsetup(r),s&&this.onSampleRateChanged(e)}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 3}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}initializeObjects(){this.noise_tilde_01_init()}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}getState(){}setState(){}getPreset(e){this.param_01_getPresetValue(getSubState(e,\"mode\"))}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,_){}setParameterValue(e,t,_){switch(this.updateTime(_),e){case 0:this.param_01_value_set(t)}}processParameterEvent(e,t,_){this.setParameterValue(e,t,_)}processNormalizedParameterEvent(e,t,_){this.setParameterValueNormalized(e,t,_)}getParameterValue(e){switch(e){case 0:return this.param_01_value;default:return 0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 1}getParameterName(e){switch(e){case 0:return\"mode\";default:return\"bogus\"}}getParameterId(e){switch(e){case 0:return\"poly/oscillator/mode\";default:return\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=1,t.min=0,t.max=5,t.exponent=1,t.steps=6;t.enumValues=[\"noise\",\"sine\",\"saw\",\"triangle\",\"square\",\"pulse\"],t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let _=1/(t-1);e=1*rnbo_fround(e/_*1/1)*_}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:{let e=((t=t<0?0:t>5?5:t)-0)/5;return e=this.applyStepsToNormalizedParameterValue(e,6),e}default:return t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:return t=t<0?0:t>1?1:t,0+5*(t=this.applyStepsToNormalizedParameterValue(t,6));default:return t}}constrainParameterValue(e,t){switch(e){case 0:return this.param_01_value_constrain(t);default:return t}}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,_,i){}processOutletAtCurrentTime(e,t,_){}processOutletEvent(e,t,_,i){this.updateTime(i),this.processOutletAtCurrentTime(e,t,_)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,_,i){}processListMessage(e,t,_,i){}processBangMessage(e,t,_){}resolveTag(e){return null}startup(){this.updateTime(this.getEngine().getCurrentTime()),this.scheduleParamInit(0,0)}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.updateTime(t),0==e&&(this.cycle_tilde_01_buffer=new Float64Buffer(this.getPatcher().getPatcher().RNBODefaultSinus),this.cycle_tilde_01_bufferUpdated())}allocateDataRefs(){this.cycle_tilde_01_buffer.requestSize(16384,1),this.cycle_tilde_01_buffer.setSampleRate(this.sr),this.cycle_tilde_01_buffer=this.cycle_tilde_01_buffer.allocateIfNeeded()}initialize(){this.assign_defaults(),this.setState(),this.cycle_tilde_01_buffer=new Float64Buffer(this.getPatcher().getPatcher().RNBODefaultSinus)}param_01_value_constrain(e){e=e>5?5:e<0?0:e;{const t=1;e=1*rnbo_fround(e*(0!=t?1/t:0)*1/1)*t}return e}selector_02_onoff_set(e){this.selector_02_onoff=e}selector_01_onoff_set(e){this.selector_01_onoff=e}expr_01_out1_set(e){this.expr_01_out1=e,this.selector_02_onoff_set(this.expr_01_out1),this.selector_01_onoff_set(this.expr_01_out1)}expr_01_in1_set(e){this.expr_01_in1=e,this.expr_01_out1_set(this.expr_01_in1+this.expr_01_in2)}noise_tilde_01_perform(e,t){var _,i=this.noise_tilde_01_recip,s=this.noise_tilde_01_last;for(_=0;_<t;_++){var a=8388607&(s=rnbo_imul(1664525,s)+1013904223|0);e[_]=a*i-1}this.noise_tilde_01_last=s}cycle_tilde_01_perform(e,t,_,i,s){RNBO_UNUSED(t);var a,r=this.cycle_tilde_01_f2i,l=this.cycle_tilde_01_phasei;for(a=0;a<s;a++){let t;t=l;let s=uint32_rshift(t,18),o=381471181759574e-20*(262143&t),n=this.cycle_tilde_01_buffer[s],h=n+o*(this.cycle_tilde_01_buffer[s+1&16383]-n);{let t=uint32_trunc(e[a]*r);l=uint32_add(l,t)}_[a]=h,i[a]=2.3283064365386963e-10*t;continue}this.cycle_tilde_01_phasei=l}ip_01_perform(e,t){for(var _=this.ip_01_sigbuf,i=this.ip_01_lastValue,s=this.ip_01_lastIndex,a=0;a<t;a++)e[a]=a>=s?i:_[a];s=0,this.ip_01_lastIndex=s}rect_tilde_01_perform(e,t,_,i,s,a){var r,l=this.rect_tilde_01_xHistory,o=this.rect_tilde_01_yHistory,n=this.rect_tilde_01_didSync,h=this.rect_tilde_01_t,f=this.rect_tilde_01_lastSyncDiff,c=this.rect_tilde_01_lastSyncPhase;for(r=0;r<a;r++){let a=e[r]/this.samplerate(),p=t[r];t[r]>.99?p=.99:t[r]<.01&&(p=.01);let d=_[r]-c;c=_[r],f=d;let u=_[r]+d,m=h,g=m-a,y=m+a;if(g<0)for(;g<0;)g+=1;if(y>1)for(;y>=1;)y-=1;let b=this.rect_tilde_01_rectangle(y,p),v=this.rect_tilde_01_rectangle(m,p),S=this.rect_tilde_01_rectangle(g,p);if(S<v){let e=m/a;v+=e-.5*e*e-.5}else if(v<b){let e=(1-m)/a;v+=.5*e*e+e+.5}else if(S>v){let e=(m-p)/a;v-=e-.5*e*e-.5}else if(v>b){let e=(p-m)/a;v-=.5*e*e+e+.5}else n?(v=.25,n=!1):u>1&&(v<0&&(v=-.125),h=0,n=!0);if(h+=a,a>0)for(;h>=1;)h-=1;else for(;h<=0;)h+=1;let N=v-o+.9997*l;l=N,o=v,i[r]=.5*N,s[r]=h}this.rect_tilde_01_lastSyncPhase=c,this.rect_tilde_01_lastSyncDiff=f,this.rect_tilde_01_t=h,this.rect_tilde_01_didSync=n,this.rect_tilde_01_yHistory=o,this.rect_tilde_01_xHistory=l}tri_tilde_01_perform(e,t,_,i,s,a){var r,l=this.tri_tilde_01_yn3,o=this.tri_tilde_01_yn2,n=this.tri_tilde_01_yn1,h=this.tri_tilde_01_app_correction,f=this.tri_tilde_01_flg,c=this.tri_tilde_01_yn,p=this.tri_tilde_01_t,d=this.tri_tilde_01_lastSyncDiff,u=this.tri_tilde_01_lastSyncPhase;for(r=0;r<a;r++){let a=e[r]/this.samplerate(),m=t[r];t[r]>.99?m=.99:t[r]<.01&&(m=.01);let g=_[r]-u;u=_[r],d=g,_[r]+g>1&&(p=0);let y=p,b=e[r]/(m*this.samplerate()),v=e[r]/((1-m)*this.samplerate());if(y<=m){if(c=2/m*y-1,-1==f)h=1,f=1;else if(1==h){h=0;let e=(y-a)/a,t=e*e,_=t*e,i=t*t,s=e*i;c+=b*(-s/120+i/24-_/12+t/12-e/24+1/120),n+=b*(s/40-i/12+t/3-e/2+7/30),o+=b*(-s/40+i/24+_/12+t/12+e/24+1/120),l+=b*(s/120)}f=1}else{if(c=1-2*(y-m)/(1-m),1==f)h=1;else if(1==h){h=0;let e=(y-m-a)/a,t=e*e,_=t*e,i=t*t,s=i*e;c-=v*(-s/120+i/24-_/12+t/12-e/24+1/120),n-=v*(s/40-i/12+t/3-e/2+7/30),o-=v*(-s/40+i/24+_/12+t/12+e/24+1/120),l-=v*(s/120)}f=-1}let S=l;if(l=o,o=n,n=c,p+=a,a>0)for(;p>=1;)p-=1;else for(;p<=0;)p+=1;S=this.tri_tilde_01_dcblocker_next(S,.9997),i[r]=.5*S,s[r]=p}this.tri_tilde_01_lastSyncPhase=u,this.tri_tilde_01_lastSyncDiff=d,this.tri_tilde_01_t=p,this.tri_tilde_01_yn=c,this.tri_tilde_01_flg=f,this.tri_tilde_01_app_correction=h,this.tri_tilde_01_yn1=n,this.tri_tilde_01_yn2=o,this.tri_tilde_01_yn3=l}rect_tilde_02_perform(e,t,_,i,s,a){var r,l=this.rect_tilde_02_xHistory,o=this.rect_tilde_02_yHistory,n=this.rect_tilde_02_didSync,h=this.rect_tilde_02_t,f=this.rect_tilde_02_lastSyncDiff,c=this.rect_tilde_02_lastSyncPhase;for(r=0;r<a;r++){let a=e[r]/this.samplerate(),p=t[r];t[r]>.99?p=.99:t[r]<.01&&(p=.01);let d=_[r]-c;c=_[r],f=d;let u=_[r]+d,m=h,g=m-a,y=m+a;if(g<0)for(;g<0;)g+=1;if(y>1)for(;y>=1;)y-=1;let b=this.rect_tilde_02_rectangle(y,p),v=this.rect_tilde_02_rectangle(m,p),S=this.rect_tilde_02_rectangle(g,p);if(S<v){let e=m/a;v+=e-.5*e*e-.5}else if(v<b){let e=(1-m)/a;v+=.5*e*e+e+.5}else if(S>v){let e=(m-p)/a;v-=e-.5*e*e-.5}else if(v>b){let e=(p-m)/a;v-=.5*e*e+e+.5}else n?(v=.25,n=!1):u>1&&(v<0&&(v=-.125),h=0,n=!0);if(h+=a,a>0)for(;h>=1;)h-=1;else for(;h<=0;)h+=1;let N=v-o+.9997*l;l=N,o=v,i[r]=.5*N,s[r]=h}this.rect_tilde_02_lastSyncPhase=c,this.rect_tilde_02_lastSyncDiff=f,this.rect_tilde_02_t=h,this.rect_tilde_02_didSync=n,this.rect_tilde_02_yHistory=o,this.rect_tilde_02_xHistory=l}saw_tilde_01_perform(e,t,_,i,s){var a,r=this.saw_tilde_01_didSync,l=this.saw_tilde_01_lastSyncDiff,o=this.saw_tilde_01_lastSyncPhase,n=this.saw_tilde_01_t;for(a=0;a<s;a++){let s=e[a]/this.samplerate(),h=n+.5;h-=rnbo_trunc(h);let f=2*h-1,c=t[a]-o;o=t[a],l=c;let p=t[a]+c;if(h<s){let e=h/s;f-=e+e-e*e-1}else if(h+s>1){let e=(h-1)/s;f-=e+e+e*e+1}else r?(f=0,r=!1):p>1&&(f*=.5,n=0,r=!0);if(n+=s,s>0)for(;n>=1;)n-=1;else for(;n<=0;)n+=1;f=this.saw_tilde_01_dcblocker_next(f,.9997),_[a]=.5*f,i[a]=n}this.saw_tilde_01_t=n,this.saw_tilde_01_lastSyncPhase=o,this.saw_tilde_01_lastSyncDiff=l,this.saw_tilde_01_didSync=r}selector_01_perform(e,t,_,i,s,a,r,l,o){var n;for(n=0;n<o;n++)l[n]=e>=1&&e<2?t[n]:e>=2&&e<3?_[n]:e>=3&&e<4?i[n]:e>=4&&e<5?s[n]:e>=5&&e<6?a[n]:e>=6&&e<7?r[n]:0}selector_02_perform(e,t,_,i,s,a,r,l,o){var n;for(n=0;n<o;n++)l[n]=e>=1&&e<2?t[n]:e>=2&&e<3?_[n]:e>=3&&e<4?i[n]:e>=4&&e<5?s[n]:e>=5&&e<6?a[n]:e>=6&&e<7?r[n]:0}stackprotect_perform(e){RNBO_UNUSED(e);this.stackprotect_count;this.stackprotect_count=0}param_01_getPresetValue(e){e.value=this.param_01_value}param_01_setPresetValue(e){stateIsEmpty(e)||this.param_01_value_set(e.value)}noise_tilde_01_init(){this.noise_tilde_01_last=systemticks()+this.voice()+this.random(0,1e4),this.noise_tilde_01_recip=2/8388607}cycle_tilde_01_ph_next(e,t){t>=0&&(this.cycle_tilde_01_ph_currentPhase=t);const _=e*this.cycle_tilde_01_ph_conv;this.cycle_tilde_01_ph_currentPhase<0&&(this.cycle_tilde_01_ph_currentPhase=1+this.cycle_tilde_01_ph_currentPhase),this.cycle_tilde_01_ph_currentPhase>1&&(this.cycle_tilde_01_ph_currentPhase=this.cycle_tilde_01_ph_currentPhase-1);var i=this.cycle_tilde_01_ph_currentPhase;return this.cycle_tilde_01_ph_currentPhase+=_,i}cycle_tilde_01_ph_reset(){this.cycle_tilde_01_ph_currentPhase=0}cycle_tilde_01_ph_dspsetup(){this.cycle_tilde_01_ph_conv=1/this.sr}cycle_tilde_01_dspsetup(e){this.cycle_tilde_01_setupDone&&!e||(this.cycle_tilde_01_phasei=0,this.cycle_tilde_01_f2i=4294967296/this.samplerate(),this.cycle_tilde_01_wrap=this.cycle_tilde_01_buffer.getSize()-1,this.cycle_tilde_01_setupDone=!0,this.cycle_tilde_01_ph_dspsetup())}cycle_tilde_01_bufferUpdated(){this.cycle_tilde_01_wrap=this.cycle_tilde_01_buffer.getSize()-1}saw_tilde_01_dcblocker_next(e,t){var _=e-this.saw_tilde_01_dcblocker_xm1+this.saw_tilde_01_dcblocker_ym1*t;return this.saw_tilde_01_dcblocker_xm1=e,this.saw_tilde_01_dcblocker_ym1=_,_}saw_tilde_01_dcblocker_reset(){this.saw_tilde_01_dcblocker_xm1=0,this.saw_tilde_01_dcblocker_ym1=0}saw_tilde_01_dcblocker_dspsetup(){this.saw_tilde_01_dcblocker_reset()}saw_tilde_01_dspsetup(e){this.saw_tilde_01_setupDone&&!e||(this.saw_tilde_01_setupDone=!0,this.saw_tilde_01_dcblocker_dspsetup())}tri_tilde_01_dcblocker_next(e,t){var _=e-this.tri_tilde_01_dcblocker_xm1+this.tri_tilde_01_dcblocker_ym1*t;return this.tri_tilde_01_dcblocker_xm1=e,this.tri_tilde_01_dcblocker_ym1=_,_}tri_tilde_01_dcblocker_reset(){this.tri_tilde_01_dcblocker_xm1=0,this.tri_tilde_01_dcblocker_ym1=0}tri_tilde_01_dcblocker_dspsetup(){this.tri_tilde_01_dcblocker_reset()}tri_tilde_01_dspsetup(e){this.tri_tilde_01_setupDone&&!e||(this.tri_tilde_01_setupDone=!0,this.tri_tilde_01_dcblocker_dspsetup())}rect_tilde_01_rectangle(e,t){return e<t?1:-1}rect_tilde_02_rectangle(e,t){return e<t?1:-1}ip_01_dspsetup(e){this.ip_01_setupDone&&!e||(this.ip_01_lastIndex=0,this.ip_01_setupDone=!0)}stackprotect_check(){return this.stackprotect_count++,this.stackprotect_count>128&&(console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\"),!0)}updateTime(e){this._currentTime=e,this.sampleOffsetIntoNextAudioBuffer=rnbo_floor(this.msToSamps(e-this.getEngine().getCurrentTime(),this.sr)),this.sampleOffsetIntoNextAudioBuffer>=this.vs&&(this.sampleOffsetIntoNextAudioBuffer=this.vs-1),this.sampleOffsetIntoNextAudioBuffer<0&&(this.sampleOffsetIntoNextAudioBuffer=0)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_11{constructor(){this.dspexpr_01_in1=0,this.dspexpr_01_in2=0,this.adsr_01_trigger=0,this.adsr_01_attack=0,this.adsr_01_decay=0,this.adsr_01_sustain=0,this.adsr_01_release=0,this.param_02_value=10,this.param_03_value=100,this.param_04_value=.8,this.param_05_value=500,this._currentTime=0,this.audioProcessSampleCount=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(1),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.sr=44100,this.invsr=2267573696e-14,this.adsr_01_phase=3,this.adsr_01_mspersamp=0,this.adsr_01_time=0,this.adsr_01_lasttrigger=0,this.adsr_01_amplitude=0,this.adsr_01_triggerval=0,this.adsr_01_outval=0,this.adsr_01_startingpoint=0,this.adsr_01_setupDone=!1,this.param_02_lastValue=0,this.param_03_lastValue=0,this.param_04_lastValue=0,this.param_05_lastValue=0,this.stackprotect_count=0,this._voiceIndex=0,this._noteNumber=0,this.isMuted=1,this.parameterOffset=0}param_02_value_set(e){e=this.param_02_value_constrain(e),this.param_02_value=e,this.sendParameter(0),this.param_02_value!=this.param_02_lastValue&&(this.getEngine().presetTouched(),this.param_02_lastValue=this.param_02_value),this.adsr_01_attack_set(e)}param_03_value_set(e){e=this.param_03_value_constrain(e),this.param_03_value=e,this.sendParameter(1),this.param_03_value!=this.param_03_lastValue&&(this.getEngine().presetTouched(),this.param_03_lastValue=this.param_03_value),this.adsr_01_decay_set(e)}param_04_value_set(e){e=this.param_04_value_constrain(e),this.param_04_value=e,this.sendParameter(2),this.param_04_value!=this.param_04_lastValue&&(this.getEngine().presetTouched(),this.param_04_lastValue=this.param_04_value),this.adsr_01_sustain_set(e)}param_05_value_set(e){e=this.param_05_value_constrain(e),this.param_05_value=e,this.sendParameter(3),this.param_05_value!=this.param_05_lastValue&&(this.getEngine().presetTouched(),this.param_05_lastValue=this.param_05_value),this.adsr_01_release_set(e)}getParameterIndexForID(e){return stringCompare(e,\"attack\")?stringCompare(e,\"decay\")?stringCompare(e,\"sustain\")?stringCompare(e,\"release\")?INVALID_INDEX:3:2:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,_,i){}getNumMidiOutputPorts(){return 0}adsr_01_mute_bang(){this.eventoutlet_01_in1_bang_bang()}process(e,t,_,i,s){this.vs=s,this.updateTime(this.getEngine().getCurrentTime());var a=i>=1&&_[0]?_[0]:this.dummyBuffer,r=i>=2&&_[1]?_[1]:this.dummyBuffer,l=t>=1&&e[0]?e[0]:this.zeroBuffer,o=t>=2&&e[1]?e[1]:this.zeroBuffer;this.adsr_01_perform(o,this.adsr_01_attack,this.adsr_01_decay,this.adsr_01_sustain,this.adsr_01_release,this.signals[0],s),this.dspexpr_01_perform(l,this.signals[0],a,s),this.signalforwarder_01_perform(this.signals[0],r,s),this.stackprotect_perform(s),this.audioProcessSampleCount+=this.vs}prepareToProcess(e,t,_){if(this.maxvs<t||!this.didAllocateSignals){var i;for(i=0;i<1;i++)this.signals[i]=resizeSignal(this.signals[i],this.maxvs,t);this.zeroBuffer=resizeSignal(this.zeroBuffer,this.maxvs,t),this.dummyBuffer=resizeSignal(this.dummyBuffer,this.maxvs,t),this.didAllocateSignals=!0}var s=e!=this.sr,a=t!=this.maxvs,r=s||a||_;(s||a)&&(this.vs=t,this.maxvs=t,this.sr=e,this.invsr=1/e),this.adsr_01_dspsetup(r),s&&this.onSampleRateChanged(e)}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}initializeObjects(){}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}getState(){}setState(){}getPreset(e){this.param_02_getPresetValue(getSubState(e,\"attack\")),this.param_03_getPresetValue(getSubState(e,\"decay\")),this.param_04_getPresetValue(getSubState(e,\"sustain\")),this.param_05_getPresetValue(getSubState(e,\"release\"))}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,_){}setParameterValue(e,t,_){switch(this.updateTime(_),e){case 0:this.param_02_value_set(t);break;case 1:this.param_03_value_set(t);break;case 2:this.param_04_value_set(t);break;case 3:this.param_05_value_set(t)}}processParameterEvent(e,t,_){this.setParameterValue(e,t,_)}processNormalizedParameterEvent(e,t,_){this.setParameterValueNormalized(e,t,_)}getParameterValue(e){switch(e){case 0:return this.param_02_value;case 1:return this.param_03_value;case 2:return this.param_04_value;case 3:return this.param_05_value;default:return 0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 4}getParameterName(e){switch(e){case 0:return\"attack\";case 1:return\"decay\";case 2:return\"sustain\";case 3:return\"release\";default:return\"bogus\"}}getParameterId(e){switch(e){case 0:return\"poly/envelope/attack\";case 1:return\"poly/envelope/decay\";case 2:return\"poly/envelope/sustain\";case 3:return\"poly/envelope/release\";default:return\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=10,t.min=0,t.max=1e5,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=100,t.min=0,t.max=1e5,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 2:t.type=ParameterTypeNumber,t.initialValue=.8,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 3:t.type=ParameterTypeNumber,t.initialValue=500,t.min=0,t.max=1e4,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let _=1/(t-1);e=1*rnbo_fround(e/_*1/1)*_}return e}convertToNormalizedParameterValue(e,t){switch(e){case 2:return((t=t<0?0:t>1?1:t)-0)/1;case 3:return((t=t<0?0:t>1e4?1e4:t)-0)/1e4;case 0:case 1:return((t=t<0?0:t>1e5?1e5:t)-0)/1e5;default:return t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 2:return 0+1*(t=t<0?0:t>1?1:t);case 3:return 0+1e4*(t=t<0?0:t>1?1:t);case 0:case 1:return 0+1e5*(t=t<0?0:t>1?1:t);default:return t}}constrainParameterValue(e,t){switch(e){case 0:return this.param_02_value_constrain(t);case 1:return this.param_03_value_constrain(t);case 2:return this.param_04_value_constrain(t);case 3:return this.param_05_value_constrain(t);default:return t}}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,_,i){switch(RNBO_UNUSED(i),RNBO_UNUSED(_),this.updateTime(e),t){case-1468824490:this.adsr_01_mute_bang()}}processOutletAtCurrentTime(e,t,_){}processOutletEvent(e,t,_,i){this.updateTime(i),this.processOutletAtCurrentTime(e,t,_)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,_,i){}processListMessage(e,t,_,i){}processBangMessage(e,t,_){}resolveTag(e){return null}startup(){this.updateTime(this.getEngine().getCurrentTime()),this.scheduleParamInit(0,0),this.scheduleParamInit(1,0),this.scheduleParamInit(2,0),this.scheduleParamInit(3,0)}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}allocateDataRefs(){}initialize(){this.assign_defaults(),this.setState()}param_02_value_constrain(e){return e=e>1e5?1e5:e<0?0:e}adsr_01_attack_set(e){this.adsr_01_attack=e}param_03_value_constrain(e){return e=e>1e5?1e5:e<0?0:e}adsr_01_decay_set(e){this.adsr_01_decay=e}param_04_value_constrain(e){return e=e>1?1:e<0?0:e}adsr_01_sustain_set(e){this.adsr_01_sustain=e}param_05_value_constrain(e){return e=e>1e4?1e4:e<0?0:e}adsr_01_release_set(e){this.adsr_01_release=e}eventoutlet_01_in1_bang_bang(){this.getPatcher().p_02_out3_bang_bang()}adsr_01_perform(e,t,_,i,s,a,r){for(var l=this.adsr_01_time,o=this.adsr_01_amplitude,n=this.adsr_01_outval,h=this.adsr_01_startingpoint,f=this.adsr_01_phase,c=this.adsr_01_triggerval,p=this.adsr_01_lasttrigger,d=this.adsr_01_mspersamp,u=!1,m=0;m<r;m++){let r=t>d?t:d,g=_>d?_:d,y=s>d?s:d;p=c,c=e[m],0==p&&0!=c?(h=0!=f?n:0,o=c,f=1,l=0,u=!1):0!=p&&0==c&&4!=f&&0!=f&&(f=4,o=n,l=0),l+=d,0==f?n=0:1==f?l>r?(l-=r,f=2,n=o):n=(o-h)*l/r+h:2==f?l>g?(l-=g,f=3,n=o*i):n=o*i+(o-o*i)*(1-l/g):3==f?n=o*i:4==f&&(l>y?(l=0,f=0,n=0,o=0,u=!0):n=o*(1-l/y)),a[m]=n}u&&this.getEngine().scheduleClockEventWithValue(this,-1468824490,this.sampsToMs(this.vs)+this._currentTime,0),this.adsr_01_lasttrigger=p,this.adsr_01_triggerval=c,this.adsr_01_phase=f,this.adsr_01_startingpoint=h,this.adsr_01_outval=n,this.adsr_01_amplitude=o,this.adsr_01_time=l}dspexpr_01_perform(e,t,_,i){var s;for(s=0;s<i;s++)_[s]=e[s]*t[s]}signalforwarder_01_perform(e,t,_){for(var i=0;i<_;i++)t[i]=e[i]}stackprotect_perform(e){RNBO_UNUSED(e);this.stackprotect_count;this.stackprotect_count=0}adsr_01_dspsetup(e){this.adsr_01_setupDone&&!e||(this.adsr_01_mspersamp=1e3/this.sr,this.adsr_01_setupDone=!0)}param_02_getPresetValue(e){e.value=this.param_02_value}param_02_setPresetValue(e){stateIsEmpty(e)||this.param_02_value_set(e.value)}param_03_getPresetValue(e){e.value=this.param_03_value}param_03_setPresetValue(e){stateIsEmpty(e)||this.param_03_value_set(e.value)}param_04_getPresetValue(e){e.value=this.param_04_value}param_04_setPresetValue(e){stateIsEmpty(e)||this.param_04_value_set(e.value)}param_05_getPresetValue(e){e.value=this.param_05_value}param_05_setPresetValue(e){stateIsEmpty(e)||this.param_05_value_set(e.value)}stackprotect_check(){return this.stackprotect_count++,this.stackprotect_count>128&&(console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\"),!0)}updateTime(e){this._currentTime=e,this.sampleOffsetIntoNextAudioBuffer=rnbo_floor(this.msToSamps(e-this.getEngine().getCurrentTime(),this.sr)),this.sampleOffsetIntoNextAudioBuffer>=this.vs&&(this.sampleOffsetIntoNextAudioBuffer=this.vs-1),this.sampleOffsetIntoNextAudioBuffer<0&&(this.sampleOffsetIntoNextAudioBuffer=0)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_12{constructor(){this.biquad_tilde_01_x=0,this.biquad_tilde_01_a0=0,this.biquad_tilde_01_a1=0,this.biquad_tilde_01_a2=0,this.biquad_tilde_01_b1=0,this.biquad_tilde_01_b2=0,this.filtercoeff_01_frequency=1e3,this.filtercoeff_01_gain=1,this.filtercoeff_01_q=1,this.filtercoeff_01_type=0,this._currentTime=0,this.audioProcessSampleCount=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(5),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.sr=44100,this.invsr=2267573696e-14,this.biquad_tilde_01_x1=0,this.biquad_tilde_01_x2=0,this.biquad_tilde_01_y1=0,this.biquad_tilde_01_y2=0,this.filtercoeff_01_resamp_counter=0,this.filtercoeff_01_activeResamp=0,this.filtercoeff_01_K_EPSILON=1e-9,this.filtercoeff_01_la0=0,this.filtercoeff_01_la1=0,this.filtercoeff_01_la2=0,this.filtercoeff_01_lb1=0,this.filtercoeff_01_lb2=0,this.filtercoeff_01_localop_internal=!0,this.filtercoeff_01_localop_twopi_over_sr=0,this.filtercoeff_01_localop_cs=0,this.filtercoeff_01_localop_sn=0,this.filtercoeff_01_localop_one_over_gain=0,this.filtercoeff_01_localop_one_over_q=0,this.filtercoeff_01_localop_alpha=0,this.filtercoeff_01_localop_beta=0,this.filtercoeff_01_localop_b0=0,this.filtercoeff_01_localop_b0g=0,this.filtercoeff_01_localop_A=0,this.filtercoeff_01_localop_one_over_a=0,this.filtercoeff_01_localop_la0=0,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=0,this.filtercoeff_01_localop_lb1=0,this.filtercoeff_01_localop_lb2=0,this.filtercoeff_01_setupDone=!1,this.stackprotect_count=0,this._voiceIndex=0,this._noteNumber=0,this.isMuted=1,this.parameterOffset=0}vectorsize(){return this.vs}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,_,i){}getNumMidiOutputPorts(){return 0}process(e,t,_,i,s){this.vs=s,this.updateTime(this.getEngine().getCurrentTime());var a=i>=1&&_[0]?_[0]:this.dummyBuffer,r=t>=1&&e[0]?e[0]:this.zeroBuffer,l=t>=2&&e[1]?e[1]:this.zeroBuffer,o=t>=3&&e[2]?e[2]:this.zeroBuffer;this.filtercoeff_01_perform(l,this.filtercoeff_01_gain,o,this.signals[0],this.signals[1],this.signals[2],this.signals[3],this.signals[4],s),this.biquad_tilde_01_perform(r,this.signals[0],this.signals[1],this.signals[2],this.signals[3],this.signals[4],a,s),this.stackprotect_perform(s),this.audioProcessSampleCount+=this.vs}prepareToProcess(e,t,_){if(this.maxvs<t||!this.didAllocateSignals){var i;for(i=0;i<5;i++)this.signals[i]=resizeSignal(this.signals[i],this.maxvs,t);this.zeroBuffer=resizeSignal(this.zeroBuffer,this.maxvs,t),this.dummyBuffer=resizeSignal(this.dummyBuffer,this.maxvs,t),this.didAllocateSignals=!0}var s=e!=this.sr,a=t!=this.maxvs,r=s||a||_;(s||a)&&(this.vs=t,this.maxvs=t,this.sr=e,this.invsr=1/e),this.filtercoeff_01_dspsetup(r),s&&this.onSampleRateChanged(e)}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 3}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}initializeObjects(){}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}getState(){}setState(){}getPreset(e){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,_){}setParameterValue(e,t,_){}processParameterEvent(e,t,_){this.setParameterValue(e,t,_)}processNormalizedParameterEvent(e,t,_){this.setParameterValueNormalized(e,t,_)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let _=1/(t-1);e=1*rnbo_fround(e/_*1/1)*_}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,_,i){}processOutletAtCurrentTime(e,t,_){}processOutletEvent(e,t,_,i){this.updateTime(i),this.processOutletAtCurrentTime(e,t,_)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,_,i){}processListMessage(e,t,_,i){}processBangMessage(e,t,_){}resolveTag(e){return null}startup(){}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}allocateDataRefs(){}initialize(){this.assign_defaults(),this.setState()}filtercoeff_01_perform(e,t,_,i,s,a,r,l,o){RNBO_UNUSED(t);for(var n=this.filtercoeff_01_activeResamp,h=this.filtercoeff_01_resamp_counter,f=this.filtercoeff_01_K_EPSILON,c=0;c<o;c++){let t=_[c],o=1,p=e[c];t<f&&(t=f),p=p>.5*this.sr?.5*this.sr:p<1?1:p,--h<=0&&(h=n,this.filtercoeff_01_updateTerms(p,o,t)),i[c]=this.filtercoeff_01_la0,s[c]=this.filtercoeff_01_la1,a[c]=this.filtercoeff_01_la2,r[c]=this.filtercoeff_01_lb1,l[c]=this.filtercoeff_01_lb2}this.filtercoeff_01_resamp_counter=h}biquad_tilde_01_perform(e,t,_,i,s,a,r,l){var o,n=this.biquad_tilde_01_y2,h=this.biquad_tilde_01_y1,f=this.biquad_tilde_01_x2,c=this.biquad_tilde_01_x1;for(o=0;o<l;o++){var p=e[o]*t[o]+c*_[o]+f*i[o]-(h*s[o]+n*a[o]);f=c,c=e[o],n=h,h=p,r[o]=p}this.biquad_tilde_01_x1=c,this.biquad_tilde_01_x2=f,this.biquad_tilde_01_y1=h,this.biquad_tilde_01_y2=n}stackprotect_perform(e){RNBO_UNUSED(e);this.stackprotect_count;this.stackprotect_count=0}filtercoeff_01_localop_next(e,t,_,i){let s=e*this.filtercoeff_01_localop_twopi_over_sr;switch(this.filtercoeff_01_localop_cs=rnbo_cos(s),this.filtercoeff_01_localop_sn=rnbo_sin(s),this.filtercoeff_01_localop_one_over_gain=_>=0?1/_:0,this.filtercoeff_01_localop_one_over_q=1/t,this.filtercoeff_01_localop_alpha=.5*this.filtercoeff_01_localop_sn*this.filtercoeff_01_localop_one_over_q,i){case 5:this.filtercoeff_01_localop_A=rnbo_sqrt(_),this.filtercoeff_01_localop_beta=rnbo_sqrt((this.filtercoeff_01_localop_A*this.filtercoeff_01_localop_A+1)*this.filtercoeff_01_localop_one_over_q-(this.filtercoeff_01_localop_A-1)*(this.filtercoeff_01_localop_A-1)),this.filtercoeff_01_localop_b0=1/(this.filtercoeff_01_localop_A+1+(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs+this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn);break;case 6:this.filtercoeff_01_localop_A=rnbo_sqrt(_),this.filtercoeff_01_localop_beta=rnbo_sqrt((this.filtercoeff_01_localop_A*this.filtercoeff_01_localop_A+1)*this.filtercoeff_01_localop_one_over_q-(this.filtercoeff_01_localop_A-1)*(this.filtercoeff_01_localop_A-1)),this.filtercoeff_01_localop_b0=1/(this.filtercoeff_01_localop_A+1-(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs+this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn);break;case 4:this.filtercoeff_01_localop_A=rnbo_sqrt(_),this.filtercoeff_01_localop_one_over_a=0==this.filtercoeff_01_localop_A?0:1/this.filtercoeff_01_localop_A,this.filtercoeff_01_localop_b0=1/(1+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_a);break;case 9:case 10:case 11:case 13:case 14:this.filtercoeff_01_localop_b0=1/(1+this.filtercoeff_01_localop_alpha),this.filtercoeff_01_localop_b0g=1/(this.filtercoeff_01_localop_one_over_gain+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_gain);break;default:this.filtercoeff_01_localop_b0=1/(1+this.filtercoeff_01_localop_alpha)}switch(i){case 0:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_la2=.5*(1-this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=(1-this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 1:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_la2=.5*(1+this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=-(1+this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 2:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=-this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 7:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_alpha*t*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=-this.filtercoeff_01_localop_alpha*t*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 3:this.filtercoeff_01_localop_la1=this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_la2=this.filtercoeff_01_localop_b0;break;case 8:this.filtercoeff_01_localop_la1=this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=this.filtercoeff_01_localop_la0=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la2=1;break;case 4:this.filtercoeff_01_localop_la0=(1+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_A)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la2=(1-this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_A)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_a)*this.filtercoeff_01_localop_b0;break;case 5:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_A*(this.filtercoeff_01_localop_A+1-(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs+this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=2*this.filtercoeff_01_localop_A*(this.filtercoeff_01_localop_A-1-(this.filtercoeff_01_localop_A+1)*this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la2=this.filtercoeff_01_localop_A*(this.filtercoeff_01_localop_A+1-(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs-this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*(this.filtercoeff_01_localop_A-1+(this.filtercoeff_01_localop_A+1)*this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(this.filtercoeff_01_localop_A+1+(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs-this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn)*this.filtercoeff_01_localop_b0;break;case 6:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_A*(this.filtercoeff_01_localop_A+1+(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs+this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=-2*this.filtercoeff_01_localop_A*(this.filtercoeff_01_localop_A-1+(this.filtercoeff_01_localop_A+1)*this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la2=this.filtercoeff_01_localop_A*(this.filtercoeff_01_localop_A+1+(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs-this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=2*(this.filtercoeff_01_localop_A-1-(this.filtercoeff_01_localop_A+1)*this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(this.filtercoeff_01_localop_A+1-(this.filtercoeff_01_localop_A-1)*this.filtercoeff_01_localop_cs-this.filtercoeff_01_localop_beta*this.filtercoeff_01_localop_sn)*this.filtercoeff_01_localop_b0;break;case 9:this.filtercoeff_01_localop_b0g=1/(this.filtercoeff_01_localop_one_over_gain+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_gain),this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_la2=.5*(1-this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_la1=(1-this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 10:this.filtercoeff_01_localop_b0g=1/(this.filtercoeff_01_localop_one_over_gain+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_gain),this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_la2=.5*(1+this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_la1=-(1+this.filtercoeff_01_localop_cs)*this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 11:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_alpha*_*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=-this.filtercoeff_01_localop_alpha*_*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 13:this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_alpha*_*t*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=-this.filtercoeff_01_localop_alpha*_*t*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 12:this.filtercoeff_01_localop_b0g=1/(this.filtercoeff_01_localop_one_over_gain+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_gain),this.filtercoeff_01_localop_la1=this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la1*=this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_lb1*=this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_la0=this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_la2=this.filtercoeff_01_localop_b0g;break;case 14:this.filtercoeff_01_localop_b0g=1/(this.filtercoeff_01_localop_one_over_gain+this.filtercoeff_01_localop_alpha*this.filtercoeff_01_localop_one_over_gain),this.filtercoeff_01_localop_la0=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_la1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0g,this.filtercoeff_01_localop_la2=_,this.filtercoeff_01_localop_lb1=-2*this.filtercoeff_01_localop_cs*this.filtercoeff_01_localop_b0,this.filtercoeff_01_localop_lb2=(1-this.filtercoeff_01_localop_alpha)*this.filtercoeff_01_localop_b0;break;case 15:this.filtercoeff_01_localop_la0=1,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=0,this.filtercoeff_01_localop_lb1=0,this.filtercoeff_01_localop_lb2=0}return[this.filtercoeff_01_localop_la0,this.filtercoeff_01_localop_la1,this.filtercoeff_01_localop_la2,this.filtercoeff_01_localop_lb1,this.filtercoeff_01_localop_lb2]}filtercoeff_01_localop_dspsetup(){this.filtercoeff_01_localop_twopi_over_sr=6.283185307179586/this.sr}filtercoeff_01_localop_reset(){this.filtercoeff_01_localop_internal=!0,this.filtercoeff_01_localop_twopi_over_sr=0,this.filtercoeff_01_localop_cs=0,this.filtercoeff_01_localop_sn=0,this.filtercoeff_01_localop_one_over_gain=0,this.filtercoeff_01_localop_one_over_q=0,this.filtercoeff_01_localop_alpha=0,this.filtercoeff_01_localop_beta=0,this.filtercoeff_01_localop_b0=0,this.filtercoeff_01_localop_b0g=0,this.filtercoeff_01_localop_A=0,this.filtercoeff_01_localop_one_over_a=0,this.filtercoeff_01_localop_la0=0,this.filtercoeff_01_localop_la1=0,this.filtercoeff_01_localop_la2=0,this.filtercoeff_01_localop_lb1=0,this.filtercoeff_01_localop_lb2=0}filtercoeff_01_updateTerms(e,t,_){let i=this.filtercoeff_01_localop_next(e,t,_,this.filtercoeff_01_type);this.filtercoeff_01_la0=i[0],this.filtercoeff_01_la1=i[1],this.filtercoeff_01_la2=i[2],this.filtercoeff_01_lb1=i[3],this.filtercoeff_01_lb2=i[4]}filtercoeff_01_dspsetup(e){this.filtercoeff_01_setupDone&&!e||(this.filtercoeff_01_activeResamp=this.vectorsize(),this.filtercoeff_01_resamp_counter=0,this.filtercoeff_01_setupDone=!0,this.filtercoeff_01_localop_dspsetup())}stackprotect_check(){return this.stackprotect_count++,this.stackprotect_count>128&&(console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\"),!0)}updateTime(e){this._currentTime=e,this.sampleOffsetIntoNextAudioBuffer=rnbo_floor(this.msToSamps(e-this.getEngine().getCurrentTime(),this.sr)),this.sampleOffsetIntoNextAudioBuffer>=this.vs&&(this.sampleOffsetIntoNextAudioBuffer=this.vs-1),this.sampleOffsetIntoNextAudioBuffer<0&&(this.sampleOffsetIntoNextAudioBuffer=0)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_13{constructor(){this.biquad_tilde_02_x=0,this.biquad_tilde_02_a0=0,this.biquad_tilde_02_a1=0,this.biquad_tilde_02_a2=0,this.biquad_tilde_02_b1=0,this.biquad_tilde_02_b2=0,this.filtercoeff_02_frequency=1e3,this.filtercoeff_02_gain=1,this.filtercoeff_02_q=1,this.filtercoeff_02_type=1,this._currentTime=0,this.audioProcessSampleCount=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(5),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.sr=44100,this.invsr=2267573696e-14,this.biquad_tilde_02_x1=0,this.biquad_tilde_02_x2=0,this.biquad_tilde_02_y1=0,this.biquad_tilde_02_y2=0,this.filtercoeff_02_resamp_counter=0,this.filtercoeff_02_activeResamp=0,this.filtercoeff_02_K_EPSILON=1e-9,this.filtercoeff_02_la0=0,this.filtercoeff_02_la1=0,this.filtercoeff_02_la2=0,this.filtercoeff_02_lb1=0,this.filtercoeff_02_lb2=0,this.filtercoeff_02_localop_internal=!0,this.filtercoeff_02_localop_twopi_over_sr=0,this.filtercoeff_02_localop_cs=0,this.filtercoeff_02_localop_sn=0,this.filtercoeff_02_localop_one_over_gain=0,this.filtercoeff_02_localop_one_over_q=0,this.filtercoeff_02_localop_alpha=0,this.filtercoeff_02_localop_beta=0,this.filtercoeff_02_localop_b0=0,this.filtercoeff_02_localop_b0g=0,this.filtercoeff_02_localop_A=0,this.filtercoeff_02_localop_one_over_a=0,this.filtercoeff_02_localop_la0=0,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=0,this.filtercoeff_02_localop_lb1=0,this.filtercoeff_02_localop_lb2=0,this.filtercoeff_02_setupDone=!1,this.stackprotect_count=0,this._voiceIndex=0,this._noteNumber=0,this.isMuted=1,this.parameterOffset=0}vectorsize(){return this.vs}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,_,i){}getNumMidiOutputPorts(){return 0}process(e,t,_,i,s){this.vs=s,this.updateTime(this.getEngine().getCurrentTime());var a=i>=1&&_[0]?_[0]:this.dummyBuffer,r=t>=1&&e[0]?e[0]:this.zeroBuffer,l=t>=2&&e[1]?e[1]:this.zeroBuffer,o=t>=3&&e[2]?e[2]:this.zeroBuffer;this.filtercoeff_02_perform(l,this.filtercoeff_02_gain,o,this.signals[0],this.signals[1],this.signals[2],this.signals[3],this.signals[4],s),this.biquad_tilde_02_perform(r,this.signals[0],this.signals[1],this.signals[2],this.signals[3],this.signals[4],a,s),this.stackprotect_perform(s),this.audioProcessSampleCount+=this.vs}prepareToProcess(e,t,_){if(this.maxvs<t||!this.didAllocateSignals){var i;for(i=0;i<5;i++)this.signals[i]=resizeSignal(this.signals[i],this.maxvs,t);this.zeroBuffer=resizeSignal(this.zeroBuffer,this.maxvs,t),this.dummyBuffer=resizeSignal(this.dummyBuffer,this.maxvs,t),this.didAllocateSignals=!0}var s=e!=this.sr,a=t!=this.maxvs,r=s||a||_;(s||a)&&(this.vs=t,this.maxvs=t,this.sr=e,this.invsr=1/e),this.filtercoeff_02_dspsetup(r),s&&this.onSampleRateChanged(e)}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 3}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}initializeObjects(){}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}getState(){}setState(){}getPreset(e){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,_){}setParameterValue(e,t,_){}processParameterEvent(e,t,_){this.setParameterValue(e,t,_)}processNormalizedParameterEvent(e,t,_){this.setParameterValueNormalized(e,t,_)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let _=1/(t-1);e=1*rnbo_fround(e/_*1/1)*_}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,_,i){}processOutletAtCurrentTime(e,t,_){}processOutletEvent(e,t,_,i){this.updateTime(i),this.processOutletAtCurrentTime(e,t,_)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,_,i){}processListMessage(e,t,_,i){}processBangMessage(e,t,_){}resolveTag(e){return null}startup(){}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}allocateDataRefs(){}initialize(){this.assign_defaults(),this.setState()}filtercoeff_02_perform(e,t,_,i,s,a,r,l,o){RNBO_UNUSED(t);for(var n=this.filtercoeff_02_activeResamp,h=this.filtercoeff_02_resamp_counter,f=this.filtercoeff_02_K_EPSILON,c=0;c<o;c++){let t=_[c],o=1,p=e[c];t<f&&(t=f),p=p>.5*this.sr?.5*this.sr:p<1?1:p,--h<=0&&(h=n,this.filtercoeff_02_updateTerms(p,o,t)),i[c]=this.filtercoeff_02_la0,s[c]=this.filtercoeff_02_la1,a[c]=this.filtercoeff_02_la2,r[c]=this.filtercoeff_02_lb1,l[c]=this.filtercoeff_02_lb2}this.filtercoeff_02_resamp_counter=h}biquad_tilde_02_perform(e,t,_,i,s,a,r,l){var o,n=this.biquad_tilde_02_y2,h=this.biquad_tilde_02_y1,f=this.biquad_tilde_02_x2,c=this.biquad_tilde_02_x1;for(o=0;o<l;o++){var p=e[o]*t[o]+c*_[o]+f*i[o]-(h*s[o]+n*a[o]);f=c,c=e[o],n=h,h=p,r[o]=p}this.biquad_tilde_02_x1=c,this.biquad_tilde_02_x2=f,this.biquad_tilde_02_y1=h,this.biquad_tilde_02_y2=n}stackprotect_perform(e){RNBO_UNUSED(e);this.stackprotect_count;this.stackprotect_count=0}filtercoeff_02_localop_next(e,t,_,i){let s=e*this.filtercoeff_02_localop_twopi_over_sr;switch(this.filtercoeff_02_localop_cs=rnbo_cos(s),this.filtercoeff_02_localop_sn=rnbo_sin(s),this.filtercoeff_02_localop_one_over_gain=_>=0?1/_:0,this.filtercoeff_02_localop_one_over_q=1/t,this.filtercoeff_02_localop_alpha=.5*this.filtercoeff_02_localop_sn*this.filtercoeff_02_localop_one_over_q,i){case 5:this.filtercoeff_02_localop_A=rnbo_sqrt(_),this.filtercoeff_02_localop_beta=rnbo_sqrt((this.filtercoeff_02_localop_A*this.filtercoeff_02_localop_A+1)*this.filtercoeff_02_localop_one_over_q-(this.filtercoeff_02_localop_A-1)*(this.filtercoeff_02_localop_A-1)),this.filtercoeff_02_localop_b0=1/(this.filtercoeff_02_localop_A+1+(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs+this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn);break;case 6:this.filtercoeff_02_localop_A=rnbo_sqrt(_),this.filtercoeff_02_localop_beta=rnbo_sqrt((this.filtercoeff_02_localop_A*this.filtercoeff_02_localop_A+1)*this.filtercoeff_02_localop_one_over_q-(this.filtercoeff_02_localop_A-1)*(this.filtercoeff_02_localop_A-1)),this.filtercoeff_02_localop_b0=1/(this.filtercoeff_02_localop_A+1-(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs+this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn);break;case 4:this.filtercoeff_02_localop_A=rnbo_sqrt(_),this.filtercoeff_02_localop_one_over_a=0==this.filtercoeff_02_localop_A?0:1/this.filtercoeff_02_localop_A,this.filtercoeff_02_localop_b0=1/(1+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_a);break;case 9:case 10:case 11:case 13:case 14:this.filtercoeff_02_localop_b0=1/(1+this.filtercoeff_02_localop_alpha),this.filtercoeff_02_localop_b0g=1/(this.filtercoeff_02_localop_one_over_gain+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_gain);break;default:this.filtercoeff_02_localop_b0=1/(1+this.filtercoeff_02_localop_alpha)}switch(i){case 0:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_la2=.5*(1-this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=(1-this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 1:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_la2=.5*(1+this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=-(1+this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 2:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=-this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 7:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_alpha*t*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=-this.filtercoeff_02_localop_alpha*t*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 3:this.filtercoeff_02_localop_la1=this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_la2=this.filtercoeff_02_localop_b0;break;case 8:this.filtercoeff_02_localop_la1=this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=this.filtercoeff_02_localop_la0=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la2=1;break;case 4:this.filtercoeff_02_localop_la0=(1+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_A)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la2=(1-this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_A)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_a)*this.filtercoeff_02_localop_b0;break;case 5:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_A*(this.filtercoeff_02_localop_A+1-(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs+this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=2*this.filtercoeff_02_localop_A*(this.filtercoeff_02_localop_A-1-(this.filtercoeff_02_localop_A+1)*this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la2=this.filtercoeff_02_localop_A*(this.filtercoeff_02_localop_A+1-(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs-this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*(this.filtercoeff_02_localop_A-1+(this.filtercoeff_02_localop_A+1)*this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(this.filtercoeff_02_localop_A+1+(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs-this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn)*this.filtercoeff_02_localop_b0;break;case 6:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_A*(this.filtercoeff_02_localop_A+1+(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs+this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=-2*this.filtercoeff_02_localop_A*(this.filtercoeff_02_localop_A-1+(this.filtercoeff_02_localop_A+1)*this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la2=this.filtercoeff_02_localop_A*(this.filtercoeff_02_localop_A+1+(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs-this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=2*(this.filtercoeff_02_localop_A-1-(this.filtercoeff_02_localop_A+1)*this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(this.filtercoeff_02_localop_A+1-(this.filtercoeff_02_localop_A-1)*this.filtercoeff_02_localop_cs-this.filtercoeff_02_localop_beta*this.filtercoeff_02_localop_sn)*this.filtercoeff_02_localop_b0;break;case 9:this.filtercoeff_02_localop_b0g=1/(this.filtercoeff_02_localop_one_over_gain+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_gain),this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_la2=.5*(1-this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_la1=(1-this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 10:this.filtercoeff_02_localop_b0g=1/(this.filtercoeff_02_localop_one_over_gain+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_gain),this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_la2=.5*(1+this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_la1=-(1+this.filtercoeff_02_localop_cs)*this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 11:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_alpha*_*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=-this.filtercoeff_02_localop_alpha*_*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 13:this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_alpha*_*t*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=-this.filtercoeff_02_localop_alpha*_*t*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 12:this.filtercoeff_02_localop_b0g=1/(this.filtercoeff_02_localop_one_over_gain+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_gain),this.filtercoeff_02_localop_la1=this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la1*=this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_lb1*=this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_la0=this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_la2=this.filtercoeff_02_localop_b0g;break;case 14:this.filtercoeff_02_localop_b0g=1/(this.filtercoeff_02_localop_one_over_gain+this.filtercoeff_02_localop_alpha*this.filtercoeff_02_localop_one_over_gain),this.filtercoeff_02_localop_la0=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_la1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0g,this.filtercoeff_02_localop_la2=_,this.filtercoeff_02_localop_lb1=-2*this.filtercoeff_02_localop_cs*this.filtercoeff_02_localop_b0,this.filtercoeff_02_localop_lb2=(1-this.filtercoeff_02_localop_alpha)*this.filtercoeff_02_localop_b0;break;case 15:this.filtercoeff_02_localop_la0=1,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=0,this.filtercoeff_02_localop_lb1=0,this.filtercoeff_02_localop_lb2=0}return[this.filtercoeff_02_localop_la0,this.filtercoeff_02_localop_la1,this.filtercoeff_02_localop_la2,this.filtercoeff_02_localop_lb1,this.filtercoeff_02_localop_lb2]}filtercoeff_02_localop_dspsetup(){this.filtercoeff_02_localop_twopi_over_sr=6.283185307179586/this.sr}filtercoeff_02_localop_reset(){this.filtercoeff_02_localop_internal=!0,this.filtercoeff_02_localop_twopi_over_sr=0,this.filtercoeff_02_localop_cs=0,this.filtercoeff_02_localop_sn=0,this.filtercoeff_02_localop_one_over_gain=0,this.filtercoeff_02_localop_one_over_q=0,this.filtercoeff_02_localop_alpha=0,this.filtercoeff_02_localop_beta=0,this.filtercoeff_02_localop_b0=0,this.filtercoeff_02_localop_b0g=0,this.filtercoeff_02_localop_A=0,this.filtercoeff_02_localop_one_over_a=0,this.filtercoeff_02_localop_la0=0,this.filtercoeff_02_localop_la1=0,this.filtercoeff_02_localop_la2=0,this.filtercoeff_02_localop_lb1=0,this.filtercoeff_02_localop_lb2=0}filtercoeff_02_updateTerms(e,t,_){let i=this.filtercoeff_02_localop_next(e,t,_,this.filtercoeff_02_type);this.filtercoeff_02_la0=i[0],this.filtercoeff_02_la1=i[1],this.filtercoeff_02_la2=i[2],this.filtercoeff_02_lb1=i[3],this.filtercoeff_02_lb2=i[4]}filtercoeff_02_dspsetup(e){this.filtercoeff_02_setupDone&&!e||(this.filtercoeff_02_activeResamp=this.vectorsize(),this.filtercoeff_02_resamp_counter=0,this.filtercoeff_02_setupDone=!0,this.filtercoeff_02_localop_dspsetup())}stackprotect_check(){return this.stackprotect_count++,this.stackprotect_count>128&&(console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\"),!0)}updateTime(e){this._currentTime=e,this.sampleOffsetIntoNextAudioBuffer=rnbo_floor(this.msToSamps(e-this.getEngine().getCurrentTime(),this.sr)),this.sampleOffsetIntoNextAudioBuffer>=this.vs&&(this.sampleOffsetIntoNextAudioBuffer=this.vs-1),this.sampleOffsetIntoNextAudioBuffer<0&&(this.sampleOffsetIntoNextAudioBuffer=0)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_14{constructor(){this.param_06_value=0,this.scalascale_01_input_number=0,this.expr_02_in1=0,this.expr_02_in2=1,this.expr_02_out1=0,this.param_07_value=2,this.selector_03_onoff=1,this.dspexpr_02_in1=0,this.dspexpr_02_in2=1,this.p_01_target=0,this.p_02_target=0,this.mtof_tilde_01_midivalue=69,this.mtof_tilde_01_scale=[],this.mtof_tilde_01_map=[],this.mtof_tilde_01_base=440,this.notein_01_channel=0,this.p_03_target=0,this.param_08_value=130,this.ip_02_value=0,this.ip_02_impulse=0,this.gen_01_in1=0,this.gen_01_in2=0,this.gen_01_tail=.25,this.gen_01_bandwidth=.5,this.gen_01_spread=23,this.gen_01_revtime=11,this.gen_01_dry=1,this.gen_01_damping=.7,this.gen_01_roomsize=75,this.gen_01_early=.25,this.param_09_value=.2,this.p_04_target=0,this.param_10_value=10,this.param_11_value=.5,this.ip_03_value=0,this.ip_03_impulse=0,this.dspexpr_03_in1=0,this.dspexpr_03_in2=127,this.ip_04_value=0,this.ip_04_impulse=0,this.latch_tilde_01_x=0,this.latch_tilde_01_control=0,this.dspexpr_04_in1=0,this.dspexpr_04_in2=0,this._currentTime=0,this.audioProcessSampleCount=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(7),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.sr=44100,this.invsr=2267573696e-14,this.param_06_lastValue=0,this.scalascale_01_data=[12,16,15,9,8,6,5,5,4,4,3,27,20,3,2,8,5,5,3,9,5,15,8,2,1,24,81,80,25,24,135,128,9,8,729,640,75,64,1215,1024,5,4,81,64,4,3,27,20,45,32,729,512,3,2,243,160,25,16,405,256,5,3,27,16,225,128,3645,2048,15,8,243,128,2,1,12,100.20762,0,199.93511,0,300.36652,0,400.3042,0,499.94415,0,600.12513,0,699.74785,0,800.07968,0,899.92383,0,1000.46612,0,1100.50792,0,2,1,12,75.7,0,192.2,0,310.7,0,385.8,0,504.75363,0,580.2,0,696.26231,0,772.6,0,889.1,0,1007.8133,0,1083.4,0,2,1],this.scalascale_01_lengths=[25,49,25,25],this.scalascale_01_offsets=[0,25,74,99],this.scalascale_01_current=[12,16,15,9,8,6,5,5,4,4,3,27,20,3,2,8,5,5,3,9,5,15,8,2,1],this.param_07_lastValue=0,this.mtof_tilde_01_innerMtoF_lastInValue=0,this.mtof_tilde_01_innerMtoF_lastOutValue=0,this.mtof_tilde_01_innerMtoF_lastTuning=0,this.mtof_tilde_01_innerMtoF_buffer=0,this.mtof_tilde_01_innerScala_internal=!0,this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET=7,this.mtof_tilde_01_innerScala_lastValid=!1,this.mtof_tilde_01_innerScala_lastNote=0,this.mtof_tilde_01_innerScala_lastFreq=0,this.mtof_tilde_01_innerScala_sclEntryCount=0,this.mtof_tilde_01_innerScala_sclOctaveMul=1,this.mtof_tilde_01_innerScala_sclExpMul=[0],this.mtof_tilde_01_innerScala_kbmValid=[0,0,0,60,69,440],this.mtof_tilde_01_innerScala_kbmMid=60,this.mtof_tilde_01_innerScala_kbmRefNum=69,this.mtof_tilde_01_innerScala_kbmRefFreq=440,this.mtof_tilde_01_innerScala_kbmSize=0,this.mtof_tilde_01_innerScala_kbmMin=0,this.mtof_tilde_01_innerScala_kbmMax=0,this.mtof_tilde_01_innerScala_kbmOctaveDegree=12,this.mtof_tilde_01_innerScala_kbmMapSize=0,this.mtof_tilde_01_innerScala_refFreq=261.63,this.notein_01_status=0,this.notein_01_byte1=-1,this.notein_01_inchan=0,this.param_08_lastValue=0,this.ip_02_lastValue=0,this.ip_02_lastIndex=0,this.ip_02_resetCount=0,this.ip_02_sigbuf=0,this.ip_02_setupDone=!1,this.gen_01_history_17_value=0,this.gen_01_history_16_value=0,this.gen_01_history_15_value=0,this.gen_01_history_14_value=0,this.gen_01_history_13_value=0,this.gen_01_delay_12_buffer=0,this.gen_01_delay_12__maxdelay=0,this.gen_01_delay_12_sizemode=0,this.gen_01_delay_12_wrap=0,this.gen_01_delay_12_reader=0,this.gen_01_delay_12_writer=0,this.gen_01_delay_11_buffer=0,this.gen_01_delay_11__maxdelay=0,this.gen_01_delay_11_sizemode=0,this.gen_01_delay_11_wrap=0,this.gen_01_delay_11_reader=0,this.gen_01_delay_11_writer=0,this.gen_01_delay_10_buffer=0,this.gen_01_delay_10__maxdelay=0,this.gen_01_delay_10_sizemode=0,this.gen_01_delay_10_wrap=0,this.gen_01_delay_10_reader=0,this.gen_01_delay_10_writer=0,this.gen_01_delay_9_buffer=0,this.gen_01_delay_9__maxdelay=0,this.gen_01_delay_9_sizemode=0,this.gen_01_delay_9_wrap=0,this.gen_01_delay_9_reader=0,this.gen_01_delay_9_writer=0,this.gen_01_delay_8_buffer=0,this.gen_01_delay_8__maxdelay=0,this.gen_01_delay_8_sizemode=0,this.gen_01_delay_8_wrap=0,this.gen_01_delay_8_reader=0,this.gen_01_delay_8_writer=0,this.gen_01_delay_7_buffer=0,this.gen_01_delay_7__maxdelay=0,this.gen_01_delay_7_sizemode=0,this.gen_01_delay_7_wrap=0,this.gen_01_delay_7_reader=0,this.gen_01_delay_7_writer=0,this.gen_01_delay_6_buffer=0,this.gen_01_delay_6__maxdelay=0,this.gen_01_delay_6_sizemode=0,this.gen_01_delay_6_wrap=0,this.gen_01_delay_6_reader=0,this.gen_01_delay_6_writer=0,this.gen_01_delay_5_buffer=0,this.gen_01_delay_5__maxdelay=0,this.gen_01_delay_5_sizemode=0,this.gen_01_delay_5_wrap=0,this.gen_01_delay_5_reader=0,this.gen_01_delay_5_writer=0,this.gen_01_delay_4_buffer=0,this.gen_01_delay_4__maxdelay=0,this.gen_01_delay_4_sizemode=0,this.gen_01_delay_4_wrap=0,this.gen_01_delay_4_reader=0,this.gen_01_delay_4_writer=0,this.gen_01_delay_3_buffer=0,this.gen_01_delay_3__maxdelay=0,this.gen_01_delay_3_sizemode=0,this.gen_01_delay_3_wrap=0,this.gen_01_delay_3_reader=0,this.gen_01_delay_3_writer=0,this.gen_01_delay_2_buffer=0,this.gen_01_delay_2__maxdelay=0,this.gen_01_delay_2_sizemode=0,this.gen_01_delay_2_wrap=0,this.gen_01_delay_2_reader=0,this.gen_01_delay_2_writer=0,this.gen_01_delay_1_buffer=0,this.gen_01_delay_1__maxdelay=0,this.gen_01_delay_1_sizemode=0,this.gen_01_delay_1_wrap=0,this.gen_01_delay_1_reader=0,this.gen_01_delay_1_writer=0,this.gen_01_setupDone=!1,this.param_09_lastValue=0,this.param_10_lastValue=0,this.param_11_lastValue=0,this.ip_03_lastValue=0,this.ip_03_lastIndex=0,this.ip_03_resetCount=0,this.ip_03_sigbuf=0,this.ip_03_setupDone=!1,this.ip_04_lastValue=0,this.ip_04_lastIndex=0,this.ip_04_resetCount=0,this.ip_04_sigbuf=0,this.ip_04_setupDone=!1,this.latch_tilde_01_value=0,this.latch_tilde_01_setupDone=!1,this.stackprotect_count=0,this.gen_01_delay_12_bufferobj=0,this.gen_01_delay_11_bufferobj=0,this.gen_01_delay_10_bufferobj=0,this.gen_01_delay_9_bufferobj=0,this.gen_01_delay_8_bufferobj=0,this.gen_01_delay_7_bufferobj=0,this.gen_01_delay_6_bufferobj=0,this.gen_01_delay_5_bufferobj=0,this.gen_01_delay_4_bufferobj=0,this.gen_01_delay_3_bufferobj=0,this.gen_01_delay_2_bufferobj=0,this.gen_01_delay_1_bufferobj=0,this._voiceIndex=0,this._noteNumber=0,this.isMuted=1,this.parameterOffset=0,this.p_01=new Array,this.p_02=new Array,this.p_03=new Array,this.p_04=new Array}linearinterp(e,t,_){return t+(_-t)*e}cubicinterp(e,t,_,i,s){var a=e*e,r=s-i-t+_;return r*e*a+(t-_-r)*a+(i-t)*e+_}splineinterp(e,t,_,i,s){var a=e*e;return(-.5*t+1.5*_-1.5*i+.5*s)*e*a+(t-2.5*_+2*i-.5*s)*a+(-.5*t+.5*i)*e+_}cosT8(e){var t,_=.00019841269841;return e<.7853981633974483&&e>-.7853981633974483?1-24801587302e-15*(t=e*e)*(20160-t*(1680-t*(56-t))):e>0?-(e-=1.5707963267948966)*(1-_*(t=e*e)*(840-t*(42-t))):(e+=1.5707963267948966)*(1-_*(t=e*e)*(840-t*(42-t)))}cosineinterp(e,t,_){var i=(1-this.cosT8(3.141592653589793*e))/2;return t*(1-i)+_*i}mstosamps(e){return e*this.sr*.001}samplerate(){return this.sr}vectorsize(){return this.vs}maximum(e,t){return e<t?t:e}intnum(e){return rnbo_floor(e)}param_06_value_set(e){e=this.param_06_value_constrain(e),this.param_06_value=e,this.sendParameter(0),this.param_06_value!=this.param_06_lastValue&&(this.getEngine().presetTouched(),this.param_06_lastValue=this.param_06_value),this.scalascale_01_input_number_set(e)}param_07_value_set(e){e=this.param_07_value_constrain(e),this.param_07_value=e,this.sendParameter(1),this.param_07_value!=this.param_07_lastValue&&(this.getEngine().presetTouched(),this.param_07_lastValue=this.param_07_value),this.expr_02_in1_set(e)}param_08_value_set(e){e=this.param_08_value_constrain(e),this.param_08_value=e,this.sendParameter(2),this.param_08_value!=this.param_08_lastValue&&(this.getEngine().presetTouched(),this.param_08_lastValue=this.param_08_value),this.ip_02_value_set(e)}param_09_value_set(e){e=this.param_09_value_constrain(e),this.param_09_value=e,this.sendParameter(3),this.param_09_value!=this.param_09_lastValue&&(this.getEngine().presetTouched(),this.param_09_lastValue=this.param_09_value),this.ip_03_value_set(e)}param_10_value_set(e){e=this.param_10_value_constrain(e),this.param_10_value=e,this.sendParameter(4),this.param_10_value!=this.param_10_lastValue&&(this.getEngine().presetTouched(),this.param_10_lastValue=this.param_10_value),this.gen_01_roomsize_set(e)}param_11_value_set(e){e=this.param_11_value_constrain(e),this.param_11_value=e,this.sendParameter(5),this.param_11_value!=this.param_11_lastValue&&(this.getEngine().presetTouched(),this.param_11_lastValue=this.param_11_value),this.gen_01_dry_set(e)}getParameterIndexForID(e){return stringCompare(e,\"setTuning\")?stringCompare(e,\"filterType\")?stringCompare(e,\"filterCutoff\")?stringCompare(e,\"filterQ\")?stringCompare(e,\"reverbSize\")?stringCompare(e,\"reverbMix\")?INVALID_INDEX:5:4:3:2:1:0}getNumMidiInputPorts(){return 1}processMidiEvent(e,t,_,i){this.updateTime(e),this.notein_01_midihandler(240&_[0],1+(15&_[0]),t,_,i)}getNumMidiOutputPorts(){return 0}process(e,t,_,i,s){RNBO_UNUSED(t),RNBO_UNUSED(e),this.vs=s,this.updateTime(this.getEngine().getCurrentTime());var a=i>=1&&_[0]?_[0]:this.dummyBuffer,r=i>=2&&_[1]?_[1]:this.dummyBuffer;this.getIsMuted()||(this.mtof_tilde_01_perform(this.mtof_tilde_01_midivalue,this.signals[0],s),this.p_01_perform(this.signals[0],this.zeroBuffer,this.zeroBuffer,this.signals[1],this.dummyBuffer,s),this.ip_02_perform(this.signals[0],s),this.gen_01_perform(this.gen_01_in1,this.gen_01_in2,this.gen_01_tail,this.gen_01_bandwidth,this.gen_01_spread,this.gen_01_revtime,this.gen_01_dry,this.gen_01_damping,this.gen_01_roomsize,this.gen_01_early,this.dummyBuffer,this.dummyBuffer,s),this.ip_03_perform(this.signals[2],s),this.ip_04_perform(this.signals[3],s),this.dspexpr_04_perform(this.signals[3],this.dspexpr_04_in2,this.signals[4],s),this.p_02_perform(this.signals[1],this.signals[4],this.signals[5],this.dummyBuffer,s),this.p_03_perform(this.signals[5],this.signals[0],this.signals[2],this.signals[1],s),this.p_04_perform(this.signals[5],this.signals[0],this.signals[2],this.signals[6],s),this.selector_03_perform(this.selector_03_onoff,this.signals[1],this.signals[6],this.signals[5],this.signals[2],s),this.latch_tilde_01_perform(this.signals[3],this.signals[4],this.signals[5],s),this.dspexpr_03_perform(this.signals[5],this.dspexpr_03_in2,this.signals[4],s),this.dspexpr_02_perform(this.signals[2],this.signals[4],this.signals[5],s),this.signaladder_01_perform(this.signals[5],a,a,s),this.signaladder_02_perform(this.signals[5],r,r,s),this.stackprotect_perform(s),this.audioProcessSampleCount+=this.vs)}prepareToProcess(e,t,_){if(this.maxvs<t||!this.didAllocateSignals){var i;for(i=0;i<7;i++)this.signals[i]=resizeSignal(this.signals[i],this.maxvs,t);this.ip_02_sigbuf=resizeSignal(this.ip_02_sigbuf,this.maxvs,t),this.ip_03_sigbuf=resizeSignal(this.ip_03_sigbuf,this.maxvs,t),this.ip_04_sigbuf=resizeSignal(this.ip_04_sigbuf,this.maxvs,t),this.zeroBuffer=resizeSignal(this.zeroBuffer,this.maxvs,t),this.dummyBuffer=resizeSignal(this.dummyBuffer,this.maxvs,t),this.didAllocateSignals=!0}var s=e!=this.sr,a=t!=this.maxvs,r=s||a||_;(s||a)&&(this.vs=t,this.maxvs=t,this.sr=e,this.invsr=1/e),this.ip_02_dspsetup(r),this.gen_01_dspsetup(r),this.ip_03_dspsetup(r),this.ip_04_dspsetup(r),this.latch_tilde_01_dspsetup(r),this.p_01.prepareToProcess(e,t,_),this.p_02.prepareToProcess(e,t,_),this.p_03.prepareToProcess(e,t,_),this.p_04.prepareToProcess(e,t,_),s&&this.onSampleRateChanged(e)}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}initializeObjects(){this.mtof_tilde_01_innerScala_init(),this.mtof_tilde_01_init(),this.gen_01_history_17_init(),this.gen_01_history_16_init(),this.gen_01_history_15_init(),this.gen_01_history_14_init(),this.gen_01_history_13_init(),this.gen_01_delay_12_init(),this.gen_01_delay_11_init(),this.gen_01_delay_10_init(),this.gen_01_delay_9_init(),this.gen_01_delay_8_init(),this.gen_01_delay_7_init(),this.gen_01_delay_6_init(),this.gen_01_delay_5_init(),this.gen_01_delay_4_init(),this.gen_01_delay_3_init(),this.gen_01_delay_2_init(),this.gen_01_delay_1_init(),this.p_01.initializeObjects(),this.p_02.initializeObjects(),this.p_03.initializeObjects(),this.p_04.initializeObjects()}setVoiceIndex(e){this._voiceIndex=e,this.p_01.setVoiceIndex(e),this.p_02.setVoiceIndex(e),this.p_03.setVoiceIndex(e),this.p_04.setVoiceIndex(e)}setNoteNumber(e){this._noteNumber=e,this.p_01.setNoteNumber(e),this.p_02.setNoteNumber(e),this.p_03.setNoteNumber(e),this.p_04.setNoteNumber(e)}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}getState(){}setState(){this.p_01=new RNBOSubpatcher_10,this.p_01.setEngineAndPatcher(this.getEngine(),this),this.p_01.initialize(),this.p_01.setParameterOffset(this.getParameterOffset(this.p_01)),this.p_02=new RNBOSubpatcher_11,this.p_02.setEngineAndPatcher(this.getEngine(),this),this.p_02.initialize(),this.p_02.setParameterOffset(this.getParameterOffset(this.p_02)),this.p_03=new RNBOSubpatcher_12,this.p_03.setEngineAndPatcher(this.getEngine(),this),this.p_03.initialize(),this.p_03.setParameterOffset(this.getParameterOffset(this.p_03)),this.p_04=new RNBOSubpatcher_13,this.p_04.setEngineAndPatcher(this.getEngine(),this),this.p_04.initialize(),this.p_04.setParameterOffset(this.getParameterOffset(this.p_04))}getPreset(e){this.p_01.getPreset(getSubState(getSubState(e,\"__sps\"),\"oscillator\")),this.p_02.getPreset(getSubState(getSubState(e,\"__sps\"),\"envelope\")),this.p_03.getPreset(getSubState(getSubState(e,\"__sps\"),\"p_obj-6\")),this.p_04.getPreset(getSubState(getSubState(e,\"__sps\"),\"p_obj-5\"))}processTempoEvent(e,t){this.updateTime(e),this.p_01.processTempoEvent(e,t),this.p_02.processTempoEvent(e,t),this.p_03.processTempoEvent(e,t),this.p_04.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_01.processTransportEvent(e,t),this.p_02.processTransportEvent(e,t),this.p_03.processTransportEvent(e,t),this.p_04.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_01.processBeatTimeEvent(e,t),this.p_02.processBeatTimeEvent(e,t),this.p_03.processBeatTimeEvent(e,t),this.p_04.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,_){this.updateTime(e),this.p_01.processTimeSignatureEvent(e,t,_),this.p_02.processTimeSignatureEvent(e,t,_),this.p_03.processTimeSignatureEvent(e,t,_),this.p_04.processTimeSignatureEvent(e,t,_)}setParameterValue(e,t,_){switch(this.updateTime(_),e){case 0:this.param_06_value_set(t);break;case 1:this.param_07_value_set(t);break;case 2:this.param_08_value_set(t);break;case 3:this.param_09_value_set(t);break;case 4:this.param_10_value_set(t);break;case 5:this.param_11_value_set(t);break;default:(e-=6)<this.p_01.getNumParameters()&&this.p_01.setParameterValue(e,t,_),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.setParameterValue(e,t,_),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.setParameterValue(e,t,_),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.setParameterValue(e,t,_)}}processParameterEvent(e,t,_){this.setParameterValue(e,t,_)}processNormalizedParameterEvent(e,t,_){this.setParameterValueNormalized(e,t,_)}getParameterValue(e){switch(e){case 0:return this.param_06_value;case 1:return this.param_07_value;case 2:return this.param_08_value;case 3:return this.param_09_value;case 4:return this.param_10_value;case 5:return this.param_11_value;default:return(e-=6)<this.p_01.getNumParameters()?this.p_01.getParameterValue(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterValue(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterValue(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterValue(e):0}}getPolyParameterValue(e,t){return e[0].getParameterValue(t)}setPolyParameterValue(e,t,_,i){for(var s=0;s<24;s++)e[s].setParameterValue(t,_,i)}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 6+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters()+this.p_04.getNumParameters()}getParameterName(e){switch(e){case 0:return\"setTuning\";case 1:return\"filterType\";case 2:return\"filterCutoff\";case 3:return\"filterQ\";case 4:return\"reverbSize\";case 5:return\"reverbMix\";default:return(e-=6)<this.p_01.getNumParameters()?this.p_01.getParameterName(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterName(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterName(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"poly/setTuning\";case 1:return\"poly/filterType\";case 2:return\"poly/filterCutoff\";case 3:return\"poly/filterQ\";case 4:return\"poly/reverbSize\";case 5:return\"poly/reverbMix\";default:return(e-=6)<this.p_01.getNumParameters()?this.p_01.getParameterId(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterId(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterId(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=0,t.min=0,t.max=3,t.exponent=1,t.steps=4,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=2,t.min=0,t.max=2,t.exponent=1,t.steps=3;t.enumValues=[\"lopass\",\"hipass\",\"bypass\"],t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 2:t.type=ParameterTypeNumber,t.initialValue=130,t.min=0,t.max=1e4,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 3:t.type=ParameterTypeNumber,t.initialValue=.2,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 4:t.type=ParameterTypeNumber,t.initialValue=10,t.min=.1,t.max=300,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 5:t.type=ParameterTypeNumber,t.initialValue=.5,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=6)<this.p_01.getNumParameters()&&this.p_01.getParameterInfo(e,t),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.getParameterInfo(e,t),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.getParameterInfo(e,t),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.getParameterInfo(e,t)}}sendParameter(e){1==this._voiceIndex&&this.getPatcher().sendParameter(e+this.parameterOffset)}sendPolyParameter(e,t){this.getPatcher().sendParameter(e+this.parameterOffset+t-1)}getParameterOffset(e){return e==this.p_01?6:e==this.p_02?6+this.p_01.getNumParameters():e==this.p_03?6+this.p_01.getNumParameters()+this.p_02.getNumParameters():e==this.p_04?6+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let _=1/(t-1);e=1*rnbo_fround(e/_*1/1)*_}return e}convertToNormalizedParameterValue(e,t){switch(e){case 3:case 5:return((t=t<0?0:t>1?1:t)-0)/1;case 1:{let e=((t=t<0?0:t>2?2:t)-0)/2;return e=this.applyStepsToNormalizedParameterValue(e,3),e}case 0:{let e=((t=t<0?0:t>3?3:t)-0)/3;return e=this.applyStepsToNormalizedParameterValue(e,4),e}case 2:return((t=t<0?0:t>1e4?1e4:t)-0)/1e4;case 4:return((t=t<.1?.1:t>300?300:t)-.1)/299.9;default:return(e-=6)<this.p_01.getNumParameters()?this.p_01.convertToNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertToNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertToNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 3:case 5:return 0+1*(t=t<0?0:t>1?1:t);case 1:return t=t<0?0:t>1?1:t,0+2*(t=this.applyStepsToNormalizedParameterValue(t,3));case 0:return t=t<0?0:t>1?1:t,0+3*(t=this.applyStepsToNormalizedParameterValue(t,4));case 2:return 0+1e4*(t=t<0?0:t>1?1:t);case 4:return.1+299.9*(t=t<0?0:t>1?1:t);default:return(e-=6)<this.p_01.getNumParameters()?this.p_01.convertFromNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertFromNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertFromNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){switch(e){case 0:return this.param_06_value_constrain(t);case 1:return this.param_07_value_constrain(t);case 2:return this.param_08_value_constrain(t);case 3:return this.param_09_value_constrain(t);case 4:return this.param_10_value_constrain(t);case 5:return this.param_11_value_constrain(t);default:return(e-=6)<this.p_01.getNumParameters()?this.p_01.constrainParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.constrainParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.constrainParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.constrainParameterValue(e,t):t}}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,_,i){}processOutletAtCurrentTime(e,t,_){}processOutletEvent(e,t,_,i){this.updateTime(i),this.processOutletAtCurrentTime(e,t,_)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,_,i){RNBO_UNUSED(t),this.updateTime(_),this.p_01.processNumMessage(e,t,_,i),this.p_02.processNumMessage(e,t,_,i),this.p_03.processNumMessage(e,t,_,i),this.p_04.processNumMessage(e,t,_,i)}processListMessage(e,t,_,i){RNBO_UNUSED(t),this.updateTime(_),this.p_01.processListMessage(e,t,_,i),this.p_02.processListMessage(e,t,_,i),this.p_03.processListMessage(e,t,_,i),this.p_04.processListMessage(e,t,_,i)}processBangMessage(e,t,_){RNBO_UNUSED(t),this.updateTime(_),this.p_01.processBangMessage(e,t,_),this.p_02.processBangMessage(e,t,_),this.p_03.processBangMessage(e,t,_),this.p_04.processBangMessage(e,t,_)}resolveTag(e){var t=this.p_01.resolveTag(e);if(t)return t;var _=this.p_02.resolveTag(e);if(_)return _;var i=this.p_03.resolveTag(e);if(i)return i;var s=this.p_04.resolveTag(e);return s||null}startup(){this.updateTime(this.getEngine().getCurrentTime()),this.p_01.startup(),this.p_02.startup(),this.p_03.startup(),this.p_04.startup()}getDataRef(e){switch(e){case 2:return addressOf(this.gen_01_delay_12_bufferobj);case 3:return addressOf(this.gen_01_delay_11_bufferobj);case 4:return addressOf(this.gen_01_delay_10_bufferobj);case 5:return addressOf(this.gen_01_delay_9_bufferobj);case 6:return addressOf(this.gen_01_delay_8_bufferobj);case 7:return addressOf(this.gen_01_delay_7_bufferobj);case 8:return addressOf(this.gen_01_delay_6_bufferobj);case 9:return addressOf(this.gen_01_delay_5_bufferobj);case 10:return addressOf(this.gen_01_delay_4_bufferobj);case 11:return addressOf(this.gen_01_delay_3_bufferobj);case 12:return addressOf(this.gen_01_delay_2_bufferobj);case 13:return addressOf(this.gen_01_delay_1_bufferobj);default:return null}}getNumDataRefs(){return 12}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),1==e&&(this.mtof_tilde_01_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256)),2==e&&(this.gen_01_delay_12_buffer=new Float64Buffer(this.gen_01_delay_12_bufferobj)),3==e&&(this.gen_01_delay_11_buffer=new Float64Buffer(this.gen_01_delay_11_bufferobj)),4==e&&(this.gen_01_delay_10_buffer=new Float64Buffer(this.gen_01_delay_10_bufferobj)),5==e&&(this.gen_01_delay_9_buffer=new Float64Buffer(this.gen_01_delay_9_bufferobj)),6==e&&(this.gen_01_delay_8_buffer=new Float64Buffer(this.gen_01_delay_8_bufferobj)),7==e&&(this.gen_01_delay_7_buffer=new Float64Buffer(this.gen_01_delay_7_bufferobj)),8==e&&(this.gen_01_delay_6_buffer=new Float64Buffer(this.gen_01_delay_6_bufferobj)),9==e&&(this.gen_01_delay_5_buffer=new Float64Buffer(this.gen_01_delay_5_bufferobj)),10==e&&(this.gen_01_delay_4_buffer=new Float64Buffer(this.gen_01_delay_4_bufferobj)),11==e&&(this.gen_01_delay_3_buffer=new Float64Buffer(this.gen_01_delay_3_bufferobj)),12==e&&(this.gen_01_delay_2_buffer=new Float64Buffer(this.gen_01_delay_2_bufferobj)),13==e&&(this.gen_01_delay_1_buffer=new Float64Buffer(this.gen_01_delay_1_bufferobj)),this.p_01.processDataViewUpdate(e,t),this.p_02.processDataViewUpdate(e,t),this.p_03.processDataViewUpdate(e,t),this.p_04.processDataViewUpdate(e,t)}allocateDataRefs(){this.p_01.allocateDataRefs(),this.p_02.allocateDataRefs(),this.p_03.allocateDataRefs(),this.p_04.allocateDataRefs(),this.mtof_tilde_01_innerMtoF_buffer.requestSize(65536,1),this.mtof_tilde_01_innerMtoF_buffer.setSampleRate(this.sr),this.mtof_tilde_01_innerMtoF_buffer=this.mtof_tilde_01_innerMtoF_buffer.allocateIfNeeded(),this.gen_01_delay_12_buffer=this.gen_01_delay_12_buffer.allocateIfNeeded(),this.gen_01_delay_12_bufferobj.hasRequestedSize()&&(this.gen_01_delay_12_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_12_bufferobj),this.getEngine().sendDataRefUpdated(2)),this.gen_01_delay_11_buffer=this.gen_01_delay_11_buffer.allocateIfNeeded(),this.gen_01_delay_11_bufferobj.hasRequestedSize()&&(this.gen_01_delay_11_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_11_bufferobj),this.getEngine().sendDataRefUpdated(3)),this.gen_01_delay_10_buffer=this.gen_01_delay_10_buffer.allocateIfNeeded(),this.gen_01_delay_10_bufferobj.hasRequestedSize()&&(this.gen_01_delay_10_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_10_bufferobj),this.getEngine().sendDataRefUpdated(4)),this.gen_01_delay_9_buffer=this.gen_01_delay_9_buffer.allocateIfNeeded(),this.gen_01_delay_9_bufferobj.hasRequestedSize()&&(this.gen_01_delay_9_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_9_bufferobj),this.getEngine().sendDataRefUpdated(5)),this.gen_01_delay_8_buffer=this.gen_01_delay_8_buffer.allocateIfNeeded(),this.gen_01_delay_8_bufferobj.hasRequestedSize()&&(this.gen_01_delay_8_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_8_bufferobj),this.getEngine().sendDataRefUpdated(6)),this.gen_01_delay_7_buffer=this.gen_01_delay_7_buffer.allocateIfNeeded(),this.gen_01_delay_7_bufferobj.hasRequestedSize()&&(this.gen_01_delay_7_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_7_bufferobj),this.getEngine().sendDataRefUpdated(7)),this.gen_01_delay_6_buffer=this.gen_01_delay_6_buffer.allocateIfNeeded(),this.gen_01_delay_6_bufferobj.hasRequestedSize()&&(this.gen_01_delay_6_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_6_bufferobj),this.getEngine().sendDataRefUpdated(8)),this.gen_01_delay_5_buffer=this.gen_01_delay_5_buffer.allocateIfNeeded(),this.gen_01_delay_5_bufferobj.hasRequestedSize()&&(this.gen_01_delay_5_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_5_bufferobj),this.getEngine().sendDataRefUpdated(9)),this.gen_01_delay_4_buffer=this.gen_01_delay_4_buffer.allocateIfNeeded(),this.gen_01_delay_4_bufferobj.hasRequestedSize()&&(this.gen_01_delay_4_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_4_bufferobj),this.getEngine().sendDataRefUpdated(10)),this.gen_01_delay_3_buffer=this.gen_01_delay_3_buffer.allocateIfNeeded(),this.gen_01_delay_3_bufferobj.hasRequestedSize()&&(this.gen_01_delay_3_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_3_bufferobj),this.getEngine().sendDataRefUpdated(11)),this.gen_01_delay_2_buffer=this.gen_01_delay_2_buffer.allocateIfNeeded(),this.gen_01_delay_2_bufferobj.hasRequestedSize()&&(this.gen_01_delay_2_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_2_bufferobj),this.getEngine().sendDataRefUpdated(12)),this.gen_01_delay_1_buffer=this.gen_01_delay_1_buffer.allocateIfNeeded(),this.gen_01_delay_1_bufferobj.hasRequestedSize()&&(this.gen_01_delay_1_bufferobj.wantsFill()&&this.zeroDataRef(this.gen_01_delay_1_bufferobj),this.getEngine().sendDataRefUpdated(13))}initialize(){this.gen_01_delay_12_bufferobj=initDataRef(\"gen_01_delay_12_bufferobj\",!0,null),this.gen_01_delay_11_bufferobj=initDataRef(\"gen_01_delay_11_bufferobj\",!0,null),this.gen_01_delay_10_bufferobj=initDataRef(\"gen_01_delay_10_bufferobj\",!0,null),this.gen_01_delay_9_bufferobj=initDataRef(\"gen_01_delay_9_bufferobj\",!0,null),this.gen_01_delay_8_bufferobj=initDataRef(\"gen_01_delay_8_bufferobj\",!0,null),this.gen_01_delay_7_bufferobj=initDataRef(\"gen_01_delay_7_bufferobj\",!0,null),this.gen_01_delay_6_bufferobj=initDataRef(\"gen_01_delay_6_bufferobj\",!0,null),this.gen_01_delay_5_bufferobj=initDataRef(\"gen_01_delay_5_bufferobj\",!0,null),this.gen_01_delay_4_bufferobj=initDataRef(\"gen_01_delay_4_bufferobj\",!0,null),this.gen_01_delay_3_bufferobj=initDataRef(\"gen_01_delay_3_bufferobj\",!0,null),this.gen_01_delay_2_bufferobj=initDataRef(\"gen_01_delay_2_bufferobj\",!0,null),this.gen_01_delay_1_bufferobj=initDataRef(\"gen_01_delay_1_bufferobj\",!0,null),this.assign_defaults(),this.setState(),this.mtof_tilde_01_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.gen_01_delay_12_bufferobj.setIndex(2),this.gen_01_delay_12_buffer=new Float64Buffer(this.gen_01_delay_12_bufferobj),this.gen_01_delay_11_bufferobj.setIndex(3),this.gen_01_delay_11_buffer=new Float64Buffer(this.gen_01_delay_11_bufferobj),this.gen_01_delay_10_bufferobj.setIndex(4),this.gen_01_delay_10_buffer=new Float64Buffer(this.gen_01_delay_10_bufferobj),this.gen_01_delay_9_bufferobj.setIndex(5),this.gen_01_delay_9_buffer=new Float64Buffer(this.gen_01_delay_9_bufferobj),this.gen_01_delay_8_bufferobj.setIndex(6),this.gen_01_delay_8_buffer=new Float64Buffer(this.gen_01_delay_8_bufferobj),this.gen_01_delay_7_bufferobj.setIndex(7),this.gen_01_delay_7_buffer=new Float64Buffer(this.gen_01_delay_7_bufferobj),this.gen_01_delay_6_bufferobj.setIndex(8),this.gen_01_delay_6_buffer=new Float64Buffer(this.gen_01_delay_6_bufferobj),this.gen_01_delay_5_bufferobj.setIndex(9),this.gen_01_delay_5_buffer=new Float64Buffer(this.gen_01_delay_5_bufferobj),this.gen_01_delay_4_bufferobj.setIndex(10),this.gen_01_delay_4_buffer=new Float64Buffer(this.gen_01_delay_4_bufferobj),this.gen_01_delay_3_bufferobj.setIndex(11),this.gen_01_delay_3_buffer=new Float64Buffer(this.gen_01_delay_3_bufferobj),this.gen_01_delay_2_bufferobj.setIndex(12),this.gen_01_delay_2_buffer=new Float64Buffer(this.gen_01_delay_2_bufferobj),this.gen_01_delay_1_bufferobj.setIndex(13),this.gen_01_delay_1_buffer=new Float64Buffer(this.gen_01_delay_1_bufferobj)}param_06_value_constrain(e){e=e>3?3:e<0?0:e;{const t=1;e=1*rnbo_fround(e*(0!=t?1/t:0)*1/1)*t}return e}mtof_tilde_01_scale_set(e){this.mtof_tilde_01_scale=jsCreateListCopy(e),this.mtof_tilde_01_innerScala_updateScale(e)}scalascale_01_out_set(e){this.mtof_tilde_01_scale_set(e)}scalascale_01_input_number_set(e){this.scalascale_01_input_number=e;const t=e>this.scalascale_01_lengths.length?this.scalascale_01_lengths.length:e<0?0:e,_=this.scalascale_01_offsets[t],i=this.scalascale_01_lengths[t]+_;this.scalascale_01_current=this.scalascale_01_data.slice(_,i),this.scalascale_01_out_set(this.scalascale_01_current)}param_07_value_constrain(e){e=e>2?2:e<0?0:e;{const t=1;e=1*rnbo_fround(e*(0!=t?1/t:0)*1/1)*t}return e}selector_03_onoff_set(e){this.selector_03_onoff=e}expr_02_out1_set(e){this.expr_02_out1=e,this.selector_03_onoff_set(this.expr_02_out1)}expr_02_in1_set(e){this.expr_02_in1=e,this.expr_02_out1_set(this.expr_02_in1+this.expr_02_in2)}param_08_value_constrain(e){return e=e>1e4?1e4:e<0?0:e}ip_02_value_set(e){this.ip_02_value=e,this.ip_02_fillSigBuf(),this.ip_02_lastValue=e}param_09_value_constrain(e){return e=e>1?1:e<0?0:e}ip_03_value_set(e){this.ip_03_value=e,this.ip_03_fillSigBuf(),this.ip_03_lastValue=e}param_10_value_constrain(e){return e=e>300?300:e<.1?.1:e}gen_01_roomsize_constrain(e){return e<.1&&(e=.1),e>300&&(e=300),e}gen_01_roomsize_set(e){e=this.gen_01_roomsize_constrain(e),this.gen_01_roomsize=e}param_11_value_constrain(e){return e=e>1?1:e<0?0:e}gen_01_dry_constrain(e){return e<0&&(e=0),e>1&&(e=1),e}gen_01_dry_set(e){e=this.gen_01_dry_constrain(e),this.gen_01_dry=e}notein_01_outchannel_set(e){}notein_01_releasevelocity_set(e){}ip_04_value_set(e){this.ip_04_value=e,this.ip_04_fillSigBuf(),this.ip_04_lastValue=e}notein_01_velocity_set(e){this.ip_04_value_set(e)}mtof_tilde_01_midivalue_set(e){this.mtof_tilde_01_midivalue=e}notein_01_notenumber_set(e){this.mtof_tilde_01_midivalue_set(e)}notein_01_midihandler(e,t,_,i,s){RNBO_UNUSED(s),RNBO_UNUSED(_),t!=this.notein_01_channel&&0!=this.notein_01_channel||144!=e&&128!=e||(this.notein_01_outchannel_set(t),128==e?(this.notein_01_releasevelocity_set(i[2]),this.notein_01_velocity_set(0)):(this.notein_01_releasevelocity_set(0),this.notein_01_velocity_set(i[2])),this.notein_01_notenumber_set(i[1]))}midiouthelper_midiout_set(e){}mtof_tilde_01_perform(e,t,_){for(var i=0;i<_;i++)t[i]=this.mtof_tilde_01_innerScala_mtof(e)}p_01_perform(e,t,_,i,s,a){var r=[e,t,_],l=[i,s];this.p_01.process(r,3,l,2,a)}ip_02_perform(e,t){for(var _=this.ip_02_sigbuf,i=this.ip_02_lastValue,s=this.ip_02_lastIndex,a=0;a<t;a++)e[a]=a>=s?i:_[a];s=0,this.ip_02_lastIndex=s}gen_01_perform(e,t,_,i,s,a,r,l,o,n,h,f,c){RNBO_UNUSED(n),RNBO_UNUSED(l),RNBO_UNUSED(a),RNBO_UNUSED(s),RNBO_UNUSED(i),RNBO_UNUSED(_),RNBO_UNUSED(t),RNBO_UNUSED(e);var p=this.gen_01_history_17_value,d=this.gen_01_history_16_value,u=this.gen_01_history_15_value,m=this.gen_01_history_14_value,g=this.gen_01_history_13_value;let y=o*this.samplerate()/340,b=.7071*y,v=.63245*y,S=1*y,N=.81649*y,P=y+5,x=0*r,I=.3*y+5,T=.41*y+5,w=0*r,E=.155*y+5,O=527e-6*y,D=this.intnum(O),z=418.750235*D,B=401.337671*D,V=.110732*y,M=566.322183*D,k=567.7748859999999*D,R=145.927582*D,A=161.887443*D;var C;for(C=0;C<c;C++){let e=fixnan(rnbo_pow(.001,11*this.samplerate()==0?0:1/(11*this.samplerate()))),t=-fixnan(rnbo_pow(e,b)),_=-fixnan(rnbo_pow(e,v)),i=-fixnan(rnbo_pow(e,S)),s=-fixnan(rnbo_pow(e,N)),a=fixnan(rnbo_pow(e,P)),r=fixnan(rnbo_pow(e,I)),l=fixnan(rnbo_pow(e,T)),o=0+.5*(g-0),n=fixnan(rnbo_pow(e,E)),c=this.gen_01_delay_1_read(b,0)*t,y=c+.7*(m-c),O=this.gen_01_delay_2_read(N,0)*s,D=O+.7*(u-O),U=this.gen_01_delay_3_read(S,0)*i,F=U+.7*(d-U),j=this.gen_01_delay_4_read(v,0)*_,q=j+.7*(p-j),L=this.gen_01_delay_5_read(T,0),X=this.gen_01_delay_5_read(I,0),K=this.gen_01_delay_5_read(E,0)*n,Z=X*r,H=L*l,Q=this.gen_01_delay_5_read(P,0)*a,W=this.gen_01_delay_6_read(z,0),G=.625*W,J=this.gen_01_delay_7_read(B,0),Y=.625*J,$=F-D,ee=y-q,te=.5*($-ee),_e=te+Z,ie=.5*(0-($+ee)),se=ie+K,ae=F+D,re=y+q,le=.5*(ae-re),oe=le+H,ne=.5*(ae+re),he=ne+Q,fe=this.gen_01_delay_8_read(V,0),ce=this.gen_01_delay_9_read(M,0),pe=.625*ce,de=this.gen_01_delay_10_read(k,0),ue=.625*de,me=o-.75*fe,ge=.75*me+fe,ye=this.gen_01_delay_11_read(R,0),be=.75*ye,ve=this.gen_01_delay_12_read(A,0),Se=.75*ve,Ne=.25*le+.25*ie-(.25*te+.25*ne)+(.25*H+.25*K-(.25*Z+.25*Q)),Pe=Ne+0-be,xe=.75*Pe+ye-pe,Ie=.625*xe+ce-G,Te=.625*Ie+W;f[C]=Te+x;let we=Ne+0-Se,Ee=.75*we+ve-ue,Oe=.625*Ee+de-Y,De=.625*Oe+J;h[C]=De+w;let ze=fixdenorm(o),Be=fixdenorm(y),Ve=fixdenorm(D),Me=fixdenorm(F),ke=fixdenorm(q);this.gen_01_delay_1_write(se),p=ke,d=Me,u=Ve,m=Be,g=ze,this.gen_01_delay_12_write(we),this.gen_01_delay_11_write(Pe),this.gen_01_delay_10_write(Ee),this.gen_01_delay_9_write(xe),this.gen_01_delay_8_write(me),this.gen_01_delay_7_write(Oe),this.gen_01_delay_6_write(Ie),this.gen_01_delay_5_write(ge),this.gen_01_delay_4_write(he),this.gen_01_delay_3_write(oe),this.gen_01_delay_2_write(_e),this.gen_01_delay_12_step(),this.gen_01_delay_11_step(),this.gen_01_delay_10_step(),this.gen_01_delay_9_step(),this.gen_01_delay_8_step(),this.gen_01_delay_7_step(),this.gen_01_delay_6_step(),this.gen_01_delay_5_step(),this.gen_01_delay_4_step(),this.gen_01_delay_3_step(),this.gen_01_delay_2_step(),this.gen_01_delay_1_step()}this.gen_01_history_13_value=g,this.gen_01_history_14_value=m,this.gen_01_history_15_value=u,this.gen_01_history_16_value=d,this.gen_01_history_17_value=p}ip_03_perform(e,t){for(var _=this.ip_03_sigbuf,i=this.ip_03_lastValue,s=this.ip_03_lastIndex,a=0;a<t;a++)e[a]=a>=s?i:_[a];s=0,this.ip_03_lastIndex=s}ip_04_perform(e,t){for(var _=this.ip_04_sigbuf,i=this.ip_04_lastValue,s=this.ip_04_lastIndex,a=0;a<t;a++)e[a]=a>=s?i:_[a];s=0,this.ip_04_lastIndex=s}dspexpr_04_perform(e,t,_,i){var s;for(RNBO_UNUSED(t),s=0;s<i;s++)_[s]=e[s]>0}p_02_perform(e,t,_,i,s){var a=[e,t],r=[_,i];this.p_02.process(a,2,r,2,s)}p_03_perform(e,t,_,i,s){var a=[e,t,_],r=[i];this.p_03.process(a,3,r,1,s)}p_04_perform(e,t,_,i,s){var a=[e,t,_],r=[i];this.p_04.process(a,3,r,1,s)}selector_03_perform(e,t,_,i,s,a){var r;for(r=0;r<a;r++)s[r]=e>=1&&e<2?t[r]:e>=2&&e<3?_[r]:e>=3&&e<4?i[r]:0}latch_tilde_01_perform(e,t,_,i){var s,a=this.latch_tilde_01_value;for(s=0;s<i;s++)0!=t[s]&&(a=e[s]),_[s]=a;this.latch_tilde_01_value=a}dspexpr_03_perform(e,t,_,i){var s;for(RNBO_UNUSED(t),s=0;s<i;s++)_[s]=e[s]/127}dspexpr_02_perform(e,t,_,i){var s;for(s=0;s<i;s++)_[s]=e[s]*t[s]}signaladder_01_perform(e,t,_,i){var s;for(s=0;s<i;s++)_[s]=e[s]+t[s]}signaladder_02_perform(e,t,_,i){var s;for(s=0;s<i;s++)_[s]=e[s]+t[s]}stackprotect_perform(e){RNBO_UNUSED(e);this.stackprotect_count;this.stackprotect_count=0}p_02_out3_bang_bang(){}param_06_getPresetValue(e){e.value=this.param_06_value}param_06_setPresetValue(e){stateIsEmpty(e)||this.param_06_value_set(e.value)}param_07_getPresetValue(e){e.value=this.param_07_value}param_07_setPresetValue(e){stateIsEmpty(e)||this.param_07_value_set(e.value)}mtof_tilde_01_innerMtoF_next(e,t){if(e==this.mtof_tilde_01_innerMtoF_lastInValue&&t==this.mtof_tilde_01_innerMtoF_lastTuning)return this.mtof_tilde_01_innerMtoF_lastOutValue;this.mtof_tilde_01_innerMtoF_lastInValue=e,this.mtof_tilde_01_innerMtoF_lastTuning=t;let _=0;return _=rnbo_exp(.057762265*(e-69)),this.mtof_tilde_01_innerMtoF_lastOutValue=t*_,this.mtof_tilde_01_innerMtoF_lastOutValue}mtof_tilde_01_innerMtoF_reset(){this.mtof_tilde_01_innerMtoF_lastInValue=0,this.mtof_tilde_01_innerMtoF_lastOutValue=0,this.mtof_tilde_01_innerMtoF_lastTuning=0}mtof_tilde_01_innerScala_mid(e){this.mtof_tilde_01_innerScala_kbmMid=e,this.mtof_tilde_01_innerScala_updateRefFreq()}mtof_tilde_01_innerScala_ref(e){this.mtof_tilde_01_innerScala_kbmRefNum=e,this.mtof_tilde_01_innerScala_updateRefFreq()}mtof_tilde_01_innerScala_base(e){this.mtof_tilde_01_innerScala_kbmRefFreq=e,this.mtof_tilde_01_innerScala_updateRefFreq()}mtof_tilde_01_innerScala_init(){this.mtof_tilde_01_innerScala_updateScale([12,100,0,200,0,300,0,400,0,500,0,600,0,700,0,800,0,900,0,1e3,0,1100,0,2,1])}mtof_tilde_01_innerScala_update(e,t){e.length>0&&this.mtof_tilde_01_innerScala_updateScale(e),t.length>0&&this.mtof_tilde_01_innerScala_updateMap(t)}mtof_tilde_01_innerScala_mtof(e){if(this.mtof_tilde_01_innerScala_lastValid&&this.mtof_tilde_01_innerScala_lastNote==e)return this.mtof_tilde_01_innerScala_lastFreq;let t=this.mtof_tilde_01_innerScala_applyKBM(e),_=0;return t[1]>0&&(_=this.mtof_tilde_01_innerScala_applySCL(t[0],fract(e),this.mtof_tilde_01_innerScala_refFreq)),this.mtof_tilde_01_innerScala_updateLast(e,_),_}mtof_tilde_01_innerScala_ftom(e){if(this.mtof_tilde_01_innerScala_lastValid&&this.mtof_tilde_01_innerScala_lastFreq==e)return this.mtof_tilde_01_innerScala_lastNote;let t=this.mtof_tilde_01_innerScala_hztodeg(e),_=t[0],i=t[1],s=0;if(0==this.mtof_tilde_01_innerScala_kbmSize)s=this.mtof_tilde_01_innerScala_kbmMid+_;else{let e=this.mtof_tilde_01_innerScala_octdegree(_,this.mtof_tilde_01_innerScala_kbmOctaveDegree),t=e[0],i=e[1],r=0;for(var a=0;a<this.mtof_tilde_01_innerScala_kbmMapSize;a++)if(i==this.mtof_tilde_01_innerScala_kbmValid[a+this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET]){r=a;break}s=t*this.mtof_tilde_01_innerScala_kbmSize+r+this.mtof_tilde_01_innerScala_kbmMid}return s+=i,this.mtof_tilde_01_innerScala_updateLast(s,e),s}mtof_tilde_01_innerScala_updateScale(e){if(e.length>1&&2*e[0]+1==e.length){this.mtof_tilde_01_innerScala_lastValid=!1,this.mtof_tilde_01_innerScala_sclExpMul=[];let _=1;for(var t=1;t<e.length;t+=2){const i=e[t+0],s=e[t+1];_=s<=0?i/1200:rnbo_log2(i/s),this.mtof_tilde_01_innerScala_sclExpMul.push(_)}return this.mtof_tilde_01_innerScala_sclOctaveMul=_,this.mtof_tilde_01_innerScala_sclEntryCount=this.mtof_tilde_01_innerScala_sclExpMul.length,this.mtof_tilde_01_innerScala_updateRefFreq(),1}return 0}mtof_tilde_01_innerScala_updateMap(e){if(1==e.length&&0==e[0]&&(e=[0,0,0,60,69,440]),e.length>=6&&e[0]>=0){this.mtof_tilde_01_innerScala_lastValid=!1;let t=e[0],_=12;return e.length>6&&(_=e[6]),t>0&&e.length<this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET?0:(this.mtof_tilde_01_innerScala_kbmSize=t,this.mtof_tilde_01_innerScala_kbmMin=e[1],this.mtof_tilde_01_innerScala_kbmMax=e[2],this.mtof_tilde_01_innerScala_kbmMid=e[3],this.mtof_tilde_01_innerScala_kbmRefNum=e[4],this.mtof_tilde_01_innerScala_kbmRefFreq=e[5],this.mtof_tilde_01_innerScala_kbmOctaveDegree=_,this.mtof_tilde_01_innerScala_kbmValid=e,this.mtof_tilde_01_innerScala_kbmMapSize=e.length-this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET>e.length?e.length:e.length-this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET<0?0:e.length-this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET,this.mtof_tilde_01_innerScala_updateRefFreq(),1)}return 0}mtof_tilde_01_innerScala_updateLast(e,t){this.mtof_tilde_01_innerScala_lastValid=!0,this.mtof_tilde_01_innerScala_lastNote=e,this.mtof_tilde_01_innerScala_lastFreq=t}mtof_tilde_01_innerScala_hztodeg(e){let t=rnbo_abs(e),_=rnbo_floor(rnbo_log2(t/this.mtof_tilde_01_innerScala_refFreq)/this.mtof_tilde_01_innerScala_sclOctaveMul);var i=0;let s=0,a=0;for(;i<this.mtof_tilde_01_innerScala_sclEntryCount;i++){let e=this.mtof_tilde_01_innerScala_applySCLOctIndex(_,i+0,0,this.mtof_tilde_01_innerScala_refFreq);if(a=this.mtof_tilde_01_innerScala_applySCLOctIndex(_,i+1,0,this.mtof_tilde_01_innerScala_refFreq),e<=t&&t<a){e!=t&&(s=rnbo_log2(t/e)/rnbo_log2(a/e));break}}if(i==this.mtof_tilde_01_innerScala_sclEntryCount&&a!=t){let e=a;a=this.mtof_tilde_01_innerScala_applySCLOctIndex(_+1,0,0,this.mtof_tilde_01_innerScala_refFreq),s=rnbo_log2(t/e)/rnbo_log2(a/e)}return[i+_*this.mtof_tilde_01_innerScala_sclEntryCount,s]}mtof_tilde_01_innerScala_octdegree(e,t){let _=0,i=0;return e<0?(_=-(1+(-1-e)/t),i=-e%t,i>0&&(i=t-i)):(_=e/t,i=e%t),[_,i]}mtof_tilde_01_innerScala_applyKBM(e){if(this.mtof_tilde_01_innerScala_kbmMin==this.mtof_tilde_01_innerScala_kbmMax&&0==this.mtof_tilde_01_innerScala_kbmMax||e>=this.mtof_tilde_01_innerScala_kbmMin&&e<=this.mtof_tilde_01_innerScala_kbmMax){let t=rnbo_floor(e-this.mtof_tilde_01_innerScala_kbmMid);if(0==this.mtof_tilde_01_innerScala_kbmSize)return[t,1];let _=this.mtof_tilde_01_innerScala_octdegree(t,this.mtof_tilde_01_innerScala_kbmSize),i=_[0],s=_[1];if(this.mtof_tilde_01_innerScala_kbmMapSize>s&&(t=this.mtof_tilde_01_innerScala_kbmValid[this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET+s],t>=0))return[t+i*this.mtof_tilde_01_innerScala_kbmOctaveDegree,1]}return[-1,0]}mtof_tilde_01_innerScala_applySCL(e,t,_){let i=this.mtof_tilde_01_innerScala_octdegree(e,this.mtof_tilde_01_innerScala_sclEntryCount);return this.mtof_tilde_01_innerScala_applySCLOctIndex(i[0],i[1],t,_)}mtof_tilde_01_innerScala_applySCLOctIndex(e,t,_,i){let s=0;return t>0&&(s=this.mtof_tilde_01_innerScala_sclExpMul[t-1]),_>0?s=this.linearinterp(_,s,this.mtof_tilde_01_innerScala_sclExpMul[t]):_<0&&(s=this.linearinterp(-_,this.mtof_tilde_01_innerScala_sclExpMul[t],s)),i*rnbo_pow(2,s+e*this.mtof_tilde_01_innerScala_sclOctaveMul)}mtof_tilde_01_innerScala_updateRefFreq(){this.mtof_tilde_01_innerScala_lastValid=!1;let e=this.mtof_tilde_01_innerScala_kbmRefNum-this.mtof_tilde_01_innerScala_kbmMid;if(0==e)this.mtof_tilde_01_innerScala_refFreq=this.mtof_tilde_01_innerScala_kbmRefFreq;else{let t=this.mtof_tilde_01_innerScala_kbmSize;t<1&&(t=this.mtof_tilde_01_innerScala_sclEntryCount);let _=this.mtof_tilde_01_innerScala_octdegree(e,t),i=_[1];if(i>=0&&i+this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET<this.mtof_tilde_01_innerScala_kbmValid.length&&(i=this.mtof_tilde_01_innerScala_kbmValid[i+this.mtof_tilde_01_innerScala_KBM_MAP_OFFSET]),i<0);else{let e=_[0],t=0;i>0&&(t=this.mtof_tilde_01_innerScala_sclExpMul[i-1]),this.mtof_tilde_01_innerScala_refFreq=this.mtof_tilde_01_innerScala_kbmRefFreq/rnbo_pow(2,t+e)}}}mtof_tilde_01_innerScala_reset(){this.mtof_tilde_01_innerScala_internal=!0,this.mtof_tilde_01_innerScala_lastValid=!1,this.mtof_tilde_01_innerScala_lastNote=0,this.mtof_tilde_01_innerScala_lastFreq=0,this.mtof_tilde_01_innerScala_sclEntryCount=0,this.mtof_tilde_01_innerScala_sclOctaveMul=1,this.mtof_tilde_01_innerScala_sclExpMul=[],this.mtof_tilde_01_innerScala_kbmValid=[0,0,0,60,69,440],this.mtof_tilde_01_innerScala_kbmMid=60,this.mtof_tilde_01_innerScala_kbmRefNum=69,this.mtof_tilde_01_innerScala_kbmRefFreq=440,this.mtof_tilde_01_innerScala_kbmSize=0,this.mtof_tilde_01_innerScala_kbmMin=0,this.mtof_tilde_01_innerScala_kbmMax=0,this.mtof_tilde_01_innerScala_kbmOctaveDegree=12,this.mtof_tilde_01_innerScala_kbmMapSize=0,this.mtof_tilde_01_innerScala_refFreq=261.63}mtof_tilde_01_init(){this.mtof_tilde_01_innerScala_update(this.mtof_tilde_01_scale,this.mtof_tilde_01_map)}param_08_getPresetValue(e){e.value=this.param_08_value}param_08_setPresetValue(e){stateIsEmpty(e)||this.param_08_value_set(e.value)}ip_02_fillSigBuf(){if(this.ip_02_sigbuf){var e=this.sampleOffsetIntoNextAudioBuffer;e>=this.vs&&(e=this.vs-1);for(var t=this.ip_02_lastIndex;t<e;t++)this.ip_02_resetCount>0?(this.ip_02_sigbuf[t]=1,this.ip_02_resetCount--):this.ip_02_sigbuf[t]=this.ip_02_lastValue;this.ip_02_lastIndex=e}}ip_02_dspsetup(e){this.ip_02_setupDone&&!e||(this.ip_02_lastIndex=0,this.ip_02_setupDone=!0)}gen_01_history_17_getvalue(){return this.gen_01_history_17_value}gen_01_history_17_setvalue(e){this.gen_01_history_17_value=e}gen_01_history_17_reset(){this.gen_01_history_17_value=0}gen_01_history_17_init(){this.gen_01_history_17_value=0}gen_01_history_16_getvalue(){return this.gen_01_history_16_value}gen_01_history_16_setvalue(e){this.gen_01_history_16_value=e}gen_01_history_16_reset(){this.gen_01_history_16_value=0}gen_01_history_16_init(){this.gen_01_history_16_value=0}gen_01_history_15_getvalue(){return this.gen_01_history_15_value}gen_01_history_15_setvalue(e){this.gen_01_history_15_value=e}gen_01_history_15_reset(){this.gen_01_history_15_value=0}gen_01_history_15_init(){this.gen_01_history_15_value=0}gen_01_history_14_getvalue(){return this.gen_01_history_14_value}gen_01_history_14_setvalue(e){this.gen_01_history_14_value=e}gen_01_history_14_reset(){this.gen_01_history_14_value=0}gen_01_history_14_init(){this.gen_01_history_14_value=0}gen_01_history_13_getvalue(){return this.gen_01_history_13_value}gen_01_history_13_setvalue(e){this.gen_01_history_13_value=e}gen_01_history_13_reset(){this.gen_01_history_13_value=0}gen_01_history_13_init(){this.gen_01_history_13_value=0}gen_01_delay_12_step(){this.gen_01_delay_12_reader++,this.gen_01_delay_12_reader>=this.gen_01_delay_12_buffer.getSize()&&(this.gen_01_delay_12_reader=0)}gen_01_delay_12_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_12_buffer.getSize()+this.gen_01_delay_12_reader-(e>this.gen_01_delay_12__maxdelay?this.gen_01_delay_12__maxdelay:e<(this.gen_01_delay_12_reader!=this.gen_01_delay_12_writer)?this.gen_01_delay_12_reader!=this.gen_01_delay_12_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_12_buffer.getSample(0,i&this.gen_01_delay_12_wrap),this.gen_01_delay_12_buffer.getSample(0,a&this.gen_01_delay_12_wrap))}gen_01_delay_12_write(e){this.gen_01_delay_12_writer=this.gen_01_delay_12_reader,this.gen_01_delay_12_buffer[this.gen_01_delay_12_writer]=e}gen_01_delay_12_next(e,t){var _=-1==t?this.gen_01_delay_12__maxdelay:t,i=this.gen_01_delay_12_read(_,0);return this.gen_01_delay_12_write(e),this.gen_01_delay_12_step(),i}gen_01_delay_12_init(){let e=0;if(e=this.gen_01_delay_12_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_12_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_12__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_12_buffer.requestSize(t,1),this.gen_01_delay_12_wrap=t-1}}gen_01_delay_12_clear(){this.gen_01_delay_12_buffer.setZero()}gen_01_delay_12_reset(){this.gen_01_delay_12_init(),this.gen_01_delay_12_clear(),(this.gen_01_delay_12_reader>=this.gen_01_delay_12__maxdelay||this.gen_01_delay_12_writer>=this.gen_01_delay_12__maxdelay)&&(this.gen_01_delay_12_reader=0,this.gen_01_delay_12_writer=0)}gen_01_delay_12_dspsetup(){this.gen_01_delay_12_reset()}gen_01_delay_12_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),5e3}gen_01_delay_12_size(){return this.gen_01_delay_12__maxdelay}gen_01_delay_11_step(){this.gen_01_delay_11_reader++,this.gen_01_delay_11_reader>=this.gen_01_delay_11_buffer.getSize()&&(this.gen_01_delay_11_reader=0)}gen_01_delay_11_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_11_buffer.getSize()+this.gen_01_delay_11_reader-(e>this.gen_01_delay_11__maxdelay?this.gen_01_delay_11__maxdelay:e<(this.gen_01_delay_11_reader!=this.gen_01_delay_11_writer)?this.gen_01_delay_11_reader!=this.gen_01_delay_11_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_11_buffer.getSample(0,i&this.gen_01_delay_11_wrap),this.gen_01_delay_11_buffer.getSample(0,a&this.gen_01_delay_11_wrap))}gen_01_delay_11_write(e){this.gen_01_delay_11_writer=this.gen_01_delay_11_reader,this.gen_01_delay_11_buffer[this.gen_01_delay_11_writer]=e}gen_01_delay_11_next(e,t){var _=-1==t?this.gen_01_delay_11__maxdelay:t,i=this.gen_01_delay_11_read(_,0);return this.gen_01_delay_11_write(e),this.gen_01_delay_11_step(),i}gen_01_delay_11_init(){let e=0;if(e=this.gen_01_delay_11_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_11_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_11__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_11_buffer.requestSize(t,1),this.gen_01_delay_11_wrap=t-1}}gen_01_delay_11_clear(){this.gen_01_delay_11_buffer.setZero()}gen_01_delay_11_reset(){this.gen_01_delay_11_init(),this.gen_01_delay_11_clear(),(this.gen_01_delay_11_reader>=this.gen_01_delay_11__maxdelay||this.gen_01_delay_11_writer>=this.gen_01_delay_11__maxdelay)&&(this.gen_01_delay_11_reader=0,this.gen_01_delay_11_writer=0)}gen_01_delay_11_dspsetup(){this.gen_01_delay_11_reset()}gen_01_delay_11_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),7e3}gen_01_delay_11_size(){return this.gen_01_delay_11__maxdelay}gen_01_delay_10_step(){this.gen_01_delay_10_reader++,this.gen_01_delay_10_reader>=this.gen_01_delay_10_buffer.getSize()&&(this.gen_01_delay_10_reader=0)}gen_01_delay_10_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_10_buffer.getSize()+this.gen_01_delay_10_reader-(e>this.gen_01_delay_10__maxdelay?this.gen_01_delay_10__maxdelay:e<(this.gen_01_delay_10_reader!=this.gen_01_delay_10_writer)?this.gen_01_delay_10_reader!=this.gen_01_delay_10_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_10_buffer.getSample(0,i&this.gen_01_delay_10_wrap),this.gen_01_delay_10_buffer.getSample(0,a&this.gen_01_delay_10_wrap))}gen_01_delay_10_write(e){this.gen_01_delay_10_writer=this.gen_01_delay_10_reader,this.gen_01_delay_10_buffer[this.gen_01_delay_10_writer]=e}gen_01_delay_10_next(e,t){var _=-1==t?this.gen_01_delay_10__maxdelay:t,i=this.gen_01_delay_10_read(_,0);return this.gen_01_delay_10_write(e),this.gen_01_delay_10_step(),i}gen_01_delay_10_init(){let e=0;if(e=this.gen_01_delay_10_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_10_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_10__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_10_buffer.requestSize(t,1),this.gen_01_delay_10_wrap=t-1}}gen_01_delay_10_clear(){this.gen_01_delay_10_buffer.setZero()}gen_01_delay_10_reset(){this.gen_01_delay_10_init(),this.gen_01_delay_10_clear(),(this.gen_01_delay_10_reader>=this.gen_01_delay_10__maxdelay||this.gen_01_delay_10_writer>=this.gen_01_delay_10__maxdelay)&&(this.gen_01_delay_10_reader=0,this.gen_01_delay_10_writer=0)}gen_01_delay_10_dspsetup(){this.gen_01_delay_10_reset()}gen_01_delay_10_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),15e3}gen_01_delay_10_size(){return this.gen_01_delay_10__maxdelay}gen_01_delay_9_step(){this.gen_01_delay_9_reader++,this.gen_01_delay_9_reader>=this.gen_01_delay_9_buffer.getSize()&&(this.gen_01_delay_9_reader=0)}gen_01_delay_9_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_9_buffer.getSize()+this.gen_01_delay_9_reader-(e>this.gen_01_delay_9__maxdelay?this.gen_01_delay_9__maxdelay:e<(this.gen_01_delay_9_reader!=this.gen_01_delay_9_writer)?this.gen_01_delay_9_reader!=this.gen_01_delay_9_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_9_buffer.getSample(0,i&this.gen_01_delay_9_wrap),this.gen_01_delay_9_buffer.getSample(0,a&this.gen_01_delay_9_wrap))}gen_01_delay_9_write(e){this.gen_01_delay_9_writer=this.gen_01_delay_9_reader,this.gen_01_delay_9_buffer[this.gen_01_delay_9_writer]=e}gen_01_delay_9_next(e,t){var _=-1==t?this.gen_01_delay_9__maxdelay:t,i=this.gen_01_delay_9_read(_,0);return this.gen_01_delay_9_write(e),this.gen_01_delay_9_step(),i}gen_01_delay_9_init(){let e=0;if(e=this.gen_01_delay_9_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_9_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_9__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_9_buffer.requestSize(t,1),this.gen_01_delay_9_wrap=t-1}}gen_01_delay_9_clear(){this.gen_01_delay_9_buffer.setZero()}gen_01_delay_9_reset(){this.gen_01_delay_9_init(),this.gen_01_delay_9_clear(),(this.gen_01_delay_9_reader>=this.gen_01_delay_9__maxdelay||this.gen_01_delay_9_writer>=this.gen_01_delay_9__maxdelay)&&(this.gen_01_delay_9_reader=0,this.gen_01_delay_9_writer=0)}gen_01_delay_9_dspsetup(){this.gen_01_delay_9_reset()}gen_01_delay_9_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),16e3}gen_01_delay_9_size(){return this.gen_01_delay_9__maxdelay}gen_01_delay_8_step(){this.gen_01_delay_8_reader++,this.gen_01_delay_8_reader>=this.gen_01_delay_8_buffer.getSize()&&(this.gen_01_delay_8_reader=0)}gen_01_delay_8_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_8_buffer.getSize()+this.gen_01_delay_8_reader-(e>this.gen_01_delay_8__maxdelay?this.gen_01_delay_8__maxdelay:e<(this.gen_01_delay_8_reader!=this.gen_01_delay_8_writer)?this.gen_01_delay_8_reader!=this.gen_01_delay_8_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_8_buffer.getSample(0,i&this.gen_01_delay_8_wrap),this.gen_01_delay_8_buffer.getSample(0,a&this.gen_01_delay_8_wrap))}gen_01_delay_8_write(e){this.gen_01_delay_8_writer=this.gen_01_delay_8_reader,this.gen_01_delay_8_buffer[this.gen_01_delay_8_writer]=e}gen_01_delay_8_next(e,t){var _=-1==t?this.gen_01_delay_8__maxdelay:t,i=this.gen_01_delay_8_read(_,0);return this.gen_01_delay_8_write(e),this.gen_01_delay_8_step(),i}gen_01_delay_8_init(){let e=0;if(e=this.gen_01_delay_8_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_8_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_8__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_8_buffer.requestSize(t,1),this.gen_01_delay_8_wrap=t-1}}gen_01_delay_8_clear(){this.gen_01_delay_8_buffer.setZero()}gen_01_delay_8_reset(){this.gen_01_delay_8_init(),this.gen_01_delay_8_clear(),(this.gen_01_delay_8_reader>=this.gen_01_delay_8__maxdelay||this.gen_01_delay_8_writer>=this.gen_01_delay_8__maxdelay)&&(this.gen_01_delay_8_reader=0,this.gen_01_delay_8_writer=0)}gen_01_delay_8_dspsetup(){this.gen_01_delay_8_reset()}gen_01_delay_8_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),6e3}gen_01_delay_8_size(){return this.gen_01_delay_8__maxdelay}gen_01_delay_7_step(){this.gen_01_delay_7_reader++,this.gen_01_delay_7_reader>=this.gen_01_delay_7_buffer.getSize()&&(this.gen_01_delay_7_reader=0)}gen_01_delay_7_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_7_buffer.getSize()+this.gen_01_delay_7_reader-(e>this.gen_01_delay_7__maxdelay?this.gen_01_delay_7__maxdelay:e<(this.gen_01_delay_7_reader!=this.gen_01_delay_7_writer)?this.gen_01_delay_7_reader!=this.gen_01_delay_7_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_7_buffer.getSample(0,i&this.gen_01_delay_7_wrap),this.gen_01_delay_7_buffer.getSample(0,a&this.gen_01_delay_7_wrap))}gen_01_delay_7_write(e){this.gen_01_delay_7_writer=this.gen_01_delay_7_reader,this.gen_01_delay_7_buffer[this.gen_01_delay_7_writer]=e}gen_01_delay_7_next(e,t){var _=-1==t?this.gen_01_delay_7__maxdelay:t,i=this.gen_01_delay_7_read(_,0);return this.gen_01_delay_7_write(e),this.gen_01_delay_7_step(),i}gen_01_delay_7_init(){let e=0;if(e=this.gen_01_delay_7_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_7_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_7__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_7_buffer.requestSize(t,1),this.gen_01_delay_7_wrap=t-1}}gen_01_delay_7_clear(){this.gen_01_delay_7_buffer.setZero()}gen_01_delay_7_reset(){this.gen_01_delay_7_init(),this.gen_01_delay_7_clear(),(this.gen_01_delay_7_reader>=this.gen_01_delay_7__maxdelay||this.gen_01_delay_7_writer>=this.gen_01_delay_7__maxdelay)&&(this.gen_01_delay_7_reader=0,this.gen_01_delay_7_writer=0)}gen_01_delay_7_dspsetup(){this.gen_01_delay_7_reset()}gen_01_delay_7_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),1e4}gen_01_delay_7_size(){return this.gen_01_delay_7__maxdelay}gen_01_delay_6_step(){this.gen_01_delay_6_reader++,this.gen_01_delay_6_reader>=this.gen_01_delay_6_buffer.getSize()&&(this.gen_01_delay_6_reader=0)}gen_01_delay_6_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_6_buffer.getSize()+this.gen_01_delay_6_reader-(e>this.gen_01_delay_6__maxdelay?this.gen_01_delay_6__maxdelay:e<(this.gen_01_delay_6_reader!=this.gen_01_delay_6_writer)?this.gen_01_delay_6_reader!=this.gen_01_delay_6_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_6_buffer.getSample(0,i&this.gen_01_delay_6_wrap),this.gen_01_delay_6_buffer.getSample(0,a&this.gen_01_delay_6_wrap))}gen_01_delay_6_write(e){this.gen_01_delay_6_writer=this.gen_01_delay_6_reader,this.gen_01_delay_6_buffer[this.gen_01_delay_6_writer]=e}gen_01_delay_6_next(e,t){var _=-1==t?this.gen_01_delay_6__maxdelay:t,i=this.gen_01_delay_6_read(_,0);return this.gen_01_delay_6_write(e),this.gen_01_delay_6_step(),i}gen_01_delay_6_init(){let e=0;if(e=this.gen_01_delay_6_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_6_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_6__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_6_buffer.requestSize(t,1),this.gen_01_delay_6_wrap=t-1}}gen_01_delay_6_clear(){this.gen_01_delay_6_buffer.setZero()}gen_01_delay_6_reset(){this.gen_01_delay_6_init(),this.gen_01_delay_6_clear(),(this.gen_01_delay_6_reader>=this.gen_01_delay_6__maxdelay||this.gen_01_delay_6_writer>=this.gen_01_delay_6__maxdelay)&&(this.gen_01_delay_6_reader=0,this.gen_01_delay_6_writer=0)}gen_01_delay_6_dspsetup(){this.gen_01_delay_6_reset()}gen_01_delay_6_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),12e3}gen_01_delay_6_size(){return this.gen_01_delay_6__maxdelay}gen_01_delay_5_step(){this.gen_01_delay_5_reader++,this.gen_01_delay_5_reader>=this.gen_01_delay_5_buffer.getSize()&&(this.gen_01_delay_5_reader=0)}gen_01_delay_5_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_5_buffer.getSize()+this.gen_01_delay_5_reader-(e>this.gen_01_delay_5__maxdelay?this.gen_01_delay_5__maxdelay:e<(this.gen_01_delay_5_reader!=this.gen_01_delay_5_writer)?this.gen_01_delay_5_reader!=this.gen_01_delay_5_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_5_buffer.getSample(0,i&this.gen_01_delay_5_wrap),this.gen_01_delay_5_buffer.getSample(0,a&this.gen_01_delay_5_wrap))}gen_01_delay_5_write(e){this.gen_01_delay_5_writer=this.gen_01_delay_5_reader,this.gen_01_delay_5_buffer[this.gen_01_delay_5_writer]=e}gen_01_delay_5_next(e,t){var _=-1==t?this.gen_01_delay_5__maxdelay:t,i=this.gen_01_delay_5_read(_,0);return this.gen_01_delay_5_write(e),this.gen_01_delay_5_step(),i}gen_01_delay_5_init(){let e=0;if(e=this.gen_01_delay_5_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_5_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_5__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_5_buffer.requestSize(t,1),this.gen_01_delay_5_wrap=t-1}}gen_01_delay_5_clear(){this.gen_01_delay_5_buffer.setZero()}gen_01_delay_5_reset(){this.gen_01_delay_5_init(),this.gen_01_delay_5_clear(),(this.gen_01_delay_5_reader>=this.gen_01_delay_5__maxdelay||this.gen_01_delay_5_writer>=this.gen_01_delay_5__maxdelay)&&(this.gen_01_delay_5_reader=0,this.gen_01_delay_5_writer=0)}gen_01_delay_5_dspsetup(){this.gen_01_delay_5_reset()}gen_01_delay_5_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),48e3}gen_01_delay_5_size(){return this.gen_01_delay_5__maxdelay}gen_01_delay_4_step(){this.gen_01_delay_4_reader++,this.gen_01_delay_4_reader>=this.gen_01_delay_4_buffer.getSize()&&(this.gen_01_delay_4_reader=0)}gen_01_delay_4_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_4_buffer.getSize()+this.gen_01_delay_4_reader-(e>this.gen_01_delay_4__maxdelay?this.gen_01_delay_4__maxdelay:e<(this.gen_01_delay_4_reader!=this.gen_01_delay_4_writer)?this.gen_01_delay_4_reader!=this.gen_01_delay_4_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_4_buffer.getSample(0,i&this.gen_01_delay_4_wrap),this.gen_01_delay_4_buffer.getSample(0,a&this.gen_01_delay_4_wrap))}gen_01_delay_4_write(e){this.gen_01_delay_4_writer=this.gen_01_delay_4_reader,this.gen_01_delay_4_buffer[this.gen_01_delay_4_writer]=e}gen_01_delay_4_next(e,t){var _=-1==t?this.gen_01_delay_4__maxdelay:t,i=this.gen_01_delay_4_read(_,0);return this.gen_01_delay_4_write(e),this.gen_01_delay_4_step(),i}gen_01_delay_4_init(){let e=0;if(e=this.gen_01_delay_4_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_4_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_4__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_4_buffer.requestSize(t,1),this.gen_01_delay_4_wrap=t-1}}gen_01_delay_4_clear(){this.gen_01_delay_4_buffer.setZero()}gen_01_delay_4_reset(){this.gen_01_delay_4_init(),this.gen_01_delay_4_clear(),(this.gen_01_delay_4_reader>=this.gen_01_delay_4__maxdelay||this.gen_01_delay_4_writer>=this.gen_01_delay_4__maxdelay)&&(this.gen_01_delay_4_reader=0,this.gen_01_delay_4_writer=0)}gen_01_delay_4_dspsetup(){this.gen_01_delay_4_reset()}gen_01_delay_4_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),48e3}gen_01_delay_4_size(){return this.gen_01_delay_4__maxdelay}gen_01_delay_3_step(){this.gen_01_delay_3_reader++,this.gen_01_delay_3_reader>=this.gen_01_delay_3_buffer.getSize()&&(this.gen_01_delay_3_reader=0)}gen_01_delay_3_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_3_buffer.getSize()+this.gen_01_delay_3_reader-(e>this.gen_01_delay_3__maxdelay?this.gen_01_delay_3__maxdelay:e<(this.gen_01_delay_3_reader!=this.gen_01_delay_3_writer)?this.gen_01_delay_3_reader!=this.gen_01_delay_3_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_3_buffer.getSample(0,i&this.gen_01_delay_3_wrap),this.gen_01_delay_3_buffer.getSample(0,a&this.gen_01_delay_3_wrap))}gen_01_delay_3_write(e){this.gen_01_delay_3_writer=this.gen_01_delay_3_reader,this.gen_01_delay_3_buffer[this.gen_01_delay_3_writer]=e}gen_01_delay_3_next(e,t){var _=-1==t?this.gen_01_delay_3__maxdelay:t,i=this.gen_01_delay_3_read(_,0);return this.gen_01_delay_3_write(e),this.gen_01_delay_3_step(),i}gen_01_delay_3_init(){let e=0;if(e=this.gen_01_delay_3_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_3_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_3__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_3_buffer.requestSize(t,1),this.gen_01_delay_3_wrap=t-1}}gen_01_delay_3_clear(){this.gen_01_delay_3_buffer.setZero()}gen_01_delay_3_reset(){this.gen_01_delay_3_init(),this.gen_01_delay_3_clear(),(this.gen_01_delay_3_reader>=this.gen_01_delay_3__maxdelay||this.gen_01_delay_3_writer>=this.gen_01_delay_3__maxdelay)&&(this.gen_01_delay_3_reader=0,this.gen_01_delay_3_writer=0)}gen_01_delay_3_dspsetup(){this.gen_01_delay_3_reset()}gen_01_delay_3_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),48e3}gen_01_delay_3_size(){return this.gen_01_delay_3__maxdelay}gen_01_delay_2_step(){this.gen_01_delay_2_reader++,this.gen_01_delay_2_reader>=this.gen_01_delay_2_buffer.getSize()&&(this.gen_01_delay_2_reader=0)}gen_01_delay_2_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_2_buffer.getSize()+this.gen_01_delay_2_reader-(e>this.gen_01_delay_2__maxdelay?this.gen_01_delay_2__maxdelay:e<(this.gen_01_delay_2_reader!=this.gen_01_delay_2_writer)?this.gen_01_delay_2_reader!=this.gen_01_delay_2_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_2_buffer.getSample(0,i&this.gen_01_delay_2_wrap),this.gen_01_delay_2_buffer.getSample(0,a&this.gen_01_delay_2_wrap))}gen_01_delay_2_write(e){this.gen_01_delay_2_writer=this.gen_01_delay_2_reader,this.gen_01_delay_2_buffer[this.gen_01_delay_2_writer]=e}gen_01_delay_2_next(e,t){var _=-1==t?this.gen_01_delay_2__maxdelay:t,i=this.gen_01_delay_2_read(_,0);return this.gen_01_delay_2_write(e),this.gen_01_delay_2_step(),i}gen_01_delay_2_init(){let e=0;if(e=this.gen_01_delay_2_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_2_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_2__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_2_buffer.requestSize(t,1),this.gen_01_delay_2_wrap=t-1}}gen_01_delay_2_clear(){this.gen_01_delay_2_buffer.setZero()}gen_01_delay_2_reset(){this.gen_01_delay_2_init(),this.gen_01_delay_2_clear(),(this.gen_01_delay_2_reader>=this.gen_01_delay_2__maxdelay||this.gen_01_delay_2_writer>=this.gen_01_delay_2__maxdelay)&&(this.gen_01_delay_2_reader=0,this.gen_01_delay_2_writer=0)}gen_01_delay_2_dspsetup(){this.gen_01_delay_2_reset()}gen_01_delay_2_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),48e3}gen_01_delay_2_size(){return this.gen_01_delay_2__maxdelay}gen_01_delay_1_step(){this.gen_01_delay_1_reader++,this.gen_01_delay_1_reader>=this.gen_01_delay_1_buffer.getSize()&&(this.gen_01_delay_1_reader=0)}gen_01_delay_1_read(e,t){RNBO_UNUSED(t);var _,i,s=(_=this.gen_01_delay_1_buffer.getSize()+this.gen_01_delay_1_reader-(e>this.gen_01_delay_1__maxdelay?this.gen_01_delay_1__maxdelay:e<(this.gen_01_delay_1_reader!=this.gen_01_delay_1_writer)?this.gen_01_delay_1_reader!=this.gen_01_delay_1_writer:e))-(i=rnbo_floor(_)),a=i+1;return this.linearinterp(s,this.gen_01_delay_1_buffer.getSample(0,i&this.gen_01_delay_1_wrap),this.gen_01_delay_1_buffer.getSample(0,a&this.gen_01_delay_1_wrap))}gen_01_delay_1_write(e){this.gen_01_delay_1_writer=this.gen_01_delay_1_reader,this.gen_01_delay_1_buffer[this.gen_01_delay_1_writer]=e}gen_01_delay_1_next(e,t){var _=-1==t?this.gen_01_delay_1__maxdelay:t,i=this.gen_01_delay_1_read(_,0);return this.gen_01_delay_1_write(e),this.gen_01_delay_1_step(),i}gen_01_delay_1_init(){let e=0;if(e=this.gen_01_delay_1_evaluateSizeExpr(this.samplerate(),this.vectorsize()),this.gen_01_delay_1_sizemode=0,e=this.maximum(e,2),this.gen_01_delay_1__maxdelay=e,e>0){let t=rnbo_floor(e);t=nextpoweroftwo(t),this.gen_01_delay_1_buffer.requestSize(t,1),this.gen_01_delay_1_wrap=t-1}}gen_01_delay_1_clear(){this.gen_01_delay_1_buffer.setZero()}gen_01_delay_1_reset(){this.gen_01_delay_1_init(),this.gen_01_delay_1_clear(),(this.gen_01_delay_1_reader>=this.gen_01_delay_1__maxdelay||this.gen_01_delay_1_writer>=this.gen_01_delay_1__maxdelay)&&(this.gen_01_delay_1_reader=0,this.gen_01_delay_1_writer=0)}gen_01_delay_1_dspsetup(){this.gen_01_delay_1_reset()}gen_01_delay_1_evaluateSizeExpr(e,t){return RNBO_UNUSED(t),RNBO_UNUSED(e),48e3}gen_01_delay_1_size(){return this.gen_01_delay_1__maxdelay}gen_01_dspsetup(e){this.gen_01_setupDone&&!e||(this.gen_01_setupDone=!0,this.gen_01_delay_12_dspsetup(),this.gen_01_delay_11_dspsetup(),this.gen_01_delay_10_dspsetup(),this.gen_01_delay_9_dspsetup(),this.gen_01_delay_8_dspsetup(),this.gen_01_delay_7_dspsetup(),this.gen_01_delay_6_dspsetup(),this.gen_01_delay_5_dspsetup(),this.gen_01_delay_4_dspsetup(),this.gen_01_delay_3_dspsetup(),this.gen_01_delay_2_dspsetup(),this.gen_01_delay_1_dspsetup())}param_09_getPresetValue(e){e.value=this.param_09_value}param_09_setPresetValue(e){stateIsEmpty(e)||this.param_09_value_set(e.value)}param_10_getPresetValue(e){e.value=this.param_10_value}param_10_setPresetValue(e){stateIsEmpty(e)||this.param_10_value_set(e.value)}param_11_getPresetValue(e){e.value=this.param_11_value}param_11_setPresetValue(e){stateIsEmpty(e)||this.param_11_value_set(e.value)}ip_03_fillSigBuf(){if(this.ip_03_sigbuf){var e=this.sampleOffsetIntoNextAudioBuffer;e>=this.vs&&(e=this.vs-1);for(var t=this.ip_03_lastIndex;t<e;t++)this.ip_03_resetCount>0?(this.ip_03_sigbuf[t]=1,this.ip_03_resetCount--):this.ip_03_sigbuf[t]=this.ip_03_lastValue;this.ip_03_lastIndex=e}}ip_03_dspsetup(e){this.ip_03_setupDone&&!e||(this.ip_03_lastIndex=0,this.ip_03_setupDone=!0)}ip_04_fillSigBuf(){if(this.ip_04_sigbuf){var e=this.sampleOffsetIntoNextAudioBuffer;e>=this.vs&&(e=this.vs-1);for(var t=this.ip_04_lastIndex;t<e;t++)this.ip_04_resetCount>0?(this.ip_04_sigbuf[t]=1,this.ip_04_resetCount--):this.ip_04_sigbuf[t]=this.ip_04_lastValue;this.ip_04_lastIndex=e}}ip_04_dspsetup(e){this.ip_04_setupDone&&!e||(this.ip_04_lastIndex=0,this.ip_04_setupDone=!0)}latch_tilde_01_reset(){this.latch_tilde_01_value=0}latch_tilde_01_dspsetup(e){this.latch_tilde_01_setupDone&&!e||(this.latch_tilde_01_reset(),this.latch_tilde_01_setupDone=!0)}midiouthelper_sendMidi(e){this.midiouthelper_midiout_set(e)}stackprotect_check(){return this.stackprotect_count++,this.stackprotect_count>128&&(console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\"),!0)}updateTime(e){this._currentTime=e,this.sampleOffsetIntoNextAudioBuffer=rnbo_floor(this.msToSamps(e-this.getEngine().getCurrentTime(),this.sr)),this.sampleOffsetIntoNextAudioBuffer>=this.vs&&(this.sampleOffsetIntoNextAudioBuffer=this.vs-1),this.sampleOffsetIntoNextAudioBuffer<0&&(this.sampleOffsetIntoNextAudioBuffer=0)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOPatcher{constructor(){this.midiin_port=0,this.param_12_value=0,this.param_13_value=2,this.param_14_value=130,this.param_15_value=.2,this.param_16_value=10,this.param_17_value=.5,this.poly_target=0,this.poly_midiin=0,this.midinotecontroller_01_currenttarget=0,this.midinotecontroller_01_midiin=0,this._currentTime=0,this.audioProcessSampleCount=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.sr=44100,this.invsr=2267573696e-14,this.param_12_lastValue=0,this.param_13_lastValue=0,this.param_14_lastValue=0,this.param_15_lastValue=0,this.param_16_lastValue=0,this.param_17_lastValue=0,this.poly_currentStatus=-1,this.poly_mididata=new Array(3),this.midinotecontroller_01_currentStatus=-1,this.midinotecontroller_01_status=-1,this.midinotecontroller_01_byte1=-1,this.midinotecontroller_01_zone_masterchannel=1,this.midinotecontroller_01_zone_numnotechannels=15,this.midinotecontroller_01_zone_masterpitchbendrange=2,this.midinotecontroller_01_zone_pernotepitchbendrange=48,this.midinotecontroller_01_channel_pitchbend=new Array(16).fill(8192),this.midinotecontroller_01_channel_pressure=new Array(16).fill(0),this.midinotecontroller_01_channel_timbre=new Array(16).fill(0),this.midinotecontroller_01_channel_sustain=new Array(16),this.midinotecontroller_01_voice_lastontime=new Array(24).fill(-1),this.midinotecontroller_01_voice_notenumber=new Array(24).fill(0),this.midinotecontroller_01_voice_channel=new Array(24).fill(0),this.midinotecontroller_01_voice_state=new Array(24).fill(0),this.midinotecontroller_01_maxnotesdown=128,this.midinotecontroller_01_notesdown=new Array(129).fill(0),this.midinotecontroller_01_note_lastvelocity=new Array(128).fill(0),this.midinotecontroller_01_muteval=[0,0],this.globaltransport_tempo=0,this.globaltransport_tempoNeedsReset=!1,this.globaltransport_lastTempo=120,this.globaltransport_state=0,this.globaltransport_stateNeedsReset=!1,this.globaltransport_lastState=0,this.globaltransport_beatTimeChanges=[0,0],this.globaltransport_timeSignatureChanges=[4,4,0],this.globaltransport_notify=!1,this.globaltransport_setupDone=!1,this.stackprotect_count=0,this.RNBODefaultSinus=0,this.RNBODefaultMtofLookupTable256=0,this._voiceIndex=0,this._noteNumber=0,this.isMuted=1,this.paramInitIndices=[],this.paramInitOrder=[],this.poly=new Array}listquicksort(e,t,_,i,s){if(_<i){var a=this.listpartition(e,t,_,i,s);this.listquicksort(e,t,_,a-1,s),this.listquicksort(e,t,a+1,i,s)}}listpartition(e,t,_,i,s){for(var a=e[i],r=_-1,l=_;l<=i-1;l++){var o=s&&e[l]<=a,n=!s&&e[l]>=a;(o||n)&&(r++,this.listswapelements(e,r,l),this.listswapelements(t,r,l))}return r++,this.listswapelements(e,r,i),this.listswapelements(t,r,i),r}listswapelements(e,t,_){var i=e[t];e[t]=e[_],e[_]=i}currenttime(){return this._currentTime}tempo(){return this.getTopLevelPatcher().globaltransport_getTempo()}mstobeats(e){return e*this.tempo()*.008/480}sampstoms(e){return 1e3*e/this.sr}param_12_value_set(e){e=this.param_12_value_constrain(e),this.param_12_value=e,this.sendParameter(0),this.param_12_value!=this.param_12_lastValue&&(this.getEngine().presetTouched(),this.param_12_lastValue=this.param_12_value),this.poly_setTuning_set(e)}param_13_value_set(e){e=this.param_13_value_constrain(e),this.param_13_value=e,this.sendParameter(1),this.param_13_value!=this.param_13_lastValue&&(this.getEngine().presetTouched(),this.param_13_lastValue=this.param_13_value),this.poly_filterType_set(e)}param_14_value_set(e){e=this.param_14_value_constrain(e),this.param_14_value=e,this.sendParameter(2),this.param_14_value!=this.param_14_lastValue&&(this.getEngine().presetTouched(),this.param_14_lastValue=this.param_14_value),this.poly_filterCutoff_set(e)}param_15_value_set(e){e=this.param_15_value_constrain(e),this.param_15_value=e,this.sendParameter(3),this.param_15_value!=this.param_15_lastValue&&(this.getEngine().presetTouched(),this.param_15_lastValue=this.param_15_value),this.poly_filterQ_set(e)}param_16_value_set(e){e=this.param_16_value_constrain(e),this.param_16_value=e,this.sendParameter(4),this.param_16_value!=this.param_16_lastValue&&(this.getEngine().presetTouched(),this.param_16_lastValue=this.param_16_value),this.poly_reverbSize_set(e)}param_17_value_set(e){e=this.param_17_value_constrain(e),this.param_17_value=e,this.sendParameter(5),this.param_17_value!=this.param_17_lastValue&&(this.getEngine().presetTouched(),this.param_17_lastValue=this.param_17_value),this.poly_reverbMix_set(e)}getParameterIndexForID(e){return stringCompare(e,\"setTuning\")?stringCompare(e,\"filterType\")?stringCompare(e,\"filterCutoff\")?stringCompare(e,\"filterQ\")?stringCompare(e,\"reverbSize\")?stringCompare(e,\"reverbMix\")?INVALID_INDEX:5:4:3:2:1:0}getNumMidiInputPorts(){return 1}processMidiEvent(e,t,_,i){this.updateTime(e),this.midiin_midihandler(240&_[0],1+(15&_[0]),t,_,i)}getNumMidiOutputPorts(){return 0}process(e,t,_,i,s){RNBO_UNUSED(t),RNBO_UNUSED(e),this.vs=s,this.updateTime(this.getEngine().getCurrentTime());var a=i>=1&&_[0]?_[0]:this.dummyBuffer,r=i>=2&&_[1]?_[1]:this.dummyBuffer;this.poly_perform(a,r,s),this.stackprotect_perform(s),this.globaltransport_advance(),this.audioProcessSampleCount+=this.vs}prepareToProcess(e,t,_){(this.maxvs<t||!this.didAllocateSignals)&&(this.globaltransport_tempo=resizeSignal(this.globaltransport_tempo,this.maxvs,t),this.globaltransport_state=resizeSignal(this.globaltransport_state,this.maxvs,t),this.zeroBuffer=resizeSignal(this.zeroBuffer,this.maxvs,t),this.dummyBuffer=resizeSignal(this.dummyBuffer,this.maxvs,t),this.didAllocateSignals=!0);var i=e!=this.sr,s=t!=this.maxvs,a=i||s||_;(i||s)&&(this.vs=t,this.maxvs=t,this.sr=e,this.invsr=1/e),this.globaltransport_dspsetup(a);for(var r=0;r<24;r++)this.poly[r].prepareToProcess(e,t,_);i&&this.onSampleRateChanged(e)}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getDataRef(e){switch(e){case 0:return addressOf(this.RNBODefaultSinus);case 1:return addressOf(this.RNBODefaultMtofLookupTable256);default:return null}}getNumDataRefs(){return 2}fillRNBODefaultSinus(e){var t;let _=(t=new Float64Buffer(e)).getSize();for(let e=0;e<_;e++)t[e]=rnbo_cos(3.141592653589793*e*2/_)}fillRNBODefaultMtofLookupTable256(e){var t;let _=(t=new Float64Buffer(e)).getSize();for(let e=0;e<_;e++){let i=512/(_-1)*e-256;t[e]=rnbo_exp(.057762265*(i-69))}}fillDataRef(e,t){switch(e){case 0:this.fillRNBODefaultSinus(t);break;case 1:this.fillRNBODefaultMtofLookupTable256(t)}}processDataViewUpdate(e,t){for(var _=0;_<24;_++)this.poly[_].processDataViewUpdate(e,t)}allocateDataRefs(){for(var e=0;e<24;e++)this.poly[e].allocateDataRefs();this.RNBODefaultSinus.hasRequestedSize()&&(this.RNBODefaultSinus.wantsFill()&&this.fillRNBODefaultSinus(this.RNBODefaultSinus),this.getEngine().sendDataRefUpdated(0)),this.RNBODefaultMtofLookupTable256.hasRequestedSize()&&(this.RNBODefaultMtofLookupTable256.wantsFill()&&this.fillRNBODefaultMtofLookupTable256(this.RNBODefaultMtofLookupTable256),this.getEngine().sendDataRefUpdated(1))}initialize(){this.RNBODefaultSinus=initDataRef(\"RNBODefaultSinus\",!0,null),this.RNBODefaultMtofLookupTable256=initDataRef(\"RNBODefaultMtofLookupTable256\",!0,null),this.assign_defaults(),this.setState(),this.RNBODefaultSinus.setIndex(0),this.RNBODefaultMtofLookupTable256.setIndex(1),this.initializeObjects(),this.allocateDataRefs(),this.startup()}initializeObjects(){for(var e=0;e<24;e++)this.poly[e].initializeObjects()}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}getState(){}setState(){for(var e=0;e<24;e++)this.poly[e]=new RNBOSubpatcher_14,this.poly[e].setEngineAndPatcher(this.getEngine(),this),this.poly[e].initialize(),this.poly[e].setParameterOffset(this.getParameterOffset(this.poly[0])),this.poly[e].setVoiceIndex(e+1)}getPreset(e){this.param_12_getPresetValue(getSubState(e,\"setTuning\")),this.param_13_getPresetValue(getSubState(e,\"filterType\")),this.param_14_getPresetValue(getSubState(e,\"filterCutoff\")),this.param_15_getPresetValue(getSubState(e,\"filterQ\")),this.param_16_getPresetValue(getSubState(e,\"reverbSize\")),this.param_17_getPresetValue(getSubState(e,\"reverbMix\"));for(var t=0;t<24;t++)this.poly[t].getPreset(getSubStateAt(getSubState(e,\"__sps\"),\"poly\",t))}setPreset(e,t){this.updateTime(e),this.param_12_setPresetValue(getSubState(t,\"setTuning\")),this.param_13_setPresetValue(getSubState(t,\"filterType\")),this.param_14_setPresetValue(getSubState(t,\"filterCutoff\")),this.param_15_setPresetValue(getSubState(t,\"filterQ\")),this.param_16_setPresetValue(getSubState(t,\"reverbSize\")),this.param_17_setPresetValue(getSubState(t,\"reverbMix\"));for(var _=0;_<24;_++)this.poly[_].p_01.param_01_setPresetValue(getSubState(getSubState(getSubState(getSubStateAt(getSubState(t,\"__sps\"),\"poly\",_),\"__sps\"),\"oscillator\"),\"mode\"));for(_=0;_<24;_++)this.poly[_].p_02.param_02_setPresetValue(getSubState(getSubState(getSubState(getSubStateAt(getSubState(t,\"__sps\"),\"poly\",_),\"__sps\"),\"envelope\"),\"attack\"));for(_=0;_<24;_++)this.poly[_].p_02.param_03_setPresetValue(getSubState(getSubState(getSubState(getSubStateAt(getSubState(t,\"__sps\"),\"poly\",_),\"__sps\"),\"envelope\"),\"decay\"));for(_=0;_<24;_++)this.poly[_].p_02.param_04_setPresetValue(getSubState(getSubState(getSubState(getSubStateAt(getSubState(t,\"__sps\"),\"poly\",_),\"__sps\"),\"envelope\"),\"sustain\"));for(_=0;_<24;_++)this.poly[_].p_02.param_05_setPresetValue(getSubState(getSubState(getSubState(getSubStateAt(getSubState(t,\"__sps\"),\"poly\",_),\"__sps\"),\"envelope\"),\"release\"))}processTempoEvent(e,t){if(this.updateTime(e),this.globaltransport_setTempo(t,!1))for(var _=0;_<24;_++)this.poly[_].processTempoEvent(e,t)}processTransportEvent(e,t){if(this.updateTime(e),this.globaltransport_setState(t,!1))for(var _=0;_<24;_++)this.poly[_].processTransportEvent(e,t)}processBeatTimeEvent(e,t){if(this.updateTime(e),this.globaltransport_setBeatTime(t,!1))for(var _=0;_<24;_++)this.poly[_].processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,_){if(this.updateTime(e),this.globaltransport_setTimeSignature(t,_,!1))for(var i=0;i<24;i++)this.poly[i].processTimeSignatureEvent(e,t,_)}setParameterValue(e,t,_){switch(this.updateTime(_),e){case 0:this.param_12_value_set(t);break;case 1:this.param_13_value_set(t);break;case 2:this.param_14_value_set(t);break;case 3:this.param_15_value_set(t);break;case 4:this.param_16_value_set(t);break;case 5:this.param_17_value_set(t);break;default:(e-=6)<this.poly[0].getNumParameters()&&this.poly[0].setPolyParameterValue(this.poly,e,t,_)}}processParameterEvent(e,t,_){this.setParameterValue(e,t,_)}processNormalizedParameterEvent(e,t,_){this.setParameterValueNormalized(e,t,_)}getParameterValue(e){switch(e){case 0:return this.param_12_value;case 1:return this.param_13_value;case 2:return this.param_14_value;case 3:return this.param_15_value;case 4:return this.param_16_value;case 5:return this.param_17_value;default:return(e-=6)<this.poly[0].getNumParameters()?this.poly[0].getPolyParameterValue(this.poly,e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 6+this.poly[0].getNumParameters()}getParameterName(e){switch(e){case 0:return\"setTuning\";case 1:return\"filterType\";case 2:return\"filterCutoff\";case 3:return\"filterQ\";case 4:return\"reverbSize\";case 5:return\"reverbMix\";default:return(e-=6)<this.poly[0].getNumParameters()?this.poly[0].getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"setTuning\";case 1:return\"filterType\";case 2:return\"filterCutoff\";case 3:return\"filterQ\";case 4:return\"reverbSize\";case 5:return\"reverbMix\";default:return(e-=6)<this.poly[0].getNumParameters()?this.poly[0].getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=0,t.min=0,t.max=3,t.exponent=1,t.steps=4,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=2,t.min=0,t.max=2,t.exponent=1,t.steps=3;t.enumValues=[\"lopass\",\"hipass\",\"bypass\"],t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 2:t.type=ParameterTypeNumber,t.initialValue=130,t.min=0,t.max=1e4,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 3:t.type=ParameterTypeNumber,t.initialValue=.2,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 4:t.type=ParameterTypeNumber,t.initialValue=10,t.min=.1,t.max=300,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 5:t.type=ParameterTypeNumber,t.initialValue=.5,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!0,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:if((e-=6)<this.poly[0].getNumParameters())for(var _=0;_<24;_++)this.poly[_].getParameterInfo(e,t)}}sendParameter(e){this.getEngine().notifyParameterValueChanged(e,this.getParameterValue(e))}getParameterOffset(e){return e==this.poly[0]?6:0}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let _=1/(t-1);e=1*rnbo_fround(e/_*1/1)*_}return e}convertToNormalizedParameterValue(e,t){switch(e){case 3:case 5:return((t=t<0?0:t>1?1:t)-0)/1;case 1:{let e=((t=t<0?0:t>2?2:t)-0)/2;return e=this.applyStepsToNormalizedParameterValue(e,3),e}case 0:{let e=((t=t<0?0:t>3?3:t)-0)/3;return e=this.applyStepsToNormalizedParameterValue(e,4),e}case 2:return((t=t<0?0:t>1e4?1e4:t)-0)/1e4;case 4:return((t=t<.1?.1:t>300?300:t)-.1)/299.9;default:return(e-=6)<this.poly[0].getNumParameters()?this.poly[0].convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 3:case 5:return 0+1*(t=t<0?0:t>1?1:t);case 1:return t=t<0?0:t>1?1:t,0+2*(t=this.applyStepsToNormalizedParameterValue(t,3));case 0:return t=t<0?0:t>1?1:t,0+3*(t=this.applyStepsToNormalizedParameterValue(t,4));case 2:return 0+1e4*(t=t<0?0:t>1?1:t);case 4:return.1+299.9*(t=t<0?0:t>1?1:t);default:return(e-=6)<this.poly[0].getNumParameters()?this.poly[0].convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){switch(e){case 0:return this.param_12_value_constrain(t);case 1:return this.param_13_value_constrain(t);case 2:return this.param_14_value_constrain(t);case 3:return this.param_15_value_constrain(t);case 4:return this.param_16_value_constrain(t);case 5:return this.param_17_value_constrain(t);default:return(e-=6)<this.poly[0].getNumParameters()?this.poly[0].constrainParameterValue(e,t):t}}scheduleParamInit(e,t){this.paramInitIndices.push(e),this.paramInitOrder.push(t)}processParamInitEvents(){this.listquicksort(this.paramInitOrder,this.paramInitIndices,0,this.paramInitOrder.length-1,!0);for(var e=0;e<this.paramInitOrder.length;e++)this.getEngine().scheduleParameterChange(this.paramInitIndices[e],this.getParameterValue(this.paramInitIndices[e]),0)}processClockEvent(e,t,_,i){}processOutletAtCurrentTime(e,t,_){}processOutletEvent(e,t,_,i){this.updateTime(i),this.processOutletAtCurrentTime(e,t,_)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,_,i){RNBO_UNUSED(t),this.updateTime(_);for(var s=0;s<24;s++)this.poly[s].processNumMessage(e,t,_,i)}processListMessage(e,t,_,i){RNBO_UNUSED(t),this.updateTime(_);for(var s=0;s<24;s++)this.poly[s].processListMessage(e,t,_,i)}processBangMessage(e,t,_){RNBO_UNUSED(t),this.updateTime(_);for(var i=0;i<24;i++)this.poly[i].processBangMessage(e,t,_)}resolveTag(e){var t=this.poly[0].resolveTag(e);return t||\"\"}getNumMessages(){return 0}getMessageInfo(e){return NullMessageInfo}startup(){this.updateTime(this.getEngine().getCurrentTime());for(var e=0;e<24;e++)this.poly[e].startup();this.scheduleParamInit(0,0),this.scheduleParamInit(1,0),this.scheduleParamInit(2,0),this.scheduleParamInit(3,0),this.scheduleParamInit(4,0),this.scheduleParamInit(5,0),this.processParamInitEvents()}param_12_value_constrain(e){e=e>3?3:e<0?0:e;{const t=1;e=1*rnbo_fround(e*(0!=t?1/t:0)*1/1)*t}return e}poly_setTuning_set(e){for(var t=0;t<24;t++)t+1!=this.poly_target&&0!=this.poly_target||this.poly[t].setParameterValue(0,e,this._currentTime)}param_13_value_constrain(e){e=e>2?2:e<0?0:e;{const t=1;e=1*rnbo_fround(e*(0!=t?1/t:0)*1/1)*t}return e}poly_filterType_set(e){for(var t=0;t<24;t++)t+1!=this.poly_target&&0!=this.poly_target||this.poly[t].setParameterValue(1,e,this._currentTime)}param_14_value_constrain(e){return e=e>1e4?1e4:e<0?0:e}poly_filterCutoff_set(e){for(var t=0;t<24;t++)t+1!=this.poly_target&&0!=this.poly_target||this.poly[t].setParameterValue(2,e,this._currentTime)}param_15_value_constrain(e){return e=e>1?1:e<0?0:e}poly_filterQ_set(e){for(var t=0;t<24;t++)t+1!=this.poly_target&&0!=this.poly_target||this.poly[t].setParameterValue(3,e,this._currentTime)}param_16_value_constrain(e){return e=e>300?300:e<.1?.1:e}poly_reverbSize_set(e){for(var t=0;t<24;t++)t+1!=this.poly_target&&0!=this.poly_target||this.poly[t].setParameterValue(4,e,this._currentTime)}param_17_value_constrain(e){return e=e>1?1:e<0?0:e}poly_reverbMix_set(e){for(var t=0;t<24;t++)t+1!=this.poly_target&&0!=this.poly_target||this.poly[t].setParameterValue(5,e,this._currentTime)}midinotecontroller_01_currenttarget_set(e){this.midinotecontroller_01_currenttarget=e}poly_target_set(e){this.poly_target=e,this.midinotecontroller_01_currenttarget_set(e)}midinotecontroller_01_target_set(e){this.poly_target_set(e)}poly_midiininternal_set(e){let t=0;switch(this.poly_currentStatus=parseMidi(this.poly_currentStatus,e,this.poly_mididata[0]),this.poly_currentStatus){case MIDI_StatusByteReceived:this.poly_mididata[0]=e,this.poly_mididata[1]=0;break;case MIDI_SecondByteReceived:case MIDI_ProgramChange:case MIDI_ChannelPressure:this.poly_mididata[1]=e,this.poly_currentStatus!=MIDI_ProgramChange&&this.poly_currentStatus!=MIDI_ChannelPressure||(t=2);break;case MIDI_NoteOff:case MIDI_NoteOn:case MIDI_Aftertouch:case MIDI_CC:case MIDI_PitchBend:default:this.poly_mididata[2]=e,t=3}var _;if(t>0)if(this.poly_target>0&&this.poly_target<=24)_=this.poly_target-1,this.poly[_].processMidiEvent(this.currenttime(),0,this.poly_mididata,t);else if(0==this.poly_target)for(_=0;_<24;_++)this.poly[_].processMidiEvent(this.currenttime(),0,this.poly_mididata,t)}midinotecontroller_01_midiout_set(e){this.poly_midiininternal_set(e)}poly_noteNumber_set(e){this.poly_target>0&&this.poly[this.poly_target-1].setNoteNumber(e)}midinotecontroller_01_noteNumber_set(e){this.poly_noteNumber_set(e)}midinotecontroller_01_voicestatus_set(e){if(1==e[1]){let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(e[0]),this.midinotecontroller_01_noteNumber_set(0),this.midinotecontroller_01_target_set(t)}}poly_voicestatus_set(e){this.midinotecontroller_01_voicestatus_set(e)}poly_activevoices_set(e){}poly_mute_set(e){var t=e[0],_=e[1];if(0==t)for(var i=0;i<24;i++)this.poly[i].setIsMuted(_);else{var s=t-1;s>=0&&s<24&&this.poly[s].setIsMuted(_)}var a=[e[0],e[1]];this.poly_voicestatus_set(a),this.poly_activevoices_set(this.poly_calcActiveVoices())}midinotecontroller_01_mute_set(e){this.poly_mute_set(e)}midinotecontroller_01_midiin_set(e){this.midinotecontroller_01_midiin=e;let t=e;switch(this.midinotecontroller_01_currentStatus=parseMidi(this.midinotecontroller_01_currentStatus,e,this.midinotecontroller_01_status),this.midinotecontroller_01_currentStatus){case MIDI_StatusByteReceived:this.midinotecontroller_01_status=t,this.midinotecontroller_01_byte1=-1;break;case MIDI_SecondByteReceived:this.midinotecontroller_01_byte1=t;break;case MIDI_NoteOn:{let e=!0,_=1,i=this.midinotecontroller_01_voice_lastontime[0],s=this.midinotecontroller_01_voice_state[0];for(let t=0;t<24;t++){let a=this.midinotecontroller_01_voice_state[t];if(this.midinotecontroller_01_voice_notenumber[t]==this.midinotecontroller_01_byte1&&a==MIDI_NoteState_On){e=!1,_=t+1;break}if(t>0&&(a!=MIDI_NoteState_On||s==MIDI_NoteState_On)){let e=this.midinotecontroller_01_voice_lastontime[t];(e<i||s==MIDI_NoteState_On&&a!=MIDI_NoteState_On)&&(_=t+1,i=e,s=a)}}e&&this.midinotecontroller_01_sendnoteoff(_);let a=_-1;this.midinotecontroller_01_voice_state[a]=MIDI_NoteState_On,this.midinotecontroller_01_voice_lastontime[a]=this.currenttime(),this.midinotecontroller_01_voice_notenumber[a]=this.midinotecontroller_01_byte1,this.midinotecontroller_01_voice_channel[a]=15&this.midinotecontroller_01_status;for(let e=0;e<this.midinotecontroller_01_maxnotesdown;e++)if(0==this.midinotecontroller_01_notesdown[e]){this.midinotecontroller_01_notesdown[e]=this.midinotecontroller_01_voice_notenumber[a];break}this.midinotecontroller_01_note_lastvelocity[this.midinotecontroller_01_voice_notenumber[a]]=t,this.midinotecontroller_01_sendpitchbend(a),this.midinotecontroller_01_sendpressure(a),this.midinotecontroller_01_sendtimbre(a),this.midinotecontroller_01_muteval[0]=_,this.midinotecontroller_01_muteval[1]=0,this.midinotecontroller_01_mute_set(this.midinotecontroller_01_muteval);let r=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(_),this.midinotecontroller_01_noteNumber_set(this.midinotecontroller_01_voice_notenumber[a]),this.midinotecontroller_01_midiout_set(MIDI_NoteOnMask|this.midinotecontroller_01_voice_channel[a]),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_voice_notenumber[a]),this.midinotecontroller_01_midiout_set(t),this.midinotecontroller_01_target_set(r);break}case MIDI_NoteOff:{let t=0,_=this.midinotecontroller_01_byte1,i=15&this.midinotecontroller_01_status;for(let e=0;e<24;e++)if(this.midinotecontroller_01_voice_notenumber[e]==_&&this.midinotecontroller_01_voice_channel[e]==i&&this.midinotecontroller_01_voice_state[e]==MIDI_NoteState_On){t=e+1;break}if(t>0){let _=t-1,s=i,a=!0;if(this.midinotecontroller_01_channel_sustain[a?0:s])this.midinotecontroller_01_voice_state[_]=MIDI_NoteState_Sustained;else{let i=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(t),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1),this.midinotecontroller_01_midiout_set(e),this.midinotecontroller_01_target_set(i),this.midinotecontroller_01_currentStatus==MIDI_NoteOff&&(this.midinotecontroller_01_voice_state[_]=MIDI_NoteState_Off)}}let s=!1;for(let e=0;e<this.midinotecontroller_01_maxnotesdown&&0!=this.midinotecontroller_01_notesdown[e];e++)this.midinotecontroller_01_notesdown[e]==_&&(s=!0),s&&(this.midinotecontroller_01_notesdown[e]=this.midinotecontroller_01_notesdown[e+1]);break}case MIDI_Aftertouch:{let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(0),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1),this.midinotecontroller_01_midiout_set(e),this.midinotecontroller_01_target_set(t);break}case MIDI_CC:{let _=!0;switch(this.midinotecontroller_01_byte1){case MIDI_CC_Sustain:{let e=t>=64,_=15&this.midinotecontroller_01_status,i=_,s=!0;if(this.midinotecontroller_01_channel_sustain[s?0:i]=e,!e)for(let e=0;e<24;e++)if((s||this.midinotecontroller_01_voice_channel[e]==_)&&this.midinotecontroller_01_voice_state[e]==MIDI_NoteState_Sustained){let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(e+1),this.midinotecontroller_01_midiout_set(MIDI_NoteOffMask|i),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_voice_notenumber[e]),this.midinotecontroller_01_midiout_set(64),this.midinotecontroller_01_target_set(t),this.midinotecontroller_01_voice_state[e]=MIDI_NoteState_Off}break}case MIDI_CC_TimbreMSB:{let t=15&this.midinotecontroller_01_status,i=(127&e)<<7;this.midinotecontroller_01_channel_timbre[15&this.midinotecontroller_01_status]=i;for(let e=0;e<24;e++)this.midinotecontroller_01_voice_channel[e]==t&&this.midinotecontroller_01_voice_state[e]!=MIDI_NoteState_Off&&this.midinotecontroller_01_sendtimbre(e);_=!1;break}case MIDI_CC_TimbreLSB:break;case MIDI_CC_AllNotesOff:this.midinotecontroller_01_sendallnotesoff()}if(_){let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(0),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1),this.midinotecontroller_01_midiout_set(e),this.midinotecontroller_01_target_set(t)}break}case MIDI_ProgramChange:{let e=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(0),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1),this.midinotecontroller_01_target_set(e);break}case MIDI_ChannelPressure:{let t=15&this.midinotecontroller_01_status;for(let _=0;_<24;_++)if(this.midinotecontroller_01_voice_state[_]!=MIDI_NoteState_Off&&this.midinotecontroller_01_voice_channel[_]==t){let i=t;this.midinotecontroller_01_channel_pressure[i]=e,this.midinotecontroller_01_sendpressure(_)}break}case MIDI_PitchBend:{let e=this.midinotecontroller_01_byte1|t<<7,_=15&this.midinotecontroller_01_status;this.midinotecontroller_01_channel_pitchbend[_]=e;for(let e=0;e<24;e++)this.midinotecontroller_01_voice_state[e]!=MIDI_NoteState_Off&&this.midinotecontroller_01_voice_channel[e]==_&&this.midinotecontroller_01_sendpitchbend(e);break}}}poly_midiin_set(e){this.poly_midiin=e,this.midinotecontroller_01_midiin_set(e)}midiin_midiout_set(e){this.poly_midiin_set(e)}midiin_midihandler(e,t,_,i,s){var a;for(RNBO_UNUSED(_),RNBO_UNUSED(t),RNBO_UNUSED(e),a=0;a<s;a++)this.midiin_midiout_set(i[a])}poly_perform(e,t,_){for(var i=[e,t],s=0;s<2;s++)zeroSignal(i[s],_);for(var a=0;a<24;a++)this.poly[a].process(null,0,i,2,_)}stackprotect_perform(e){RNBO_UNUSED(e);this.stackprotect_count;this.stackprotect_count=0}param_12_getPresetValue(e){e.value=this.param_12_value}param_12_setPresetValue(e){stateIsEmpty(e)||this.param_12_value_set(e.value)}param_13_getPresetValue(e){e.value=this.param_13_value}param_13_setPresetValue(e){stateIsEmpty(e)||this.param_13_value_set(e.value)}param_14_getPresetValue(e){e.value=this.param_14_value}param_14_setPresetValue(e){stateIsEmpty(e)||this.param_14_value_set(e.value)}param_15_getPresetValue(e){e.value=this.param_15_value}param_15_setPresetValue(e){stateIsEmpty(e)||this.param_15_value_set(e.value)}param_16_getPresetValue(e){e.value=this.param_16_value}param_16_setPresetValue(e){stateIsEmpty(e)||this.param_16_value_set(e.value)}param_17_getPresetValue(e){e.value=this.param_17_value}param_17_setPresetValue(e){stateIsEmpty(e)||this.param_17_value_set(e.value)}poly_calcActiveVoices(){{let e=0;for(let t=0;t<24;t++)this.poly[t].getIsMuted()||e++;return e}}midinotecontroller_01_sendnoteoff(e){let t=e-1;if(this.midinotecontroller_01_voice_state[t]!=MIDI_NoteState_Off){let _=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(e),this.midinotecontroller_01_midiout_set(MIDI_NoteOffMask|this.midinotecontroller_01_voice_channel[t]),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_voice_notenumber[t]),this.midinotecontroller_01_midiout_set(64),this.midinotecontroller_01_voice_state[t]=MIDI_NoteState_Off,this.midinotecontroller_01_target_set(_)}}midinotecontroller_01_sendpitchbend(e){if(e>=0&&e<24){let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(e+1);let _=this.midinotecontroller_01_channel_pitchbend[this.midinotecontroller_01_voice_channel[e]];this.midinotecontroller_01_midiout_set(MIDI_PitchBendMask|this.midinotecontroller_01_voice_channel[e]),this.midinotecontroller_01_midiout_set(127&_),this.midinotecontroller_01_midiout_set(_>>7&127),this.midinotecontroller_01_target_set(t)}}midinotecontroller_01_sendpressure(e){let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(e+1),this.midinotecontroller_01_midiout_set(MIDI_ChannelPressureMask|this.midinotecontroller_01_voice_channel[e]),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_channel_pressure[this.midinotecontroller_01_voice_channel[e]]),this.midinotecontroller_01_target_set(t)}midinotecontroller_01_sendtimbre(e){let t=this.midinotecontroller_01_currenttarget;this.midinotecontroller_01_target_set(e+1),this.midinotecontroller_01_midiout_set(MIDI_CCMask|this.midinotecontroller_01_voice_channel[e]),this.midinotecontroller_01_midiout_set(MIDI_CC_TimbreLSB),this.midinotecontroller_01_midiout_set(127&this.midinotecontroller_01_channel_timbre[this.midinotecontroller_01_voice_channel[e]]),this.midinotecontroller_01_midiout_set(MIDI_CCMask|this.midinotecontroller_01_voice_channel[e]),this.midinotecontroller_01_midiout_set(MIDI_CC_TimbreMSB),this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_channel_timbre[this.midinotecontroller_01_voice_channel[e]]>>7&127),this.midinotecontroller_01_target_set(t)}midinotecontroller_01_sendallnotesoff(){for(let e=1;e<=24;e++)this.midinotecontroller_01_sendnoteoff(e)}globaltransport_getTempoAtSample(e){return RNBO_UNUSED(e),this.vs>0?this.globaltransport_tempo[e]:this.globaltransport_lastTempo}globaltransport_getTempo(){return this.globaltransport_getTempoAtSample(this.sampleOffsetIntoNextAudioBuffer)}globaltransport_getStateAtSample(e){return RNBO_UNUSED(e),this.vs>0?this.globaltransport_state[e]:this.globaltransport_lastState}globaltransport_getState(){return this.globaltransport_getStateAtSample(this.sampleOffsetIntoNextAudioBuffer)}globaltransport_getBeatTimeAtMsTime(e){for(var t=2;t<this.globaltransport_beatTimeChanges.length&&this.globaltransport_beatTimeChanges[t+1]<=e;)t+=2;t-=2;var _=this.globaltransport_beatTimeChanges[t];if(0==this.globaltransport_getState())return _;var i=e-this.globaltransport_beatTimeChanges[t+1];return _+this.mstobeats(i)}globaltransport_setTempo(e,t){if(t)this.processTempoEvent(this.currenttime(),e),this.globaltransport_notify=!0;else if(this.globaltransport_getTempo()!=e){const t=this.currenttime();return this.globaltransport_beatTimeChanges.push(this.globaltransport_getBeatTimeAtMsTime(t)),this.globaltransport_beatTimeChanges.push(t),fillSignal(this.globaltransport_tempo,this.vs,e,this.sampleOffsetIntoNextAudioBuffer),this.globaltransport_lastTempo=e,this.globaltransport_tempoNeedsReset=!0,!0}return!1}globaltransport_getBeatTime(){return this.globaltransport_getBeatTimeAtMsTime(this.currenttime())}globaltransport_setState(e,t){if(t)this.processTransportEvent(this.currenttime(),TransportState(e)),this.globaltransport_notify=!0;else if(this.globaltransport_getState()!=e)return fillSignal(this.globaltransport_state,this.vs,e,this.sampleOffsetIntoNextAudioBuffer),this.globaltransport_lastState=TransportState(e),this.globaltransport_stateNeedsReset=!0,0==e&&(this.globaltransport_beatTimeChanges.push(this.globaltransport_getBeatTime()),this.globaltransport_beatTimeChanges.push(this.currenttime())),!0;return!1}globaltransport_setBeatTime(e,t){if(t)return this.processBeatTimeEvent(this.currenttime(),e),this.globaltransport_notify=!0,!1;var _=!1;return this.globaltransport_getBeatTime()!=e&&(_=!0),this.globaltransport_beatTimeChanges.push(e),this.globaltransport_beatTimeChanges.push(this.currenttime()),_}globaltransport_getBeatTimeAtSample(e){var t=this.sampstoms(e);return this.globaltransport_getBeatTimeAtMsTime(this.currenttime()+t)}globaltransport_getTimeSignatureAtMsTime(e){for(var t=3;t<this.globaltransport_timeSignatureChanges.length&&this.globaltransport_timeSignatureChanges[t+2]<=e;)t+=3;return t-=3,[this.globaltransport_timeSignatureChanges[t],this.globaltransport_timeSignatureChanges[t+1]]}globaltransport_getTimeSignature(){return this.globaltransport_getTimeSignatureAtMsTime(this.currenttime())}globaltransport_getTimeSignatureAtSample(e){var t=this.sampstoms(e);return this.globaltransport_getTimeSignatureAtMsTime(this.currenttime()+t)}globaltransport_setTimeSignature(e,t,_){if(_)this.processTimeSignatureEvent(this.currenttime(),e,t),this.globaltransport_notify=!0;else{var i=this.globaltransport_getTimeSignature();if(i[0]!=e||i[1]!=t)return this.globaltransport_timeSignatureChanges.push(e),this.globaltransport_timeSignatureChanges.push(t),this.globaltransport_timeSignatureChanges.push(this.currenttime()),!0}return!1}globaltransport_advance(){this.globaltransport_tempoNeedsReset&&(fillSignal(this.globaltransport_tempo,this.vs,this.globaltransport_lastTempo),this.globaltransport_tempoNeedsReset=!1,this.globaltransport_notify&&this.getEngine().sendTempoEvent(this.globaltransport_lastTempo)),this.globaltransport_stateNeedsReset&&(fillSignal(this.globaltransport_state,this.vs,this.globaltransport_lastState),this.globaltransport_stateNeedsReset=!1,this.globaltransport_notify&&this.getEngine().sendTransportEvent(TransportState(this.globaltransport_lastState))),this.globaltransport_beatTimeChanges.length>2&&(this.globaltransport_beatTimeChanges[0]=this.globaltransport_beatTimeChanges[this.globaltransport_beatTimeChanges.length-2],this.globaltransport_beatTimeChanges[1]=this.globaltransport_beatTimeChanges[this.globaltransport_beatTimeChanges.length-1],this.globaltransport_beatTimeChanges.length=2,this.globaltransport_notify&&this.getEngine().sendBeatTimeEvent(this.globaltransport_beatTimeChanges[0])),this.globaltransport_timeSignatureChanges.length>3&&(this.globaltransport_timeSignatureChanges[0]=this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length-3],this.globaltransport_timeSignatureChanges[1]=this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length-2],this.globaltransport_timeSignatureChanges[2]=this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length-1],this.globaltransport_timeSignatureChanges.length=3,this.globaltransport_notify&&this.getEngine().sendTimeSignatureEvent(this.globaltransport_timeSignatureChanges[0],this.globaltransport_timeSignatureChanges[1])),this.globaltransport_notify=!1}globaltransport_dspsetup(e){this.globaltransport_setupDone&&!e||(fillSignal(this.globaltransport_tempo,this.vs,this.globaltransport_lastTempo),this.globaltransport_tempoNeedsReset=!1,fillSignal(this.globaltransport_state,this.vs,this.globaltransport_lastState),this.globaltransport_stateNeedsReset=!1,this.globaltransport_setupDone=!0)}stackprotect_check(){return this.stackprotect_count++,this.stackprotect_count>128&&(console.log(\"STACK OVERFLOW DETECTED - stopped processing branch !\"),!0)}updateTime(e){this._currentTime=e,this.sampleOffsetIntoNextAudioBuffer=rnbo_floor(this.msToSamps(e-this.getEngine().getCurrentTime(),this.sr)),this.sampleOffsetIntoNextAudioBuffer>=this.vs&&(this.sampleOffsetIntoNextAudioBuffer=this.vs-1),this.sampleOffsetIntoNextAudioBuffer<0&&(this.sampleOffsetIntoNextAudioBuffer=0)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this}}rnboObj=new RNBOPatcher;",
  "wasm": "",
  "wasmEncoding": "base64",
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "envelope": {
                  "attack": {
                    "value": 11
                  },
                  "decay": {
                    "value": 59
                  },
                  "release": {
                    "value": 25
                  },
                  "sustain": {
                    "value": 0.1
                  }
                },
                "oscillator": {
                  "mode": {
                    "value": 1
                  }
                },
                "p_obj-5": {},
                "p_obj-6": {}
              }
            }
          ]
        },
        "filterCutoff": {
          "value": 339
        },
        "filterQ": {
          "value": 0.2
        },
        "filterType": {
          "value": 0
        },
        "reverbMix": {
          "value": 1
        },
        "reverbSize": {
          "value": 75
        },
        "setTuning": {
          "value": 3
        }
      }
    },
    {
      "name": "untitled",
      "preset": {
        "damping": {
          "value": 0.8
        },
        "decay": {
          "value": 0.2
        },
        "drywet": {
          "value": 0.3
        },
        "freq": {
          "value": 230
        },
        "gain": {
          "value": 1
        },
        "metronomeInterval": {
          "value": 237
        }
      }
    },
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "rec": {
            "freeze": {
              "value": 0
            }
          }
        },
        "feedback": {
          "value": 0.555431961438636
        }
      }
    },
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "env.adsr": {
            "attack": {
              "value": 10
            },
            "decay": {
              "value": 10
            },
            "release": {
              "value": 10
            },
            "sustain": {
              "value": 1
            }
          },
          "filters": {
            "__sps": {
              "filter.bp": {},
              "filter.hp": {},
              "filter.lp": {},
              "p_obj-17": {}
            },
            "cutoff": {
              "value": 10000
            },
            "filtertype": {
              "value": 0
            },
            "resonance_mod": {
              "value": 1
            }
          },
          "oscillators": {
            "__sps": {
              "oscA": {
                "mode": {
                  "value": 1
                }
              },
              "oscB": {
                "mode": {
                  "value": 1
                }
              },
              "oscC": {
                "mode": {
                  "value": 1
                }
              }
            },
            "detuneA": {
              "value": 0
            },
            "detuneB": {
              "value": 0
            },
            "detuneC": {
              "value": 0
            },
            "levelA": {
              "value": 1
            },
            "levelB": {
              "value": 0
            },
            "levelC": {
              "value": 0
            },
            "wobble": {
              "value": 0
            }
          }
        }
      }
    }
  ]
}