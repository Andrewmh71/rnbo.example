{"desc":{"parameters":[],"numParameters":0,"numSignalInParameters":0,"numSignalOutParameters":0,"numInputChannels":0,"numOutputChannels":1,"numMidiInputPorts":0,"numMidiOutputPorts":0,"externalDataRefs":[],"patcherSerial":1,"inports":[],"outports":[],"inlets":[],"outlets":[{"type":"signal","index":1,"tag":"out1"}],"paramConversion":{"applyStepsToNormalizedParameterValue":"function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}","convertToNormalizedParameterValue":"function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.rnbo_01[0].getNumParameters()) {\n            for (var i = 0; i < 6; i++) {\n                return this.rnbo_01[i].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}","convertFromNormalizedParameterValue":"function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.rnbo_01[0].getNumParameters()) {\n            for (var i = 0; i < 6; i++) {\n                return this.rnbo_01[i].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}","getNumParameters":"function getNumParameters() {\n    return 0 + this.rnbo_01[0].getNumParameters();\n}","constrainParameterValue":"function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.rnbo_01[0].getNumParameters()) {\n            for (var i = 0; i < 6; i++) {\n                return this.rnbo_01[i].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}","subpatches":{"rnbo_01":{"applyStepsToNormalizedParameterValue":"function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}","convertToNormalizedParameterValue":"function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}","convertFromNormalizedParameterValue":"function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}","getNumParameters":"function getNumParameters() {\n    return 0;\n}","constrainParameterValue":"function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}","subpatches":{},"isPolyphonic":true}},"isPolyphonic":false},"rnboVersion":"0.13.0"},"options":{"classname":"rnbomatic","minifyOutput":false},"src":"\nclass RNBOSubpatcher_08 {\n\tconstructor() {\n\t\tthis.dspexpr_01_in1 = 0;\n\t\tthis.dspexpr_01_in2 = 0;\n\t\tthis.expr_01_in1 = 0;\n\t\tthis.expr_01_in2 = 440;\n\t\tthis.expr_01_out1 = 0;\n\t\tthis.stripnote_01_velocity = 0;\n\t\tthis.cycle_01_frequency = 0;\n\t\tthis.notein_01_channel = 0;\n\t\tthis.expr_02_in1 = 0;\n\t\tthis.expr_02_in2 = 127;\n\t\tthis.expr_02_out1 = 0;\n\t\tthis.adsr_01_trigger = 0;\n\t\tthis.adsr_01_attack = 5;\n\t\tthis.adsr_01_decay = 30;\n\t\tthis.adsr_01_sustain = 0.4;\n\t\tthis.adsr_01_release = 250;\n\t\tthis.currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(3);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.expr_01_x_lastInValue = 0;\n\t\tthis.expr_01_x_lastOutValue = 0;\n\t\tthis.expr_01_x_lastTuning = 0;\n\t\tthis.expr_01_x_buffer = 0;\n\t\tthis.cycle_01_buffer = 0;\n\t\tthis.cycle_01_wrap = 0;\n\t\tthis.cycle_01_phasei = 0;\n\t\tthis.cycle_01_f2i = 0;\n\t\tthis.cycle_01_ph_currentPhase = 0;\n\t\tthis.cycle_01_ph_conv = 0;\n\t\tthis.cycle_01_setupDone = false;\n\t\tthis.notein_01_status = 0;\n\t\tthis.notein_01_byte1 = -1;\n\t\tthis.notein_01_inchan = 0;\n\t\tthis.adsr_01_phase = 3;\n\t\tthis.adsr_01_mspersamp = 0;\n\t\tthis.adsr_01_time = 0;\n\t\tthis.adsr_01_lasttrigger = 0;\n\t\tthis.adsr_01_amplitude = 0;\n\t\tthis.adsr_01_triggerval = 0;\n\t\tthis.adsr_01_outval = 0;\n\t\tthis.adsr_01_startingpoint = 0;\n\t\tthis.adsr_01_setupDone = false;\n\t\tthis.voiceIndex = 0;\n\t\tthis.noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.parameterOffset = 0;\n\t} // end constructor\n\tlinearinterp(frac, x, y) {\n\t    return x + (y - x) * frac;\n\t}\n\tsamplerate() {\n\t    return this.sr;\n\t}\n\tgetParameterIndexForID(paramid) {\n\t    return -1;\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 1;\n\t}\n\tprocessMidiEvent(time, port, data, length) {\n\t    this.updateTime(time);\n\t    this.notein_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);\n\t}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tadsr_01_mute_bang() {}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t\n\t    if (this.getIsMuted())\n\t        return;\n\t\n\t    this.cycle_01_perform(this.cycle_01_frequency, this.signals[0], this.dummyBuffer, n);\n\t\n\t    this.adsr_01_perform(\n\t        this.adsr_01_trigger,\n\t        this.adsr_01_attack,\n\t        this.adsr_01_decay,\n\t        this.adsr_01_sustain,\n\t        this.adsr_01_release,\n\t        this.signals[1],\n\t        n\n\t    );\n\t\n\t    this.dspexpr_01_perform(this.signals[0], this.signals[1], this.signals[2], n);\n\t    this.signaladder_01_perform(this.signals[2], out1, out1, n);\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sr, maxvs) {\n\t    if (this.maxvs < maxvs || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 3; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxvs);\n\t        }\n\t\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxvs);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxvs);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sr != this.sr;\n\t    var maxvsChanged = maxvs != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxvs;\n\t        this.maxvs = maxvs;\n\t        this.sr = sr;\n\t        this.invsr = 1 / sr;\n\t    }\n\t\n\t    this.cycle_01_dspsetup(forceDSPSetup);\n\t    this.adsr_01_dspsetup(forceDSPSetup);\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sr);\n\t}\n\tmsToSamps(ms, sr) {\n\t    return ms * sr * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    return 0;\n\t}\n\tinitializeObjects(state) {}\n\tsetVoiceIndex(index) {\n\t    this.voiceIndex = index;\n\t}\n\tsetNoteNumber(noteNumber) {\n\t    this.noteNumber = noteNumber;\n\t}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 1;\n\t}\n\tgetState(state) {\n\t    state[eventTargetKey] = this;\n\t    state[patcherSerialKey] = this.getPatcherSerial();\n\t    state[\"dspexpr_a1_s01\"] = 1;\n\t    state[\"dspexpr_a1_s01_in1\"] = this.dspexpr_01_in1;\n\t    state[\"dspexpr_a1_s01_in2\"] = this.dspexpr_01_in2;\n\t    state[\"expr_s02\"] = 1;\n\t    state[\"expr_s02_in1\"] = this.expr_01_in1;\n\t    state[\"expr_s02_in2\"] = this.expr_01_in2;\n\t    state[\"expr_s02_out1\"] = this.expr_01_out1;\n\t    state[\"stripnote_s01\"] = 1;\n\t    state[\"stripnote_s01_velocity\"] = this.stripnote_01_velocity;\n\t    state[\"cycle_s01\"] = 1;\n\t    state[\"cycle_s01_frequency\"] = this.cycle_01_frequency;\n\t    state[\"notein_s01\"] = 1;\n\t    state[\"notein_s01_channel\"] = this.notein_01_channel;\n\t    state[\"expr_s01\"] = 1;\n\t    state[\"expr_s01_in1\"] = this.expr_02_in1;\n\t    state[\"expr_s01_in2\"] = this.expr_02_in2;\n\t    state[\"expr_s01_out1\"] = this.expr_02_out1;\n\t    state[\"adsr_a1_s01\"] = 1;\n\t    state[\"adsr_a1_s01_trigger\"] = this.adsr_01_trigger;\n\t    state[\"adsr_a1_s01_attack\"] = this.adsr_01_attack;\n\t    state[\"adsr_a1_s01_decay\"] = this.adsr_01_decay;\n\t    state[\"adsr_a1_s01_sustain\"] = this.adsr_01_sustain;\n\t    state[\"adsr_a1_s01_release\"] = this.adsr_01_release;\n\t    state[\"rnbo_s01p_audioProcessSampleCount\"] = this.audioProcessSampleCount;\n\t    state[\"rnbo_s01p_zeroBuffer\"] = this.zeroBuffer;\n\t    state[\"rnbo_s01p_dummyBuffer\"] = this.dummyBuffer;\n\t    state[\"rnbo_s01p_vs\"] = this.vs;\n\t    state[\"rnbo_s01p_maxvs\"] = this.maxvs;\n\t    state[\"rnbo_s01p_sr\"] = this.sr;\n\t    state[\"rnbo_s01p_invsr\"] = this.invsr;\n\t    state[\"expr_s02_x_lastInValue\"] = this.expr_01_x_lastInValue;\n\t    state[\"expr_s02_x_lastOutValue\"] = this.expr_01_x_lastOutValue;\n\t    state[\"expr_s02_x_lastTuning\"] = this.expr_01_x_lastTuning;\n\t    state[\"cycle_s01_wrap\"] = this.cycle_01_wrap;\n\t    state[\"cycle_s01_phasei\"] = this.cycle_01_phasei;\n\t    state[\"cycle_s01_f2i\"] = this.cycle_01_f2i;\n\t    state[\"cycle_s01_ph_currentPhase\"] = this.cycle_01_ph_currentPhase;\n\t    state[\"cycle_s01_ph_conv\"] = this.cycle_01_ph_conv;\n\t    state[\"cycle_s01_setupDone\"] = this.cycle_01_setupDone;\n\t    state[\"notein_s01_status\"] = this.notein_01_status;\n\t    state[\"notein_s01_byte1\"] = this.notein_01_byte1;\n\t    state[\"notein_s01_inchan\"] = this.notein_01_inchan;\n\t    state[\"adsr_a1_s01_phase\"] = this.adsr_01_phase;\n\t    state[\"adsr_a1_s01_mspersamp\"] = this.adsr_01_mspersamp;\n\t    state[\"adsr_a1_s01_time\"] = this.adsr_01_time;\n\t    state[\"adsr_a1_s01_lasttrigger\"] = this.adsr_01_lasttrigger;\n\t    state[\"adsr_a1_s01_amplitude\"] = this.adsr_01_amplitude;\n\t    state[\"adsr_a1_s01_triggerval\"] = this.adsr_01_triggerval;\n\t    state[\"adsr_a1_s01_outval\"] = this.adsr_01_outval;\n\t    state[\"adsr_a1_s01_startingpoint\"] = this.adsr_01_startingpoint;\n\t    state[\"adsr_a1_s01_setupDone\"] = this.adsr_01_setupDone;\n\t    state[\"rnbo_s01p_noteNumber\"] = this.noteNumber;\n\t    state[\"rnbo_s01p_isMuted\"] = this.isMuted;\n\t}\n\tsetState(state) {\n\t    var shouldRestore = state[patcherSerialKey] == this.getPatcherSerial();\n\t\n\t    if (shouldRestore) {\n\t        if (containsValue(state[eventTargetKey])) {\n\t            this.getEngine().updatePatcherEventTarget(state[eventTargetKey], this);\n\t        }\n\t\n\t        if (containsValue(state[\"dspexpr_a1_s01_in1\"])) {\n\t            this.dspexpr_01_in1 = state[\"dspexpr_a1_s01_in1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"dspexpr_a1_s01_in2\"])) {\n\t            this.dspexpr_01_in2 = state[\"dspexpr_a1_s01_in2\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s02_in1\"])) {\n\t            this.expr_01_in1 = state[\"expr_s02_in1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s02_in2\"])) {\n\t            this.expr_01_in2 = state[\"expr_s02_in2\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s02_out1\"])) {\n\t            this.expr_01_out1 = state[\"expr_s02_out1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"stripnote_s01_velocity\"])) {\n\t            this.stripnote_01_velocity = state[\"stripnote_s01_velocity\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_frequency\"])) {\n\t            this.cycle_01_frequency = state[\"cycle_s01_frequency\"];\n\t        }\n\t\n\t        if (containsValue(state[\"notein_s01_channel\"])) {\n\t            this.notein_01_channel = state[\"notein_s01_channel\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s01_in1\"])) {\n\t            this.expr_02_in1 = state[\"expr_s01_in1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s01_in2\"])) {\n\t            this.expr_02_in2 = state[\"expr_s01_in2\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s01_out1\"])) {\n\t            this.expr_02_out1 = state[\"expr_s01_out1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_trigger\"])) {\n\t            this.adsr_01_trigger = state[\"adsr_a1_s01_trigger\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_attack\"])) {\n\t            this.adsr_01_attack = state[\"adsr_a1_s01_attack\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_decay\"])) {\n\t            this.adsr_01_decay = state[\"adsr_a1_s01_decay\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_sustain\"])) {\n\t            this.adsr_01_sustain = state[\"adsr_a1_s01_sustain\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_release\"])) {\n\t            this.adsr_01_release = state[\"adsr_a1_s01_release\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_audioProcessSampleCount\"])) {\n\t            this.audioProcessSampleCount = state[\"rnbo_s01p_audioProcessSampleCount\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_zeroBuffer\"])) {\n\t            this.zeroBuffer = state[\"rnbo_s01p_zeroBuffer\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_dummyBuffer\"])) {\n\t            this.dummyBuffer = state[\"rnbo_s01p_dummyBuffer\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_vs\"])) {\n\t            this.vs = state[\"rnbo_s01p_vs\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_maxvs\"])) {\n\t            this.maxvs = state[\"rnbo_s01p_maxvs\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_sr\"])) {\n\t            this.sr = state[\"rnbo_s01p_sr\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_invsr\"])) {\n\t            this.invsr = state[\"rnbo_s01p_invsr\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s02_x_lastInValue\"])) {\n\t            this.expr_01_x_lastInValue = state[\"expr_s02_x_lastInValue\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s02_x_lastOutValue\"])) {\n\t            this.expr_01_x_lastOutValue = state[\"expr_s02_x_lastOutValue\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s02_x_lastTuning\"])) {\n\t            this.expr_01_x_lastTuning = state[\"expr_s02_x_lastTuning\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_wrap\"])) {\n\t            this.cycle_01_wrap = state[\"cycle_s01_wrap\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_phasei\"])) {\n\t            this.cycle_01_phasei = state[\"cycle_s01_phasei\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_f2i\"])) {\n\t            this.cycle_01_f2i = state[\"cycle_s01_f2i\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_ph_currentPhase\"])) {\n\t            this.cycle_01_ph_currentPhase = state[\"cycle_s01_ph_currentPhase\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_ph_conv\"])) {\n\t            this.cycle_01_ph_conv = state[\"cycle_s01_ph_conv\"];\n\t        }\n\t\n\t        if (containsValue(state[\"cycle_s01_setupDone\"])) {\n\t            this.cycle_01_setupDone = state[\"cycle_s01_setupDone\"];\n\t        }\n\t\n\t        if (containsValue(state[\"notein_s01_status\"])) {\n\t            this.notein_01_status = state[\"notein_s01_status\"];\n\t        }\n\t\n\t        if (containsValue(state[\"notein_s01_byte1\"])) {\n\t            this.notein_01_byte1 = state[\"notein_s01_byte1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"notein_s01_inchan\"])) {\n\t            this.notein_01_inchan = state[\"notein_s01_inchan\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_phase\"])) {\n\t            this.adsr_01_phase = state[\"adsr_a1_s01_phase\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_mspersamp\"])) {\n\t            this.adsr_01_mspersamp = state[\"adsr_a1_s01_mspersamp\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_time\"])) {\n\t            this.adsr_01_time = state[\"adsr_a1_s01_time\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_lasttrigger\"])) {\n\t            this.adsr_01_lasttrigger = state[\"adsr_a1_s01_lasttrigger\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_amplitude\"])) {\n\t            this.adsr_01_amplitude = state[\"adsr_a1_s01_amplitude\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_triggerval\"])) {\n\t            this.adsr_01_triggerval = state[\"adsr_a1_s01_triggerval\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_outval\"])) {\n\t            this.adsr_01_outval = state[\"adsr_a1_s01_outval\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_startingpoint\"])) {\n\t            this.adsr_01_startingpoint = state[\"adsr_a1_s01_startingpoint\"];\n\t        }\n\t\n\t        if (containsValue(state[\"adsr_a1_s01_setupDone\"])) {\n\t            this.adsr_01_setupDone = state[\"adsr_a1_s01_setupDone\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_noteNumber\"])) {\n\t            this.noteNumber = state[\"rnbo_s01p_noteNumber\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01p_isMuted\"])) {\n\t            this.isMuted = state[\"rnbo_s01p_isMuted\"];\n\t        }\n\t    }\n\t}\n\tgetPreset(preset) {}\n\tprocessTempoEvent(time, tempo) {\n\t    this.updateTime(time);\n\t}\n\tprocessTransportEvent(time, state) {\n\t    this.updateTime(time);\n\t}\n\tprocessBeatTimeEvent(time, beattime) {\n\t    this.updateTime(time);\n\t}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {\n\t    this.updateTime(time);\n\t}\n\tsetParameterValue(index, v, time) {\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetPolyParameterValue(voices, index) {\n\t    switch (index) {\n\t    default:\n\t        return voices[0].getParameterValue(index);\n\t    }\n\t}\n\tsetPolyParameterValue(voices, index, value, time) {\n\t    switch (index) {\n\t    default:\n\t        for (var i = 0; i < 6; i++)\n\t            voices[i].setParameterValue(index, value, time);\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0;\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t\n\t        }\n\t    }\n\t}\n\tsendParameter(index) {\n\t    if (this.voiceIndex == 1)\n\t        this.getPatcher().sendParameter(index + this.parameterOffset);\n\t}\n\tsendPolyParameter(index, voiceIndex) {\n\t    this.getPatcher().sendParameter(index + this.parameterOffset + voiceIndex - 1);\n\t}\n\tsetParameterOffset(offset) {\n\t    this.parameterOffset = offset;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.getPatcher().scheduleParamInit(index + this.parameterOffset, order);\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 687481608:\n\t        this.adsr_01_mute_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t\n\t    }\n\t}\n\tprocessListMessage(tag, objectId, time, payload) {\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t\n\t    }\n\t}\n\tprocessBangMessage(tag, objectId, time) {\n\t    switch (tag) {\n\t\n\t    }\n\t}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    return 0;\n\t}\n\tstartup(state) {\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t}\n\tgetDataRef(index) {\n\t    return null;\n\t}\n\tgetNumDataRefs() {\n\t    return 0;\n\t}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 0:\n\t        this.expr_01_x_buffer = new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256);\n\t        break;\n\t    case 1:\n\t        this.cycle_01_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t        this.cycle_01_bufferUpdated();\n\t        break;\n\t    }\n\t}\n\tinitialize(state) {\n\t    this.assign_defaults();\n\t    this.setState(state);\n\t    this.expr_01_x_buffer = new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256);\n\t    this.cycle_01_buffer = new Float64Buffer(this.getPatcher().RNBODefaultSinus);\n\t}\n\tallocateDataRefs() {\n\t    this.expr_01_x_buffer.requestSize(65536, 1);\n\t    this.expr_01_x_buffer.setSampleRate(this.sr);\n\t    this.cycle_01_buffer.requestSize(16384, 1);\n\t    this.cycle_01_buffer.setSampleRate(this.sr);\n\t    this.expr_01_x_buffer = this.expr_01_x_buffer.allocateIfNeeded();\n\t    this.cycle_01_buffer = this.cycle_01_buffer.allocateIfNeeded();\n\t}\n\tnotein_01_outchannel_set(v) {}\n\tnotein_01_releasevelocity_set(v) {}\n\tadsr_01_trigger_set(v) {\n\t    this.adsr_01_trigger = v;\n\t}\n\texpr_02_out1_set(v) {\n\t    this.expr_02_out1 = v;\n\t    this.adsr_01_trigger_set(this.expr_02_out1);\n\t}\n\texpr_02_in1_set(v) {\n\t    this.expr_02_in1 = v;\n\t\n\t    this.expr_02_out1_set(\n\t        (this.expr_02_in2 == 0. ? 0. : (this.expr_02_in2 == 0. ? 0. : this.expr_02_in1 / this.expr_02_in2))\n\t    );\n\t}\n\tstripnote_01_velocity_set(v) {\n\t    this.stripnote_01_velocity = v;\n\t}\n\tnotein_01_velocity_set(v) {\n\t    this.expr_02_in1_set(v);\n\t    this.stripnote_01_velocity_set(v);\n\t}\n\tstripnote_01_velocity_out_set(v) {}\n\tcycle_01_frequency_set(v) {\n\t    this.cycle_01_frequency = v;\n\t}\n\texpr_01_out1_set(v) {\n\t    this.expr_01_out1 = v;\n\t    this.cycle_01_frequency_set(this.expr_01_out1);\n\t}\n\texpr_01_in1_set(v) {\n\t    this.expr_01_in1 = v;\n\t    this.expr_01_out1_set(this.expr_01_x_next(this.expr_01_in1, this.expr_01_in2));\n\t}\n\tstripnote_01_notenumber_out_set(v) {\n\t    this.expr_01_in1_set(v);\n\t}\n\tstripnote_01_notenumber_set(v) {\n\t    if (this.stripnote_01_velocity) {\n\t        this.stripnote_01_velocity_out_set(this.stripnote_01_velocity);\n\t        this.stripnote_01_notenumber_out_set(v);\n\t    }\n\t}\n\tnotein_01_notenumber_set(v) {\n\t    this.stripnote_01_notenumber_set(v);\n\t}\n\tnotein_01_midihandler(status, channel, port, data, length) {\n\t    if (channel == this.notein_01_channel || this.notein_01_channel == 0) {\n\t        if (status == 144 || status == 128) {\n\t            this.notein_01_outchannel_set(channel);\n\t\n\t            if (status == 128) {\n\t                this.notein_01_releasevelocity_set(data[2]);\n\t                this.notein_01_velocity_set(0);\n\t            } else {\n\t                this.notein_01_releasevelocity_set(0);\n\t                this.notein_01_velocity_set(data[2]);\n\t            }\n\t\n\t            this.notein_01_notenumber_set(data[1]);\n\t        }\n\t    }\n\t}\n\tmidiouthelper_midiout_set(v) {}\n\tcycle_01_perform(frequency, out1, out2, n) {\n\t    var cycle_01_phasei = this.cycle_01_phasei;\n\t    var cycle_01_f2i = this.cycle_01_f2i;\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        {\n\t            let pincr = uint32_trunc(frequency * cycle_01_f2i);\n\t            let idx = uint32_rshift(cycle_01_phasei, 18);\n\t            let frac = (cycle_01_phasei & 262143) * 3.81471181759574e-6;\n\t            let y0 = this.cycle_01_buffer[idx];\n\t            let y1 = this.cycle_01_buffer[idx + 1 & 16383];\n\t            let y = y0 + frac * (y1 - y0);\n\t            cycle_01_phasei = uint32_add(cycle_01_phasei, pincr);\n\t            out1[i] = y;\n\t            out2[i] = cycle_01_phasei * 0.232830643653869629e-9;\n\t            continue;\n\t        }\n\t    }\n\t\n\t    this.cycle_01_phasei = cycle_01_phasei;\n\t}\n\tadsr_01_perform(trigger, attack, decay, sustain, release, out, n) {\n\t    var adsr_01_time = this.adsr_01_time;\n\t    var adsr_01_amplitude = this.adsr_01_amplitude;\n\t    var adsr_01_outval = this.adsr_01_outval;\n\t    var adsr_01_startingpoint = this.adsr_01_startingpoint;\n\t    var adsr_01_phase = this.adsr_01_phase;\n\t    var adsr_01_triggerval = this.adsr_01_triggerval;\n\t    var adsr_01_lasttrigger = this.adsr_01_lasttrigger;\n\t    var adsr_01_mspersamp = this.adsr_01_mspersamp;\n\t    var bangMute = false;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        let clampedattack = (5 > adsr_01_mspersamp ? 5 : adsr_01_mspersamp);\n\t        let clampeddecay = (30 > adsr_01_mspersamp ? 30 : adsr_01_mspersamp);\n\t        let clampedrelease = (250 > adsr_01_mspersamp ? 250 : adsr_01_mspersamp);\n\t        adsr_01_lasttrigger = adsr_01_triggerval;\n\t        adsr_01_triggerval = trigger;\n\t\n\t        if (adsr_01_lasttrigger == 0.0 && adsr_01_triggerval != 0.0) {\n\t            if (adsr_01_phase != 0) {\n\t                adsr_01_startingpoint = adsr_01_outval;\n\t            } else {\n\t                adsr_01_startingpoint = 0;\n\t            }\n\t\n\t            adsr_01_amplitude = adsr_01_triggerval;\n\t            adsr_01_phase = 1;\n\t            adsr_01_time = 0.0;\n\t            bangMute = false;\n\t        } else if (adsr_01_lasttrigger != 0.0 && adsr_01_triggerval == 0.0) {\n\t            if (adsr_01_phase != 4 && adsr_01_phase != 0) {\n\t                adsr_01_phase = 4;\n\t                adsr_01_amplitude = adsr_01_outval;\n\t                adsr_01_time = 0.0;\n\t            }\n\t        }\n\t\n\t        adsr_01_time += adsr_01_mspersamp;\n\t\n\t        if (adsr_01_phase == 0) {\n\t            adsr_01_outval = 0;\n\t        } else if (adsr_01_phase == 1) {\n\t            if (adsr_01_time > clampedattack) {\n\t                adsr_01_time -= clampedattack;\n\t                adsr_01_phase = 2;\n\t                adsr_01_outval = adsr_01_amplitude;\n\t            } else {\n\t                adsr_01_outval = (adsr_01_amplitude - adsr_01_startingpoint) * adsr_01_time / clampedattack + adsr_01_startingpoint;\n\t            }\n\t        } else if (adsr_01_phase == 2) {\n\t            if (adsr_01_time > clampeddecay) {\n\t                adsr_01_time -= clampeddecay;\n\t                adsr_01_phase = 3;\n\t                adsr_01_outval = adsr_01_amplitude * 0.4;\n\t            } else {\n\t                adsr_01_outval = adsr_01_amplitude * 0.4 + (adsr_01_amplitude - adsr_01_amplitude * 0.4) * (1. - adsr_01_time / clampeddecay);\n\t            }\n\t        } else if (adsr_01_phase == 3) {\n\t            adsr_01_outval = adsr_01_amplitude * 0.4;\n\t        } else if (adsr_01_phase == 4) {\n\t            if (adsr_01_time > clampedrelease) {\n\t                adsr_01_time = 0;\n\t                adsr_01_phase = 0;\n\t                adsr_01_outval = 0;\n\t                adsr_01_amplitude = 0;\n\t                bangMute = true;\n\t            } else {\n\t                adsr_01_outval = adsr_01_amplitude * (1.0 - adsr_01_time / clampedrelease);\n\t            }\n\t        }\n\t\n\t        out[i] = adsr_01_outval;\n\t    }\n\t\n\t    if (bangMute) {\n\t        this.getEngine().scheduleClockEventWithValue(this, 687481608, this.sampsToMs(this.vs) + this.currentTime, 0);;\n\t    }\n\t\n\t    this.adsr_01_lasttrigger = adsr_01_lasttrigger;\n\t    this.adsr_01_triggerval = adsr_01_triggerval;\n\t    this.adsr_01_phase = adsr_01_phase;\n\t    this.adsr_01_startingpoint = adsr_01_startingpoint;\n\t    this.adsr_01_outval = adsr_01_outval;\n\t    this.adsr_01_amplitude = adsr_01_amplitude;\n\t    this.adsr_01_time = adsr_01_time;\n\t}\n\tdspexpr_01_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * in2[i];\n\t    }\n\t}\n\tsignaladder_01_perform(in1, in2, out, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out[i] = in1[i] + in2[i];\n\t    }\n\t}\n\texpr_01_x_next(midivalue, tuning) {\n\t    if (midivalue == this.expr_01_x_lastInValue && tuning == this.expr_01_x_lastTuning)\n\t        return this.expr_01_x_lastOutValue;\n\t\n\t    this.expr_01_x_lastInValue = midivalue;\n\t    this.expr_01_x_lastTuning = tuning;\n\t    let result = 0;\n\t\n\t    {\n\t        result = rnbo_exp(.057762265 * (midivalue - 69.0));\n\t    }\n\t\n\t    this.expr_01_x_lastOutValue = tuning * result;\n\t    return this.expr_01_x_lastOutValue;\n\t}\n\tcycle_01_ph_next(freq, reset) {\n\t    {\n\t        {\n\t            if (reset >= 0.)\n\t                this.cycle_01_ph_currentPhase = reset;\n\t        }\n\t    }\n\t\n\t    const pincr = freq * this.cycle_01_ph_conv;\n\t\n\t    if (this.cycle_01_ph_currentPhase < 0.)\n\t        this.cycle_01_ph_currentPhase = 1. + this.cycle_01_ph_currentPhase;\n\t\n\t    if (this.cycle_01_ph_currentPhase > 1.)\n\t        this.cycle_01_ph_currentPhase = this.cycle_01_ph_currentPhase - 1.;\n\t\n\t    var tmp = this.cycle_01_ph_currentPhase;\n\t    this.cycle_01_ph_currentPhase += pincr;\n\t    return tmp;\n\t}\n\tcycle_01_ph_dspsetup() {\n\t    this.cycle_01_ph_conv = 1 / this.sr;\n\t}\n\tcycle_01_dspsetup(force) {\n\t    if (this.cycle_01_setupDone && !force)\n\t        return;\n\t\n\t    this.cycle_01_phasei = 0;\n\t    this.cycle_01_f2i = 4294967296 / this.samplerate();\n\t    this.cycle_01_wrap = this.cycle_01_buffer.getSize() - 1;\n\t    this.cycle_01_setupDone = true;\n\t    this.cycle_01_ph_dspsetup();\n\t}\n\tcycle_01_bufferUpdated() {\n\t    this.cycle_01_wrap = this.cycle_01_buffer.getSize() - 1;\n\t}\n\tadsr_01_dspsetup(force) {\n\t    if (this.adsr_01_setupDone && !force)\n\t        return;\n\t\n\t    this.adsr_01_mspersamp = 1000 / this.sr;\n\t    this.adsr_01_setupDone = true;\n\t}\n\tmidiouthelper_sendMidi(v) {\n\t    this.midiouthelper_midiout_set(v);\n\t}\n\tupdateTime(time) {\n\t    this.currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = rnbo_floor(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= this.vs)\n\t        this.sampleOffsetIntoNextAudioBuffer = this.vs - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this.getPatcher().getTopLevelPatcher();\n\t}\n} // end class\n\nclass RNBOPatcher {\n\tconstructor() {\n\t\tthis.dspexpr_02_in1 = 0;\n\t\tthis.dspexpr_02_in2 = 0.25;\n\t\tthis.pack_01_in1 = 0;\n\t\tthis.pack_01_in2 = 0;\n\t\tthis.midiformat_01_channel = 0;\n\t\tthis.midiformat_01_channel_setter(this.midiformat_01_channel);\n\t\tthis.midiformat_01_pitchbend = 64;\n\t\tthis.rnbo_01_target = 0;\n\t\tthis.rnbo_01_midiin = 0;\n\t\tthis.expr_03_in1 = 0;\n\t\tthis.expr_03_in2 = 48;\n\t\tthis.expr_03_out1 = 0;\n\t\tthis.random_01_limit = 12;\n\t\tthis.random_01_limit_setter(this.random_01_limit);\n\t\tthis.random_01_seed = 0;\n\t\tthis.makenote_01_notenumber = 0;\n\t\tthis.makenote_01_velocity = 127;\n\t\tthis.makenote_01_duration = 250;\n\t\tthis.metro_01_on = 1;\n\t\tthis.metro_01_interval = 250;\n\t\tthis.metro_01_interval_setter(this.metro_01_interval);\n\t\tthis.midinotecontroller_01_currenttarget = 0;\n\t\tthis.midinotecontroller_01_midiin = 0;\n\t\tthis.currentTime = 0;\n\t\tthis.audioProcessSampleCount = 0;\n\t\tthis.sampleOffsetIntoNextAudioBuffer = 0;\n\t\tthis.zeroBuffer = 0;\n\t\tthis.dummyBuffer = 0;\n\t\tthis.signals = new Array(1);\n\t\tthis.didAllocateSignals = 0;\n\t\tthis.vs = 0;\n\t\tthis.maxvs = 0;\n\t\tthis.sr = 44100;\n\t\tthis.invsr = 0.00002267573696;\n\t\tthis.rnbo_01_currentStatus = -1;\n\t\tthis.rnbo_01_mididata = new Array(3);\n\t\tthis.random_01_nz_last = 0;\n\t\tthis.random_01_nz_recip = 0;\n\t\tthis.makenote_01_noteStatus = 0;\n\t\tthis.midinotecontroller_01_currentStatus = -1;\n\t\tthis.midinotecontroller_01_status = -1;\n\t\tthis.midinotecontroller_01_byte1 = -1;\n\t\tthis.midinotecontroller_01_zone_masterchannel = 1;\n\t\tthis.midinotecontroller_01_zone_numnotechannels = 15;\n\t\tthis.midinotecontroller_01_zone_masterpitchbendrange = 2;\n\t\tthis.midinotecontroller_01_zone_pernotepitchbendrange = 48;\n\t\tthis.midinotecontroller_01_channel_pitchbend = new Array(16).fill(8192);\n\t\tthis.midinotecontroller_01_channel_pressure = new Array(16).fill(0);\n\t\tthis.midinotecontroller_01_channel_timbre = new Array(16).fill(0);\n\t\tthis.midinotecontroller_01_channel_sustain = new Array(16).fill(0);\n\t\tthis.midinotecontroller_01_voice_lastontime = [-1,-1,-1,-1,-1,-1];\n\t\tthis.midinotecontroller_01_voice_notenumber = [0,0,0,0,0,0];\n\t\tthis.midinotecontroller_01_voice_channel = [0,0,0,0,0,0];\n\t\tthis.midinotecontroller_01_voice_state = [0,0,0,0,0,0];\n\t\tthis.midinotecontroller_01_maxnotesdown = 128;\n\t\tthis.midinotecontroller_01_notesdown = new Array(129).fill(0);\n\t\tthis.midinotecontroller_01_note_lastvelocity = new Array(128).fill(0);\n\t\tthis.midinotecontroller_01_muteval = [0,0];\n\t\tthis.globaltransport_tempo = 0;\n\t\tthis.globaltransport_tempoNeedsReset = false;\n\t\tthis.globaltransport_lastTempo = 120;\n\t\tthis.globaltransport_state = 0;\n\t\tthis.globaltransport_stateNeedsReset = false;\n\t\tthis.globaltransport_lastState = 0;\n\t\tthis.globaltransport_beatTimeChanges = [0,0];\n\t\tthis.globaltransport_timeSignatureChanges = [4,4,0];\n\t\tthis.globaltransport_setupDone = false;\n\t\tthis.RNBODefaultMtofLookupTable256 = 0;\n\t\tthis.RNBODefaultSinus = 0;\n\t\tthis.makenote_01_noteStatusobj = 0;\n\t\tthis.voiceIndex = 0;\n\t\tthis.noteNumber = 0;\n\t\tthis.isMuted = 1;\n\t\tthis.paramInitIndices = [];\n\t\tthis.paramInitOrder = [];\n\t\tthis.rnbo_01 = new Array();\n\t} // end constructor\n\tlistquicksort(arr, sortindices, l, h, ascending) {\n\t    if (l < h) {\n\t        var p = this.listpartition(arr, sortindices, l, h, ascending);\n\t        this.listquicksort(arr, sortindices, l, p - 1, ascending);\n\t        this.listquicksort(arr, sortindices, p + 1, h, ascending);\n\t    }\n\t}\n\tlistpartition(arr, sortindices, l, h, ascending) {\n\t    var x = arr[h];\n\t    var i = l - 1;\n\t\n\t    for (var j = l; j <= h - 1; j++) {\n\t        var asc = ascending && arr[j] <= x;\n\t        var desc = !ascending && arr[j] >= x;\n\t\n\t        if (asc || desc) {\n\t            i++;\n\t            this.listswap(arr, i, j);\n\t            this.listswap(sortindices, i, j);\n\t        }\n\t    }\n\t\n\t    i++;\n\t    this.listswap(arr, i, h);\n\t    this.listswap(sortindices, i, h);\n\t    return i;\n\t}\n\tlistswap(arr, a, b) {\n\t    var tmp = arr[a];\n\t    arr[a] = arr[b];\n\t    arr[b] = tmp;\n\t}\n\trandom(low, high) {\n\t    let range = high - low;\n\t    return rand01() * range + low;\n\t}\n\ttempo() {\n\t    return this.getTopLevelPatcher().globaltransport_getTempo();\n\t}\n\tmstobeats(ms) {\n\t    return ms * this.tempo() * 0.008 / 480;\n\t}\n\tcurrenttime() {\n\t    return this.currentTime;\n\t}\n\tsampstoms(samps) {\n\t    return samps * 1000 / this.sr;\n\t}\n\tmakenote_01_noteOffClock_set(v) {\n\t    this.makenote_01_sendNoteOff(v);\n\t}\n\tmetro_01_tick_bang() {\n\t    this.metro_01_tickout_bang();\n\t    this.getEngine().flushClockEvents(this, 1260962393, false);;\n\t\n\t    if (this.metro_01_on) {\n\t        {\n\t            this.getEngine().scheduleClockEvent(this, 1260962393, this.metro_01_interval + this.currentTime);;\n\t        }\n\t    }\n\t}\n\tgetParameterIndexForID(paramid) {\n\t    return -1;\n\t}\n\tgetNumMidiInputPorts() {\n\t    return 0;\n\t}\n\tprocessMidiEvent(time, port, data, length) {}\n\tgetNumMidiOutputPorts() {\n\t    return 0;\n\t}\n\tprocess(inputs, numInputs, outputs, numOutputs, n) {\n\t    this.vs = n;\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t    var out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this.dummyBuffer);\n\t    this.rnbo_01_perform(this.signals[0], n);\n\t    this.dspexpr_02_perform(this.signals[0], this.dspexpr_02_in2, out1, n);\n\t    this.globaltransport_advance();\n\t    this.audioProcessSampleCount += this.vs;\n\t}\n\tprepareToProcess(sr, maxvs) {\n\t    if (this.maxvs < maxvs || !this.didAllocateSignals) {\n\t        var i;\n\t\n\t        for (i = 0; i < 1; i++) {\n\t            this.signals[i] = resizeSignal(this.signals[i], this.maxvs, maxvs);\n\t        }\n\t\n\t        this.globaltransport_tempo = resizeSignal(this.globaltransport_tempo, this.maxvs, maxvs);\n\t        this.globaltransport_state = resizeSignal(this.globaltransport_state, this.maxvs, maxvs);\n\t        this.zeroBuffer = resizeSignal(this.zeroBuffer, this.maxvs, maxvs);\n\t        this.dummyBuffer = resizeSignal(this.dummyBuffer, this.maxvs, maxvs);\n\t        this.didAllocateSignals = true;\n\t    }\n\t\n\t    var sampleRateChanged = sr != this.sr;\n\t    var maxvsChanged = maxvs != this.maxvs;\n\t    var forceDSPSetup = sampleRateChanged || maxvsChanged;\n\t\n\t    if (sampleRateChanged || maxvsChanged) {\n\t        this.vs = maxvs;\n\t        this.maxvs = maxvs;\n\t        this.sr = sr;\n\t        this.invsr = 1 / sr;\n\t    }\n\t\n\t    this.globaltransport_dspsetup(forceDSPSetup);\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].prepareToProcess(sr, maxvs);\n\t    }\n\t\n\t    if (sampleRateChanged)\n\t        this.onSampleRateChanged(sr);\n\t}\n\tmsToSamps(ms, sr) {\n\t    return ms * sr * 0.001;\n\t}\n\tsampsToMs(samps) {\n\t    return samps * (this.invsr * 1000);\n\t}\n\tgetMaxBlockSize() {\n\t    return this.maxvs;\n\t}\n\tgetSampleRate() {\n\t    return this.sr;\n\t}\n\thasFixedVectorSize() {\n\t    return false;\n\t}\n\tgetNumInputChannels() {\n\t    return 0;\n\t}\n\tgetNumOutputChannels() {\n\t    return 1;\n\t}\n\tsetProbingTarget(id) {\n\t    switch (id) {\n\t    default:\n\t        this.setProbingIndex(-1);\n\t        break;\n\t    }\n\t}\n\tsetProbingIndex(index) {}\n\tgetProbingChannels(outletId) {\n\t    return 0;\n\t}\n\tgetDataRef(index) {\n\t    switch (index) {\n\t    case 0:\n\t        return addressOf(this.RNBODefaultMtofLookupTable256);\n\t        break;\n\t    case 1:\n\t        return addressOf(this.RNBODefaultSinus);\n\t        break;\n\t    case 2:\n\t        return addressOf(this.makenote_01_noteStatusobj);\n\t        break;\n\t    default:\n\t        return 0;\n\t    }\n\t}\n\tgetNumDataRefs() {\n\t    return 3;\n\t}\n\tfillRNBODefaultMtofLookupTable256(ref) {\n\t    var buffer;\n\t    buffer = new Float64Buffer(ref);\n\t    let bufsize = buffer.getSize();\n\t\n\t    for (let i = 0; i < bufsize; i++) {\n\t        let midivalue = -256. + 512. / (bufsize - 1) * i;\n\t        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));\n\t    }\n\t}\n\tfillRNBODefaultSinus(ref) {\n\t    var buffer;\n\t    buffer = new Float64Buffer(ref);\n\t    let bufsize = buffer.getSize();\n\t\n\t    for (let i = 0; i < bufsize; i++) {\n\t        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);\n\t    }\n\t}\n\tfillDataRef(index, ref) {\n\t    switch (index) {\n\t    case 0:\n\t        this.fillRNBODefaultMtofLookupTable256(ref);\n\t        break;\n\t    case 1:\n\t        this.fillRNBODefaultSinus(ref);\n\t        break;\n\t    }\n\t}\n\tzeroDataRef(ref) {\n\t    ref.setZero();\n\t}\n\tprocessDataViewUpdate(index, time) {\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 2:\n\t        this.makenote_01_noteStatus = new IntBuffer(this.makenote_01_noteStatusobj);\n\t        break;\n\t    }\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].processDataViewUpdate(index, time);\n\t    }\n\t}\n\tinitialize(state) {\n\t    this.RNBODefaultMtofLookupTable256 = initDataRef(\"RNBODefaultMtofLookupTable256\", true, 0);\n\t    this.RNBODefaultSinus = initDataRef(\"RNBODefaultSinus\", true, 0);\n\t    this.makenote_01_noteStatusobj = initDataRef(\"makenote_01_noteStatusobj\", true, 0);\n\t    this.assign_defaults();\n\t    this.setState(state);\n\t    this.RNBODefaultMtofLookupTable256.setIndex(0);\n\t    this.RNBODefaultSinus.setIndex(1);\n\t    this.makenote_01_noteStatusobj.setIndex(2);\n\t    this.makenote_01_noteStatus = new IntBuffer(this.makenote_01_noteStatusobj);\n\t    this.initializeObjects(state);\n\t    this.allocateDataRefs();\n\t    this.startup(state);\n\t}\n\tinitializeObjects(state) {\n\t    var shouldRestore = state[patcherSerialKey] == this.getPatcherSerial();\n\t\n\t    if (!shouldRestore || !containsValue(state[\"random_s01_nz_init\"]))\n\t        this.random_01_nz_init();\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].initializeObjects(getSubStateAt(state, \"rnbo_s01p\", i));\n\t    }\n\t}\n\tallocateDataRefs() {\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].allocateDataRefs();\n\t    }\n\t\n\t    this.makenote_01_noteStatus.requestSize(128);\n\t\n\t    if (this.RNBODefaultMtofLookupTable256.hasRequestedSize()) {\n\t        if (this.RNBODefaultMtofLookupTable256.wantsFill())\n\t            this.fillRNBODefaultMtofLookupTable256(this.RNBODefaultMtofLookupTable256);\n\t\n\t        this.getEngine().sendDataRefUpdated(0);\n\t    }\n\t\n\t    if (this.RNBODefaultSinus.hasRequestedSize()) {\n\t        if (this.RNBODefaultSinus.wantsFill())\n\t            this.fillRNBODefaultSinus(this.RNBODefaultSinus);\n\t\n\t        this.getEngine().sendDataRefUpdated(1);\n\t    }\n\t\n\t    this.makenote_01_noteStatus = this.makenote_01_noteStatus.allocateIfNeeded();\n\t\n\t    if (this.makenote_01_noteStatusobj.hasRequestedSize()) {\n\t        if (this.makenote_01_noteStatusobj.wantsFill())\n\t            this.zeroDataRef(this.makenote_01_noteStatusobj);\n\t\n\t        this.getEngine().sendDataRefUpdated(2);\n\t    }\n\t}\n\tgetIsMuted() {\n\t    return this.isMuted;\n\t}\n\tsetIsMuted(v) {\n\t    this.isMuted = v;\n\t}\n\tgetPatcherSerial() {\n\t    return 1;\n\t}\n\tgetState(state) {\n\t    state[eventTargetKey] = this;\n\t    state[patcherSerialKey] = this.getPatcherSerial();\n\t    state[\"dspexpr_a1_s01\"] = 1;\n\t    state[\"dspexpr_a1_s01_in1\"] = this.dspexpr_02_in1;\n\t    state[\"dspexpr_a1_s01_in2\"] = this.dspexpr_02_in2;\n\t    state[\"pack_s01\"] = 1;\n\t    state[\"pack_s01_in1\"] = this.pack_01_in1;\n\t    state[\"pack_s01_in2\"] = this.pack_01_in2;\n\t    state[\"midiformat_s01\"] = 1;\n\t    state[\"midiformat_s01_channel\"] = this.midiformat_01_channel;\n\t    state[\"midiformat_s01_pitchbend\"] = this.midiformat_01_pitchbend;\n\t    state[\"rnbo_s01_target\"] = this.rnbo_01_target;\n\t    state[\"rnbo_s01_midiin\"] = this.rnbo_01_midiin;\n\t    state[\"expr_s01\"] = 1;\n\t    state[\"expr_s01_in1\"] = this.expr_03_in1;\n\t    state[\"expr_s01_in2\"] = this.expr_03_in2;\n\t    state[\"expr_s01_out1\"] = this.expr_03_out1;\n\t    state[\"random_s01\"] = 1;\n\t    state[\"random_s01_nz_init\"] = 1;\n\t    state[\"random_s01_limit\"] = this.random_01_limit;\n\t    state[\"random_s01_seed\"] = this.random_01_seed;\n\t    state[\"makenote_s01\"] = 1;\n\t    state[\"makenote_s01_notenumber\"] = this.makenote_01_notenumber;\n\t    state[\"makenote_s01_velocity\"] = this.makenote_01_velocity;\n\t    state[\"makenote_s01_duration\"] = this.makenote_01_duration;\n\t    state[\"metro_s01\"] = 1;\n\t    state[\"metro_s01_on\"] = this.metro_01_on;\n\t    state[\"metro_s01_interval\"] = this.metro_01_interval;\n\t    state[\"midinotecontroller_s00\"] = 1;\n\t    state[\"midinotecontroller_s00_currenttarget\"] = this.midinotecontroller_01_currenttarget;\n\t    state[\"midinotecontroller_s00_midiin\"] = this.midinotecontroller_01_midiin;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_audioProcessSampleCount\"] = this.audioProcessSampleCount;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_zeroBuffer\"] = this.zeroBuffer;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_dummyBuffer\"] = this.dummyBuffer;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_vs\"] = this.vs;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_maxvs\"] = this.maxvs;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_sr\"] = this.sr;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_invsr\"] = this.invsr;\n\t    state[\"rnbo_s01_currentStatus\"] = this.rnbo_01_currentStatus;\n\t    state[\"random_s01_nz_last\"] = this.random_01_nz_last;\n\t    state[\"random_s01_nz_recip\"] = this.random_01_nz_recip;\n\t    state[\"midinotecontroller_s00_currentStatus\"] = this.midinotecontroller_01_currentStatus;\n\t    state[\"midinotecontroller_s00_status\"] = this.midinotecontroller_01_status;\n\t    state[\"midinotecontroller_s00_byte1\"] = this.midinotecontroller_01_byte1;\n\t    state[\"midinotecontroller_s00_zone_masterchannel\"] = this.midinotecontroller_01_zone_masterchannel;\n\t    state[\"midinotecontroller_s00_zone_numnotechannels\"] = this.midinotecontroller_01_zone_numnotechannels;\n\t    state[\"midinotecontroller_s00_zone_masterpitchbendrange\"] = this.midinotecontroller_01_zone_masterpitchbendrange;\n\t    state[\"midinotecontroller_s00_zone_pernotepitchbendrange\"] = this.midinotecontroller_01_zone_pernotepitchbendrange;\n\t    state[\"midinotecontroller_s00_channel_pitchbend\"] = this.midinotecontroller_01_channel_pitchbend;\n\t    state[\"midinotecontroller_s00_channel_pressure\"] = this.midinotecontroller_01_channel_pressure;\n\t    state[\"midinotecontroller_s00_channel_timbre\"] = this.midinotecontroller_01_channel_timbre;\n\t    state[\"midinotecontroller_s00_channel_sustain\"] = this.midinotecontroller_01_channel_sustain;\n\t    state[\"midinotecontroller_s00_voice_lastontime\"] = this.midinotecontroller_01_voice_lastontime;\n\t    state[\"midinotecontroller_s00_voice_notenumber\"] = this.midinotecontroller_01_voice_notenumber;\n\t    state[\"midinotecontroller_s00_voice_channel\"] = this.midinotecontroller_01_voice_channel;\n\t    state[\"midinotecontroller_s00_voice_state\"] = this.midinotecontroller_01_voice_state;\n\t    state[\"midinotecontroller_s00_maxnotesdown\"] = this.midinotecontroller_01_maxnotesdown;\n\t    state[\"midinotecontroller_s00_notesdown\"] = this.midinotecontroller_01_notesdown;\n\t    state[\"midinotecontroller_s00_note_lastvelocity\"] = this.midinotecontroller_01_note_lastvelocity;\n\t    state[\"midinotecontroller_s00_muteval\"] = this.midinotecontroller_01_muteval;\n\t    state[\"globaltransport_s01\"] = 1;\n\t    state[\"globaltransport_s01_tempo\"] = this.globaltransport_tempo;\n\t    state[\"globaltransport_s01_tempoNeedsReset\"] = this.globaltransport_tempoNeedsReset;\n\t    state[\"globaltransport_s01_lastTempo\"] = this.globaltransport_lastTempo;\n\t    state[\"globaltransport_s01_state\"] = this.globaltransport_state;\n\t    state[\"globaltransport_s01_stateNeedsReset\"] = this.globaltransport_stateNeedsReset;\n\t    state[\"globaltransport_s01_lastState\"] = this.globaltransport_lastState;\n\t    state[\"globaltransport_s01_beatTimeChanges\"] = this.globaltransport_beatTimeChanges;\n\t    state[\"globaltransport_s01_timeSignatureChanges\"] = this.globaltransport_timeSignatureChanges;\n\t    state[\"globaltransport_s01_setupDone\"] = this.globaltransport_setupDone;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_RNBODefaultMtofLookupTable256\"] = serializeDataRef(this.RNBODefaultMtofLookupTable256);\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_RNBODefaultSinus\"] = serializeDataRef(this.RNBODefaultSinus);\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_makenote_s01_noteStatus\"] = serializeDataRef(this.makenote_01_noteStatusobj);\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_noteNumber\"] = this.noteNumber;\n\t    state[\"p1\"] = 1;\n\t    state[\"p1_isMuted\"] = this.isMuted;\n\t\n\t    for (var i = 0; i < 6; i++)\n\t        this.rnbo_01[i].getState(getSubStateAt(state, \"rnbo_s01p\", i));\n\t}\n\tsetState(state) {\n\t    var shouldRestore = state[patcherSerialKey] == this.getPatcherSerial();\n\t\n\t    if (shouldRestore) {\n\t        if (containsValue(state[eventTargetKey])) {\n\t            this.getEngine().updatePatcherEventTarget(state[eventTargetKey], this);\n\t        }\n\t\n\t        if (containsValue(state[\"dspexpr_a1_s01_in1\"])) {\n\t            this.dspexpr_02_in1 = state[\"dspexpr_a1_s01_in1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"dspexpr_a1_s01_in2\"])) {\n\t            this.dspexpr_02_in2 = state[\"dspexpr_a1_s01_in2\"];\n\t        }\n\t\n\t        if (containsValue(state[\"pack_s01_in1\"])) {\n\t            this.pack_01_in1 = state[\"pack_s01_in1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"pack_s01_in2\"])) {\n\t            this.pack_01_in2 = state[\"pack_s01_in2\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midiformat_s01_channel\"])) {\n\t            this.midiformat_01_channel = state[\"midiformat_s01_channel\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midiformat_s01_pitchbend\"])) {\n\t            this.midiformat_01_pitchbend = state[\"midiformat_s01_pitchbend\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01_target\"])) {\n\t            this.rnbo_01_target = state[\"rnbo_s01_target\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01_midiin\"])) {\n\t            this.rnbo_01_midiin = state[\"rnbo_s01_midiin\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s01_in1\"])) {\n\t            this.expr_03_in1 = state[\"expr_s01_in1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s01_in2\"])) {\n\t            this.expr_03_in2 = state[\"expr_s01_in2\"];\n\t        }\n\t\n\t        if (containsValue(state[\"expr_s01_out1\"])) {\n\t            this.expr_03_out1 = state[\"expr_s01_out1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"random_s01_limit\"])) {\n\t            this.random_01_limit = state[\"random_s01_limit\"];\n\t        }\n\t\n\t        if (containsValue(state[\"random_s01_seed\"])) {\n\t            this.random_01_seed = state[\"random_s01_seed\"];\n\t        }\n\t\n\t        if (containsValue(state[\"makenote_s01_notenumber\"])) {\n\t            this.makenote_01_notenumber = state[\"makenote_s01_notenumber\"];\n\t        }\n\t\n\t        if (containsValue(state[\"makenote_s01_velocity\"])) {\n\t            this.makenote_01_velocity = state[\"makenote_s01_velocity\"];\n\t        }\n\t\n\t        if (containsValue(state[\"makenote_s01_duration\"])) {\n\t            this.makenote_01_duration = state[\"makenote_s01_duration\"];\n\t        }\n\t\n\t        if (containsValue(state[\"metro_s01_on\"])) {\n\t            this.metro_01_on = state[\"metro_s01_on\"];\n\t        }\n\t\n\t        if (containsValue(state[\"metro_s01_interval\"])) {\n\t            this.metro_01_interval = state[\"metro_s01_interval\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_currenttarget\"])) {\n\t            this.midinotecontroller_01_currenttarget = state[\"midinotecontroller_s00_currenttarget\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_midiin\"])) {\n\t            this.midinotecontroller_01_midiin = state[\"midinotecontroller_s00_midiin\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_audioProcessSampleCount\"])) {\n\t            this.audioProcessSampleCount = state[\"p1_audioProcessSampleCount\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_zeroBuffer\"])) {\n\t            this.zeroBuffer = state[\"p1_zeroBuffer\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_dummyBuffer\"])) {\n\t            this.dummyBuffer = state[\"p1_dummyBuffer\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_vs\"])) {\n\t            this.vs = state[\"p1_vs\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_maxvs\"])) {\n\t            this.maxvs = state[\"p1_maxvs\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_sr\"])) {\n\t            this.sr = state[\"p1_sr\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_invsr\"])) {\n\t            this.invsr = state[\"p1_invsr\"];\n\t        }\n\t\n\t        if (containsValue(state[\"rnbo_s01_currentStatus\"])) {\n\t            this.rnbo_01_currentStatus = state[\"rnbo_s01_currentStatus\"];\n\t        }\n\t\n\t        if (containsValue(state[\"random_s01_nz_last\"])) {\n\t            this.random_01_nz_last = state[\"random_s01_nz_last\"];\n\t        }\n\t\n\t        if (containsValue(state[\"random_s01_nz_recip\"])) {\n\t            this.random_01_nz_recip = state[\"random_s01_nz_recip\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_currentStatus\"])) {\n\t            this.midinotecontroller_01_currentStatus = state[\"midinotecontroller_s00_currentStatus\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_status\"])) {\n\t            this.midinotecontroller_01_status = state[\"midinotecontroller_s00_status\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_byte1\"])) {\n\t            this.midinotecontroller_01_byte1 = state[\"midinotecontroller_s00_byte1\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_zone_masterchannel\"])) {\n\t            this.midinotecontroller_01_zone_masterchannel = state[\"midinotecontroller_s00_zone_masterchannel\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_zone_numnotechannels\"])) {\n\t            this.midinotecontroller_01_zone_numnotechannels = state[\"midinotecontroller_s00_zone_numnotechannels\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_zone_masterpitchbendrange\"])) {\n\t            this.midinotecontroller_01_zone_masterpitchbendrange = state[\"midinotecontroller_s00_zone_masterpitchbendrange\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_zone_pernotepitchbendrange\"])) {\n\t            this.midinotecontroller_01_zone_pernotepitchbendrange = state[\"midinotecontroller_s00_zone_pernotepitchbendrange\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_channel_pitchbend\"])) {\n\t            this.midinotecontroller_01_channel_pitchbend = state[\"midinotecontroller_s00_channel_pitchbend\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_channel_pressure\"])) {\n\t            this.midinotecontroller_01_channel_pressure = state[\"midinotecontroller_s00_channel_pressure\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_channel_timbre\"])) {\n\t            this.midinotecontroller_01_channel_timbre = state[\"midinotecontroller_s00_channel_timbre\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_channel_sustain\"])) {\n\t            this.midinotecontroller_01_channel_sustain = state[\"midinotecontroller_s00_channel_sustain\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_voice_lastontime\"])) {\n\t            this.midinotecontroller_01_voice_lastontime = state[\"midinotecontroller_s00_voice_lastontime\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_voice_notenumber\"])) {\n\t            this.midinotecontroller_01_voice_notenumber = state[\"midinotecontroller_s00_voice_notenumber\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_voice_channel\"])) {\n\t            this.midinotecontroller_01_voice_channel = state[\"midinotecontroller_s00_voice_channel\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_voice_state\"])) {\n\t            this.midinotecontroller_01_voice_state = state[\"midinotecontroller_s00_voice_state\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_maxnotesdown\"])) {\n\t            this.midinotecontroller_01_maxnotesdown = state[\"midinotecontroller_s00_maxnotesdown\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_notesdown\"])) {\n\t            this.midinotecontroller_01_notesdown = state[\"midinotecontroller_s00_notesdown\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_note_lastvelocity\"])) {\n\t            this.midinotecontroller_01_note_lastvelocity = state[\"midinotecontroller_s00_note_lastvelocity\"];\n\t        }\n\t\n\t        if (containsValue(state[\"midinotecontroller_s00_muteval\"])) {\n\t            this.midinotecontroller_01_muteval = state[\"midinotecontroller_s00_muteval\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_tempo\"])) {\n\t            this.globaltransport_tempo = state[\"globaltransport_s01_tempo\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_tempoNeedsReset\"])) {\n\t            this.globaltransport_tempoNeedsReset = state[\"globaltransport_s01_tempoNeedsReset\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_lastTempo\"])) {\n\t            this.globaltransport_lastTempo = state[\"globaltransport_s01_lastTempo\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_state\"])) {\n\t            this.globaltransport_state = state[\"globaltransport_s01_state\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_stateNeedsReset\"])) {\n\t            this.globaltransport_stateNeedsReset = state[\"globaltransport_s01_stateNeedsReset\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_lastState\"])) {\n\t            this.globaltransport_lastState = state[\"globaltransport_s01_lastState\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_beatTimeChanges\"])) {\n\t            this.globaltransport_beatTimeChanges = state[\"globaltransport_s01_beatTimeChanges\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_timeSignatureChanges\"])) {\n\t            this.globaltransport_timeSignatureChanges = state[\"globaltransport_s01_timeSignatureChanges\"];\n\t        }\n\t\n\t        if (containsValue(state[\"globaltransport_s01_setupDone\"])) {\n\t            this.globaltransport_setupDone = state[\"globaltransport_s01_setupDone\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_RNBODefaultMtofLookupTable256\"])) {\n\t            this.RNBODefaultMtofLookupTable256 = state[\"p1_RNBODefaultMtofLookupTable256\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_RNBODefaultSinus\"])) {\n\t            this.RNBODefaultSinus = state[\"p1_RNBODefaultSinus\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_makenote_s01_noteStatus\"])) {\n\t            this.makenote_01_noteStatusobj = state[\"p1_makenote_s01_noteStatus\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_noteNumber\"])) {\n\t            this.noteNumber = state[\"p1_noteNumber\"];\n\t        }\n\t\n\t        if (containsValue(state[\"p1_isMuted\"])) {\n\t            this.isMuted = state[\"p1_isMuted\"];\n\t        }\n\t    }\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i] = new RNBOSubpatcher_08();\n\t        this.rnbo_01[i].setEngineAndPatcher(this.getEngine(), this);\n\t        this.rnbo_01[i].initialize(getSubStateAt(state, \"rnbo_s01p\", i));\n\t        this.rnbo_01[i].setParameterOffset(this.getParameterOffset(this.rnbo_01[0]));\n\t        this.rnbo_01[i].setVoiceIndex(i + 1);\n\t    }\n\t}\n\tgetPreset(preset) {\n\t    for (var i = 0; i < 6; i++)\n\t        this.rnbo_01[i].getPreset(getSubStateAt(getSubState(preset, \"__sps\"), \"rnbo_obj-9\", i));\n\t}\n\tsetPreset(time, preset) {\n\t    this.updateTime(time);\n\t}\n\tprocessTempoEvent(time, tempo) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setTempo(tempo)) {\n\t        for (var i = 0; i < 6; i++) {\n\t            this.rnbo_01[i].processTempoEvent(time, tempo);\n\t        }\n\t    }\n\t}\n\tprocessTransportEvent(time, state) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setState(state)) {\n\t        for (var i = 0; i < 6; i++) {\n\t            this.rnbo_01[i].processTransportEvent(time, state);\n\t        }\n\t\n\t        this.metro_01_onTransportChanged(state);\n\t    }\n\t}\n\tprocessBeatTimeEvent(time, beattime) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setBeatTime(beattime)) {\n\t        for (var i = 0; i < 6; i++) {\n\t            this.rnbo_01[i].processBeatTimeEvent(time, beattime);\n\t        }\n\t\n\t        this.metro_01_onBeatTimeChanged(beattime);\n\t    }\n\t}\n\tonSampleRateChanged(samplerate) {}\n\tprocessTimeSignatureEvent(time, numerator, denominator) {\n\t    this.updateTime(time);\n\t\n\t    if (this.globaltransport_setTimeSignature(numerator, denominator)) {\n\t        for (var i = 0; i < 6; i++) {\n\t            this.rnbo_01[i].processTimeSignatureEvent(time, numerator, denominator);\n\t        }\n\t    }\n\t}\n\tsetParameterValue(index, v, time) {\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters())\n\t            this.rnbo_01[0].setPolyParameterValue(this.rnbo_01, index, v, time);\n\t\n\t        break;\n\t    }\n\t}\n\tprocessParameterEvent(index, value, time) {\n\t    this.setParameterValue(index, value, time);\n\t}\n\tprocessNormalizedParameterEvent(index, value, time) {\n\t    this.setParameterValueNormalized(index, value, time);\n\t}\n\tgetParameterValue(index) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters())\n\t            return this.rnbo_01[0].getPolyParameterValue(this.rnbo_01, index);\n\t\n\t        return 0;\n\t    }\n\t}\n\tgetNumSignalInParameters() {\n\t    return 0;\n\t}\n\tgetNumSignalOutParameters() {\n\t    return 0;\n\t}\n\tgetNumParameters() {\n\t    return 0 + this.rnbo_01[0].getNumParameters();\n\t}\n\tgetParameterName(index) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters()) {\n\t            for (var i = 0; i < 6; i++) {\n\t                return this.rnbo_01[i].getParameterName(index);\n\t            }\n\t        }\n\t\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterId(index) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters()) {\n\t            for (var i = 0; i < 6; i++) {\n\t                return this.rnbo_01[i].getParameterId(index);\n\t            }\n\t        }\n\t\n\t        return \"bogus\";\n\t    }\n\t}\n\tgetParameterInfo(index, info) {\n\t    {\n\t        switch (index) {\n\t        default:\n\t            index -= 0;\n\t\n\t            if (index < this.rnbo_01[0].getNumParameters()) {\n\t                for (var i = 0; i < 6; i++) {\n\t                    this.rnbo_01[i].getParameterInfo(index, info);\n\t                }\n\t            }\n\t\n\t            break;\n\t        }\n\t    }\n\t}\n\tsendParameter(index) {\n\t    this.getEngine().notifyParameterValueChanged(index, this.getParameterValue(index));\n\t}\n\tgetParameterOffset(subpatcher) {\n\t    if (subpatcher == this.rnbo_01[0])\n\t        return 0;\n\t\n\t    return 0;\n\t}\n\tapplyStepsToNormalizedParameterValue(normalizedValue, steps) {\n\t    if (steps == 1) {\n\t        if (normalizedValue > 0) {\n\t            normalizedValue = 1.;\n\t        }\n\t    } else {\n\t        let oneStep = 1. / (steps - 1);\n\t        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n\t        normalizedValue = numberOfSteps * oneStep;\n\t    }\n\t\n\t    return normalizedValue;\n\t}\n\tconvertToNormalizedParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters()) {\n\t            for (var i = 0; i < 6; i++) {\n\t                return this.rnbo_01[i].convertToNormalizedParameterValue(index, value);\n\t            }\n\t        }\n\t\n\t        return value;\n\t    }\n\t}\n\tconvertFromNormalizedParameterValue(index, value) {\n\t    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\t\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters()) {\n\t            for (var i = 0; i < 6; i++) {\n\t                return this.rnbo_01[i].convertFromNormalizedParameterValue(index, value);\n\t            }\n\t        }\n\t\n\t        return value;\n\t    }\n\t}\n\tconstrainParameterValue(index, value) {\n\t    switch (index) {\n\t    default:\n\t        index -= 0;\n\t\n\t        if (index < this.rnbo_01[0].getNumParameters()) {\n\t            for (var i = 0; i < 6; i++) {\n\t                return this.rnbo_01[i].constrainParameterValue(index, value);\n\t            }\n\t        }\n\t\n\t        return value;\n\t    }\n\t}\n\tscheduleParamInit(index, order) {\n\t    this.paramInitIndices.push(index);\n\t    this.paramInitOrder.push(order);\n\t}\n\tprocessParamInitEvents() {\n\t    this.listquicksort(\n\t        this.paramInitOrder,\n\t        this.paramInitIndices,\n\t        0,\n\t        this.paramInitOrder.length - 1,\n\t        true\n\t    );\n\t\n\t    for (var i = 0; i < this.paramInitOrder.length; i++) {\n\t        this.getEngine().scheduleParameterChange(\n\t            this.paramInitIndices[i],\n\t            this.getParameterValue(this.paramInitIndices[i]),\n\t            0\n\t        );\n\t    }\n\t}\n\tprocessClockEvent(time, index, hasValue, value) {\n\t    this.updateTime(time);\n\t\n\t    switch (index) {\n\t    case 1181149189:\n\t        this.makenote_01_noteOffClock_set(value);\n\t        break;\n\t    case 1260962393:\n\t        this.metro_01_tick_bang();\n\t        break;\n\t    }\n\t}\n\tprocessOutletAtCurrentTime(sender, index, value) {}\n\tprocessOutletEvent(sender, index, value, time) {\n\t    this.updateTime(time);\n\t    this.processOutletAtCurrentTime(sender, index, value);\n\t}\n\tsendOutlet(index, value) {\n\t    this.getEngine().sendOutlet(this, index, value);\n\t}\n\tprocessNumMessage(tag, objectId, time, payload) {\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].processNumMessage(tag, objectId, time, payload);\n\t    }\n\t}\n\tprocessListMessage(tag, objectId, time, payload) {\n\t    this.updateTime(time);\n\t\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].processListMessage(tag, objectId, time, payload);\n\t    }\n\t}\n\tprocessBangMessage(tag, objectId, time) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].processBangMessage(tag, objectId, time);\n\t    }\n\t}\n\tresolveTag(tag) {\n\t    switch (tag) {\n\t\n\t    }\n\t\n\t    var subpatchResult_0 = this.rnbo_01[0].resolveTag(tag);\n\t\n\t    if (subpatchResult_0)\n\t        return subpatchResult_0;\n\t\n\t    return \"\";\n\t}\n\tgetNumMessages() {\n\t    return 0;\n\t}\n\tgetMessageInfo(index) {\n\t    switch (index) {\n\t\n\t    }\n\t\n\t    return NullMessageInfo;\n\t}\n\tstartup(state) {\n\t    var shouldRestore = state[patcherSerialKey] == this.getPatcherSerial();\n\t    this.updateTime(this.getEngine().getCurrentTime());\n\t\n\t    for (var i = 0; i < 6; i++) {\n\t        this.rnbo_01[i].startup(getSubStateAt(state, \"rnbo_s01p\", i));\n\t    }\n\t\n\t    if (!shouldRestore || !containsValue(state[\"metro_s01\"])) {\n\t        if (this.metro_01_on)\n\t            this.metro_01_on_set(1);\n\t    }\n\t\n\t    this.processParamInitEvents();\n\t}\n\tpack_01_in2_set(v) {\n\t    this.pack_01_in2 = v;\n\t}\n\tmakenote_01_velocity_out_set(v) {\n\t    this.pack_01_in2_set(v);\n\t}\n\tmidinotecontroller_01_currenttarget_set(v) {\n\t    this.midinotecontroller_01_currenttarget = v;\n\t}\n\trnbo_01_target_set(v) {\n\t    this.rnbo_01_target = v;\n\t    this.midinotecontroller_01_currenttarget_set(v);\n\t}\n\tmidinotecontroller_01_target_set(v) {\n\t    this.rnbo_01_target_set(v);\n\t}\n\trnbo_01_midiininternal_set(v) {\n\t    let sendlen = 0;\n\t    this.rnbo_01_currentStatus = parseMidi(this.rnbo_01_currentStatus, v, this.rnbo_01_mididata[0]);\n\t\n\t    switch (this.rnbo_01_currentStatus) {\n\t    case MIDI_StatusByteReceived:\n\t        this.rnbo_01_mididata[0] = v;\n\t        this.rnbo_01_mididata[1] = -1;\n\t        break;\n\t    case MIDI_SecondByteReceived:\n\t    case MIDI_ProgramChange:\n\t    case MIDI_ChannelPressure:\n\t        this.rnbo_01_mididata[1] = v;\n\t\n\t        if (this.rnbo_01_currentStatus == MIDI_ProgramChange || this.rnbo_01_currentStatus == MIDI_ChannelPressure) {\n\t            sendlen = 2;\n\t        }\n\t\n\t        break;\n\t    case MIDI_NoteOff:\n\t    case MIDI_NoteOn:\n\t    case MIDI_Aftertouch:\n\t    case MIDI_CC:\n\t    case MIDI_PitchBend:\n\t    default:\n\t        this.rnbo_01_mididata[2] = v;\n\t        sendlen = 3;\n\t        break;\n\t    }\n\t\n\t    if (sendlen) {\n\t        var i;\n\t\n\t        if (this.rnbo_01_target > 0 && this.rnbo_01_target <= 6) {\n\t            i = this.rnbo_01_target - 1;\n\t            this.rnbo_01[i].processMidiEvent(this.currentTime, 0, this.rnbo_01_mididata, sendlen);\n\t        } else if (this.rnbo_01_target == 0) {\n\t            for (i = 0; i < 6; i++) {\n\t                this.rnbo_01[i].processMidiEvent(this.currentTime, 0, this.rnbo_01_mididata, sendlen);\n\t            }\n\t        }\n\t    }\n\t}\n\tmidinotecontroller_01_midiout_set(v) {\n\t    this.rnbo_01_midiininternal_set(v);\n\t}\n\trnbo_01_noteNumber_set(v) {\n\t    if (this.rnbo_01_target > 0) {\n\t        this.rnbo_01[this.rnbo_01_target - 1].setNoteNumber(v);\n\t    }\n\t}\n\tmidinotecontroller_01_noteNumber_set(v) {\n\t    this.rnbo_01_noteNumber_set(v);\n\t}\n\tmidinotecontroller_01_voicestatus_set(v) {\n\t    if (v[1] == 1) {\n\t        let currentTarget = this.midinotecontroller_01_currenttarget;\n\t        this.midinotecontroller_01_target_set(v[0]);\n\t        this.midinotecontroller_01_noteNumber_set(0);\n\t        this.midinotecontroller_01_target_set(currentTarget);\n\t    }\n\t}\n\trnbo_01_voicestatus_set(v) {\n\t    this.midinotecontroller_01_voicestatus_set(v);\n\t}\n\trnbo_01_activevoices_set(v) {}\n\trnbo_01_mute_set(v) {\n\t    if (v[0] == 0) {\n\t        for (var i = 0; i < 6; i++) {\n\t            this.rnbo_01[i].setIsMuted(v[1]);\n\t        }\n\t    } else {\n\t        var subpatcherIndex = v[0] - 1;\n\t\n\t        if (subpatcherIndex >= 0 && subpatcherIndex < 6) {\n\t            this.rnbo_01[subpatcherIndex].setIsMuted(v[1]);\n\t        }\n\t    }\n\t\n\t    var tmp = [v[0], v[1]];\n\t    this.rnbo_01_voicestatus_set(tmp);\n\t    this.rnbo_01_activevoices_set(this.rnbo_01_calcActiveVoices());\n\t}\n\tmidinotecontroller_01_mute_set(v) {\n\t    this.rnbo_01_mute_set(v);\n\t}\n\tmidinotecontroller_01_midiin_set(v) {\n\t    this.midinotecontroller_01_midiin = v;\n\t\n\t    this.midinotecontroller_01_currentStatus = parseMidi(\n\t        this.midinotecontroller_01_currentStatus,\n\t        v,\n\t        this.midinotecontroller_01_status\n\t    );\n\t\n\t    switch (this.midinotecontroller_01_currentStatus) {\n\t    case MIDI_StatusByteReceived:\n\t        {\n\t            this.midinotecontroller_01_status = v;\n\t            this.midinotecontroller_01_byte1 = -1;\n\t            break;\n\t        }\n\t    case MIDI_SecondByteReceived:\n\t        this.midinotecontroller_01_byte1 = v;\n\t        break;\n\t    case MIDI_NoteOn:\n\t        {\n\t            let sendnoteoff = true;\n\t            let target = 1;\n\t            let oldest = this.midinotecontroller_01_voice_lastontime[0];\n\t            let target_state = this.midinotecontroller_01_voice_state[0];\n\t\n\t            for (let i = 0; i < 6; i++) {\n\t                let candidate_state = this.midinotecontroller_01_voice_state[i];\n\t\n\t                if (this.midinotecontroller_01_voice_notenumber[i] == this.midinotecontroller_01_byte1 && candidate_state == MIDI_NoteState_On) {\n\t                    sendnoteoff = false;\n\t                    target = i + 1;\n\t                    break;\n\t                }\n\t\n\t                if (i > 0) {\n\t                    if (candidate_state != MIDI_NoteState_On || target_state == MIDI_NoteState_On) {\n\t                        let candidate_ontime = this.midinotecontroller_01_voice_lastontime[i];\n\t\n\t                        if (candidate_ontime < oldest || target_state == MIDI_NoteState_On && candidate_state != MIDI_NoteState_On) {\n\t                            target = i + 1;\n\t                            oldest = candidate_ontime;\n\t                            target_state = candidate_state;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (sendnoteoff)\n\t                this.midinotecontroller_01_sendnoteoff(target);\n\t\n\t            let i = target - 1;\n\t            this.midinotecontroller_01_voice_state[i] = MIDI_NoteState_On;\n\t            this.midinotecontroller_01_voice_lastontime[i] = this.currentTime;\n\t            this.midinotecontroller_01_voice_notenumber[i] = this.midinotecontroller_01_byte1;\n\t            this.midinotecontroller_01_voice_channel[i] = this.midinotecontroller_01_status & 0x0F;\n\t\n\t            for (let j = 0; j < this.midinotecontroller_01_maxnotesdown; j++) {\n\t                if (this.midinotecontroller_01_notesdown[j] == 0) {\n\t                    this.midinotecontroller_01_notesdown[j] = this.midinotecontroller_01_voice_notenumber[i];\n\t                    break;\n\t                }\n\t            }\n\t\n\t            this.midinotecontroller_01_note_lastvelocity[this.midinotecontroller_01_voice_notenumber[i]] = v;\n\t            this.midinotecontroller_01_sendpitchbend(i);\n\t            this.midinotecontroller_01_sendpressure(i);\n\t            this.midinotecontroller_01_sendtimbre(i);\n\t            this.midinotecontroller_01_muteval[0] = target;\n\t            this.midinotecontroller_01_muteval[1] = 0;\n\t            this.midinotecontroller_01_mute_set(this.midinotecontroller_01_muteval);\n\t            let currentTarget = this.midinotecontroller_01_currenttarget;\n\t            this.midinotecontroller_01_target_set(target);\n\t            this.midinotecontroller_01_noteNumber_set(this.midinotecontroller_01_voice_notenumber[i]);\n\t            this.midinotecontroller_01_midiout_set(MIDI_NoteOnMask | this.midinotecontroller_01_voice_channel[i]);\n\t            this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_voice_notenumber[i]);\n\t            this.midinotecontroller_01_midiout_set(v);\n\t            this.midinotecontroller_01_target_set(currentTarget);\n\t            break;\n\t        }\n\t    case MIDI_NoteOff:\n\t        {\n\t            let target = 0;\n\t            let notenumber = this.midinotecontroller_01_byte1;\n\t            let channel = this.midinotecontroller_01_status & 0x0F;\n\t\n\t            for (let i = 0; i < 6; i++) {\n\t                if (this.midinotecontroller_01_voice_notenumber[i] == notenumber && this.midinotecontroller_01_voice_channel[i] == channel && this.midinotecontroller_01_voice_state[i] == MIDI_NoteState_On) {\n\t                    target = i + 1;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            if (target > 0) {\n\t                let i = target - 1;\n\t                let j = channel;\n\t                let ignorechannelsustain = true;\n\t\n\t                if (this.midinotecontroller_01_channel_sustain[(ignorechannelsustain ? 0 : j)]) {\n\t                    this.midinotecontroller_01_voice_state[i] = MIDI_NoteState_Sustained;\n\t                } else {\n\t                    let currentTarget = this.midinotecontroller_01_currenttarget;\n\t                    this.midinotecontroller_01_target_set(target);\n\t                    this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status);\n\t                    this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1);\n\t                    this.midinotecontroller_01_midiout_set(v);\n\t                    this.midinotecontroller_01_target_set(currentTarget);\n\t\n\t                    if (this.midinotecontroller_01_currentStatus == MIDI_NoteOff) {\n\t                        this.midinotecontroller_01_voice_state[i] = MIDI_NoteState_Off;\n\t                    }\n\t                }\n\t            } else\n\t                {}\n\t\n\t            let found = false;\n\t\n\t            for (let i = 0; i < this.midinotecontroller_01_maxnotesdown; i++) {\n\t                if (this.midinotecontroller_01_notesdown[i] == 0) {\n\t                    break;\n\t                } else if (this.midinotecontroller_01_notesdown[i] == notenumber) {\n\t                    found = true;\n\t                }\n\t\n\t                if (found) {\n\t                    this.midinotecontroller_01_notesdown[i] = this.midinotecontroller_01_notesdown[i + 1];\n\t                }\n\t            }\n\t\n\t            if (6 == 1 && this.midinotecontroller_01_notesdown[0]) {\n\t                for (let i = 0; i < this.midinotecontroller_01_maxnotesdown; i++) {\n\t                    if (this.midinotecontroller_01_notesdown[i + 1] == 0) {\n\t                        if (this.midinotecontroller_01_voice_notenumber[0] == this.midinotecontroller_01_notesdown[i])\n\t                            break;\n\t\n\t                        let k = channel;\n\t                        this.midinotecontroller_01_midiout_set(MIDI_NoteOnMask | k);\n\t                        this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_notesdown[i]);\n\t\n\t                        this.midinotecontroller_01_midiout_set(\n\t                            this.midinotecontroller_01_note_lastvelocity[this.midinotecontroller_01_notesdown[i]]\n\t                        );\n\t\n\t                        this.midinotecontroller_01_voice_notenumber[0] = this.midinotecontroller_01_notesdown[i];\n\t                        this.midinotecontroller_01_voice_state[0] = MIDI_NoteState_On;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            break;\n\t        }\n\t    case MIDI_Aftertouch:\n\t        {\n\t            let currentTarget = this.midinotecontroller_01_currenttarget;\n\t            this.midinotecontroller_01_target_set(0);\n\t            this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status);\n\t            this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1);\n\t            this.midinotecontroller_01_midiout_set(v);\n\t            this.midinotecontroller_01_target_set(currentTarget);\n\t            break;\n\t        }\n\t    case MIDI_CC:\n\t        {\n\t            let k = this.midinotecontroller_01_byte1;\n\t            let sendToAllVoices = true;\n\t\n\t            switch (this.midinotecontroller_01_byte1) {\n\t            case MIDI_CC_Sustain:\n\t                {\n\t                    let pedaldown = (v >= 64 ? true : false);\n\t                    let channel = this.midinotecontroller_01_status & 0x0F;\n\t                    let j = channel;\n\t                    let ignoresustainchannel = true;\n\t                    this.midinotecontroller_01_channel_sustain[(ignoresustainchannel ? 0 : j)] = pedaldown;\n\t\n\t                    if (!pedaldown) {\n\t                        for (let i = 0; i < 6; i++) {\n\t                            if ((ignoresustainchannel || this.midinotecontroller_01_voice_channel[i] == channel) && this.midinotecontroller_01_voice_state[i] == MIDI_NoteState_Sustained) {\n\t                                let currentTarget = this.midinotecontroller_01_currenttarget;\n\t                                this.midinotecontroller_01_target_set(i + 1);\n\t                                this.midinotecontroller_01_midiout_set(MIDI_NoteOffMask | j);\n\t                                this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_voice_notenumber[i]);\n\t                                this.midinotecontroller_01_midiout_set(64);\n\t                                this.midinotecontroller_01_target_set(currentTarget);\n\t                                this.midinotecontroller_01_voice_state[i] = MIDI_NoteState_Off;\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    break;\n\t                }\n\t            case MIDI_CC_TimbreMSB:\n\t                {\n\t                    let channel = this.midinotecontroller_01_status & 0x0F;\n\t                    let k = v;\n\t                    let timbre = (k & 0x7F) << 7;\n\t                    this.midinotecontroller_01_channel_timbre[this.midinotecontroller_01_status & 0x0F] = timbre;\n\t\n\t                    for (let i = 0; i < 6; i++) {\n\t                        if (this.midinotecontroller_01_voice_channel[i] == channel && this.midinotecontroller_01_voice_state[i] != MIDI_NoteState_Off) {\n\t                            this.midinotecontroller_01_sendtimbre(i);\n\t                        }\n\t                    }\n\t\n\t                    sendToAllVoices = false;\n\t                    break;\n\t                }\n\t            case MIDI_CC_TimbreLSB:\n\t                {\n\t                    break;\n\t                }\n\t            case MIDI_CC_AllNotesOff:\n\t                {\n\t                    this.midinotecontroller_01_sendallnotesoff();\n\t                    break;\n\t                }\n\t            }\n\t\n\t            if (sendToAllVoices) {\n\t                let currentTarget = this.midinotecontroller_01_currenttarget;\n\t                this.midinotecontroller_01_target_set(0);\n\t                this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status);\n\t                this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1);\n\t                this.midinotecontroller_01_midiout_set(v);\n\t                this.midinotecontroller_01_target_set(currentTarget);\n\t            }\n\t\n\t            break;\n\t        }\n\t    case MIDI_ProgramChange:\n\t        {\n\t            let currentTarget = this.midinotecontroller_01_currenttarget;\n\t            this.midinotecontroller_01_target_set(0);\n\t            this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_status);\n\t            this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_byte1);\n\t            this.midinotecontroller_01_target_set(currentTarget);\n\t            break;\n\t        }\n\t    case MIDI_ChannelPressure:\n\t        {\n\t            let channel = this.midinotecontroller_01_status & 0x0F;\n\t\n\t            for (let i = 0; i < 6; i++) {\n\t                if (this.midinotecontroller_01_voice_state[i] != MIDI_NoteState_Off && this.midinotecontroller_01_voice_channel[i] == channel) {\n\t                    let k = channel;\n\t                    this.midinotecontroller_01_channel_pressure[k] = v;\n\t                    this.midinotecontroller_01_sendpressure(i);\n\t                }\n\t            }\n\t\n\t            break;\n\t        }\n\t    case MIDI_PitchBend:\n\t        {\n\t            let i = v;\n\t            let bendamount = this.midinotecontroller_01_byte1 | i << 7;\n\t            let channel = this.midinotecontroller_01_status & 0x0F;\n\t            let j = channel;\n\t            this.midinotecontroller_01_channel_pitchbend[j] = bendamount;\n\t\n\t            for (let i = 0; i < 6; i++) {\n\t                if (this.midinotecontroller_01_voice_state[i] != MIDI_NoteState_Off && this.midinotecontroller_01_voice_channel[i] == channel) {\n\t                    this.midinotecontroller_01_sendpitchbend(i);\n\t                }\n\t            }\n\t\n\t            break;\n\t        }\n\t    }\n\t}\n\trnbo_01_midiin_set(v) {\n\t    this.rnbo_01_midiin = v;\n\t    this.midinotecontroller_01_midiin_set(v);\n\t}\n\tmidiformat_01_midimessage_set(v) {\n\t    this.rnbo_01_midiin_set(v);\n\t}\n\tmidiformat_01_noteonoroff_set(v) {\n\t    if (v.length > 1) {\n\t        if (v[1] == 0) {\n\t            this.midiformat_01_midimessage_set(0x80 + this.midiformat_01_channel);\n\t            this.midiformat_01_midimessage_set(v[0]);\n\t            this.midiformat_01_midimessage_set((v.length >= 3 ? v[2] : 0));\n\t        } else {\n\t            this.midiformat_01_midimessage_set(0x90 + this.midiformat_01_channel);\n\t            this.midiformat_01_midimessage_set(v[0]);\n\t            this.midiformat_01_midimessage_set(v[1]);\n\t        }\n\t    }\n\t}\n\tpack_01_out_set(v) {\n\t    this.midiformat_01_noteonoroff_set(v);\n\t}\n\tpack_01_in1_set(v) {\n\t    this.pack_01_in1 = v;\n\t    let array = list(0, 0);\n\t    array[0] = rnbo_trunc(this.pack_01_in1);\n\t    array[1] = rnbo_trunc(this.pack_01_in2);\n\t    this.pack_01_out_set(array);\n\t}\n\tmakenote_01_notenumber_out_set(v) {\n\t    this.pack_01_in1_set(v);\n\t}\n\tmakenote_01_notenumber_set(v) {\n\t    this.makenote_01_notenumber = v;\n\t    this.makenote_01_sendNoteOn(v);\n\t    this.getEngine().scheduleClockEventWithValue(this, 1181149189, this.makenote_01_duration + this.currentTime, v);;\n\t}\n\texpr_03_out1_set(v) {\n\t    this.expr_03_out1 = v;\n\t    this.makenote_01_notenumber_set(this.expr_03_out1);\n\t}\n\texpr_03_in1_set(v) {\n\t    this.expr_03_in1 = v;\n\t    this.expr_03_out1_set(this.expr_03_in1 + this.expr_03_in2);\n\t}\n\trandom_01_result_set(v) {\n\t    this.expr_03_in1_set(v);\n\t}\n\trandom_01_trigger_bang() {\n\t    {\n\t        this.random_01_result_set(this.random(0, this.random_01_limit));\n\t    }\n\t}\n\tmetro_01_tickout_bang() {\n\t    this.random_01_trigger_bang();\n\t}\n\tmetro_01_on_set(v) {\n\t    this.metro_01_on = v;\n\t    this.getEngine().flushClockEvents(this, 1260962393, false);;\n\t\n\t    if (v) {\n\t        {\n\t            this.getEngine().scheduleClockEvent(this, 1260962393, 0 + this.currentTime);;\n\t        }\n\t    }\n\t}\n\trnbo_01_perform(out1, n) {\n\t    var outs = [out1];\n\t\n\t    for (var chan = 0; chan < 1; chan++)\n\t        zeroSignal(outs[chan], n);\n\t\n\t    for (var i = 0; i < 6; i++)\n\t        this.rnbo_01[i].process(0, 0, outs, 1, n);\n\t}\n\tdspexpr_02_perform(in1, in2, out1, n) {\n\t    var i;\n\t\n\t    for (i = 0; i < n; i++) {\n\t        out1[i] = in1[i] * 0.25;\n\t    }\n\t}\n\tmidiformat_01_channel_setter(v) {\n\t    let chan = v - 1;\n\t\n\t    if (chan < 0)\n\t        chan = 0;\n\t    else if (chan > 15)\n\t        chan = 15;\n\t\n\t    this.midiformat_01_channel = chan;\n\t}\n\trandom_01_limit_setter(v) {\n\t    if (v >= 0)\n\t        this.random_01_limit = v;\n\t}\n\tmetro_01_interval_setter(v) {\n\t    this.metro_01_interval = (v > 0 ? v : 0);\n\t}\n\trnbo_01_calcActiveVoices() {\n\t    {\n\t        let activeVoices = 0;\n\t\n\t        for (let i = 0; i < 6; i++) {\n\t            if (!this.rnbo_01[i].getIsMuted())\n\t                activeVoices++;\n\t        }\n\t\n\t        return activeVoices;\n\t    }\n\t}\n\trandom_01_nz_init() {\n\t    this.random_01_nz_last = systemticks() + this.voiceIndex + this.random(0, 10000);\n\t    this.random_01_nz_recip = 2 / 8388607;\n\t}\n\trandom_01_nz_seed(v) {\n\t    this.random_01_nz_last = v;\n\t}\n\trandom_01_nz_next() {\n\t    this.random_01_nz_last = rnbo_imul(1664525, this.random_01_nz_last) + 1013904223 | 0;\n\t    var itemp = 0x007fffff & this.random_01_nz_last;\n\t    return itemp * this.random_01_nz_recip - 1.;\n\t}\n\tmakenote_01_sendNoteOff(noteNumber) {\n\t    this.makenote_01_noteStatus[noteNumber] = 0;\n\t    this.makenote_01_velocity_out_set(0);\n\t    this.makenote_01_notenumber_out_set(noteNumber);\n\t}\n\tmakenote_01_sendNoteOn(noteNumber) {\n\t    this.makenote_01_noteStatus[noteNumber] = 1;\n\t    this.makenote_01_velocity_out_set(this.makenote_01_velocity);\n\t    this.makenote_01_notenumber_out_set(noteNumber);\n\t}\n\tmetro_01_onTransportChanged(state) {}\n\tmetro_01_onBeatTimeChanged(beattime) {}\n\tmidinotecontroller_01_sendnoteoff(target) {\n\t    let i = target - 1;\n\t\n\t    if (this.midinotecontroller_01_voice_state[i] != MIDI_NoteState_Off) {\n\t        let currentTarget = this.midinotecontroller_01_currenttarget;\n\t        this.midinotecontroller_01_target_set(target);\n\t        this.midinotecontroller_01_midiout_set(MIDI_NoteOffMask | this.midinotecontroller_01_voice_channel[i]);\n\t        this.midinotecontroller_01_midiout_set(this.midinotecontroller_01_voice_notenumber[i]);\n\t        this.midinotecontroller_01_midiout_set(64);\n\t        this.midinotecontroller_01_voice_state[i] = MIDI_NoteState_Off;\n\t        this.midinotecontroller_01_target_set(currentTarget);\n\t    }\n\t}\n\tmidinotecontroller_01_sendpitchbend(v) {\n\t    if (v >= 0 && v < 6) {\n\t        let currentTarget = this.midinotecontroller_01_currenttarget;\n\t        this.midinotecontroller_01_target_set(v + 1);\n\t        let totalbendamount = this.midinotecontroller_01_channel_pitchbend[this.midinotecontroller_01_voice_channel[v]];\n\t        this.midinotecontroller_01_midiout_set(MIDI_PitchBendMask | this.midinotecontroller_01_voice_channel[v]);\n\t        this.midinotecontroller_01_midiout_set(totalbendamount & 0x7F);\n\t        this.midinotecontroller_01_midiout_set(totalbendamount >> 7 & 0x7F);\n\t        this.midinotecontroller_01_target_set(currentTarget);\n\t    }\n\t}\n\tmidinotecontroller_01_sendpressure(v) {\n\t    let currentTarget = this.midinotecontroller_01_currenttarget;\n\t    this.midinotecontroller_01_target_set(v + 1);\n\t    this.midinotecontroller_01_midiout_set(MIDI_ChannelPressureMask | this.midinotecontroller_01_voice_channel[v]);\n\t\n\t    this.midinotecontroller_01_midiout_set(\n\t        this.midinotecontroller_01_channel_pressure[this.midinotecontroller_01_voice_channel[v]]\n\t    );\n\t\n\t    this.midinotecontroller_01_target_set(currentTarget);\n\t}\n\tmidinotecontroller_01_sendtimbre(v) {\n\t    let currentTarget = this.midinotecontroller_01_currenttarget;\n\t    this.midinotecontroller_01_target_set(v + 1);\n\t    this.midinotecontroller_01_midiout_set(MIDI_CCMask | this.midinotecontroller_01_voice_channel[v]);\n\t    this.midinotecontroller_01_midiout_set(MIDI_CC_TimbreLSB);\n\t\n\t    this.midinotecontroller_01_midiout_set(\n\t        this.midinotecontroller_01_channel_timbre[this.midinotecontroller_01_voice_channel[v]] & 0x7F\n\t    );\n\t\n\t    this.midinotecontroller_01_midiout_set(MIDI_CCMask | this.midinotecontroller_01_voice_channel[v]);\n\t    this.midinotecontroller_01_midiout_set(MIDI_CC_TimbreMSB);\n\t\n\t    this.midinotecontroller_01_midiout_set(\n\t        this.midinotecontroller_01_channel_timbre[this.midinotecontroller_01_voice_channel[v]] >> 7 & 0x7F\n\t    );\n\t\n\t    this.midinotecontroller_01_target_set(currentTarget);\n\t}\n\tmidinotecontroller_01_sendallnotesoff() {\n\t    for (let i = 1; i <= 6; i++) {\n\t        this.midinotecontroller_01_sendnoteoff(i);\n\t    }\n\t}\n\tglobaltransport_getTempoAtSample(sampleOffset) {\n\t    return (this.vs > 0 ? this.globaltransport_tempo[sampleOffset] : this.globaltransport_lastTempo);\n\t}\n\tglobaltransport_getTempo() {\n\t    return this.globaltransport_getTempoAtSample(this.sampleOffsetIntoNextAudioBuffer);\n\t}\n\tglobaltransport_setTempo(tempo) {\n\t    if (this.globaltransport_getTempo() != tempo) {\n\t        fillSignal(\n\t            this.globaltransport_tempo,\n\t            this.vs,\n\t            tempo,\n\t            this.sampleOffsetIntoNextAudioBuffer\n\t        );\n\t\n\t        this.globaltransport_lastTempo = tempo;\n\t        this.globaltransport_tempoNeedsReset = true;\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tglobaltransport_getStateAtSample(sampleOffset) {\n\t    return (this.vs > 0 ? this.globaltransport_state[sampleOffset] : this.globaltransport_lastState);\n\t}\n\tglobaltransport_getState() {\n\t    return this.globaltransport_getStateAtSample(this.sampleOffsetIntoNextAudioBuffer);\n\t}\n\tglobaltransport_getBeatTimeAtMsTime(time) {\n\t    var i = 2;\n\t\n\t    while (i < this.globaltransport_beatTimeChanges.length && this.globaltransport_beatTimeChanges[i + 1] <= time) {\n\t        i += 2;\n\t    }\n\t\n\t    i -= 2;\n\t    var beatTimeBase = this.globaltransport_beatTimeChanges[i];\n\t\n\t    if (!this.globaltransport_getState())\n\t        return beatTimeBase;\n\t\n\t    var beatTimeBaseMsTime = this.globaltransport_beatTimeChanges[i + 1];\n\t    var diff = time - beatTimeBaseMsTime;\n\t    return beatTimeBase + this.mstobeats(diff);\n\t}\n\tglobaltransport_getBeatTime() {\n\t    return this.globaltransport_getBeatTimeAtMsTime(this.currenttime());\n\t}\n\tglobaltransport_setState(state) {\n\t    if (this.globaltransport_getState() != state) {\n\t        fillSignal(\n\t            this.globaltransport_state,\n\t            this.vs,\n\t            state,\n\t            this.sampleOffsetIntoNextAudioBuffer\n\t        );\n\t\n\t        this.globaltransport_lastState = state;\n\t        this.globaltransport_stateNeedsReset = true;\n\t\n\t        if (!state) {\n\t            this.globaltransport_beatTimeChanges.push(this.globaltransport_getBeatTime());\n\t            this.globaltransport_beatTimeChanges.push(this.currenttime());\n\t        }\n\t\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tglobaltransport_setBeatTime(beattime) {\n\t    var beatTimeHasChanged = false;\n\t    var oldBeatTime = this.globaltransport_getBeatTime();\n\t    var newBeatTime = beattime;\n\t\n\t    if (oldBeatTime != newBeatTime) {\n\t        beatTimeHasChanged = true;\n\t    }\n\t\n\t    this.globaltransport_beatTimeChanges.push(beattime);\n\t    this.globaltransport_beatTimeChanges.push(this.currenttime());\n\t    return beatTimeHasChanged;\n\t}\n\tglobaltransport_getBeatTimeAtSample(sampleOffset) {\n\t    var msOffset = this.sampstoms(sampleOffset);\n\t    return this.globaltransport_getBeatTimeAtMsTime(this.currenttime() + msOffset);\n\t}\n\tglobaltransport_getTimeSignatureAtMsTime(time) {\n\t    var i = 3;\n\t\n\t    while (i < this.globaltransport_timeSignatureChanges.length && this.globaltransport_timeSignatureChanges[i + 2] <= time) {\n\t        i += 3;\n\t    }\n\t\n\t    i -= 3;\n\t\n\t    return [\n\t        this.globaltransport_timeSignatureChanges[i],\n\t        this.globaltransport_timeSignatureChanges[i + 1]\n\t    ];\n\t}\n\tglobaltransport_getTimeSignature() {\n\t    return this.globaltransport_getTimeSignatureAtMsTime(this.currenttime());\n\t}\n\tglobaltransport_getTimeSignatureAtSample(sampleOffset) {\n\t    var msOffset = this.sampstoms(sampleOffset);\n\t    return this.globaltransport_getTimeSignatureAtMsTime(this.currenttime() + msOffset);\n\t}\n\tglobaltransport_setTimeSignature(numerator, denominator) {\n\t    var currentSig = this.globaltransport_getTimeSignature();\n\t\n\t    if (currentSig[0] != numerator || currentSig[1] != denominator) {\n\t        this.globaltransport_timeSignatureChanges.push(numerator);\n\t        this.globaltransport_timeSignatureChanges.push(denominator);\n\t        this.globaltransport_timeSignatureChanges.push(this.currentTime);\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\tglobaltransport_advance() {\n\t    if (this.globaltransport_tempoNeedsReset) {\n\t        fillSignal(this.globaltransport_tempo, this.vs, this.globaltransport_lastTempo);\n\t        this.globaltransport_tempoNeedsReset = false;\n\t    }\n\t\n\t    if (this.globaltransport_stateNeedsReset) {\n\t        fillSignal(this.globaltransport_state, this.vs, this.globaltransport_lastState);\n\t        this.globaltransport_stateNeedsReset = false;\n\t    }\n\t\n\t    this.globaltransport_beatTimeChanges[0] = this.globaltransport_beatTimeChanges[this.globaltransport_beatTimeChanges.length - 2];\n\t    this.globaltransport_beatTimeChanges[1] = this.globaltransport_beatTimeChanges[this.globaltransport_beatTimeChanges.length - 1];\n\t    this.globaltransport_beatTimeChanges.length = 2;\n\t    this.globaltransport_timeSignatureChanges[0] = this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length - 3];\n\t    this.globaltransport_timeSignatureChanges[1] = this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length - 2];\n\t    this.globaltransport_timeSignatureChanges[2] = this.globaltransport_timeSignatureChanges[this.globaltransport_timeSignatureChanges.length - 1];\n\t    this.globaltransport_timeSignatureChanges.length = 3;\n\t}\n\tglobaltransport_dspsetup(force) {\n\t    if (this.globaltransport_setupDone && !force)\n\t        return;\n\t\n\t    fillSignal(this.globaltransport_tempo, this.vs, this.globaltransport_lastTempo);\n\t    this.globaltransport_tempoNeedsReset = false;\n\t    fillSignal(this.globaltransport_state, this.vs, this.globaltransport_lastState);\n\t    this.globaltransport_stateNeedsReset = false;\n\t    this.globaltransport_setupDone = true;\n\t}\n\tupdateTime(time) {\n\t    this.currentTime = time;\n\t    this.sampleOffsetIntoNextAudioBuffer = rnbo_floor(this.msToSamps(time - this.getEngine().getCurrentTime(), this.sr));\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer >= this.vs)\n\t        this.sampleOffsetIntoNextAudioBuffer = this.vs - 1;\n\t\n\t    if (this.sampleOffsetIntoNextAudioBuffer < 0)\n\t        this.sampleOffsetIntoNextAudioBuffer = 0;\n\t}\n\tassign_defaults() {}\n\tsetEngineAndPatcher(engineInterface, parentPatcher) {\n\t    this._engineInterface = engineInterface;\n\t    this._parentPatcher = parentPatcher;\n\t}\n\tgetEngine() {\n\t    return this._engineInterface;\n\t}\n\tgetPatcher() {\n\t    return this._parentPatcher;\n\t}\n\tgetTopLevelPatcher() {\n\t    return this;\n\t}\n} // end class\n\nrnboObj = new RNBOPatcher();","wasm":"","wasmEncoding":"base64"}